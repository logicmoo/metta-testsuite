# .github/workflows/ci.yml

name: CI Job to Generate JUnit Reports with Diff and Allure Reports

on:
  schedule:
    - cron: '17 0 * * *'  # Nightly run at 00:17 UTC
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main

permissions:
  contents: write        # Allows pushing to branches
  pages: write           # Allows managing GitHub Pages (requires PAT)
  actions: write         # Allows workflow actions
  checks: write          # Allows updating check runs
  pull-requests: write   # Allows updating pull requests

jobs:
  generate-reports:
    runs-on: ubuntu-latest
    env:
      JOB_TYPE: ${{ github.event_name == 'schedule' && 'nightly' || 'ci' }}
      REPO_URL: https://github.com/${{ github.repository }}

    steps:
    - name: Checkout main branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Setup Git User
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"

    - name: Make Install Script Executable
      run: chmod +x INSTALL.sh

    - name: Run Install Script to install Mettalog
      run: |
        . ./INSTALL.sh --easy
        sudo chmod -R 777 .
        echo $PATH >> $GITHUB_PATH

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install python packages
      run: |
        pip install ansi2html
        pip install hyperon
        pip install junit2html

    - name: Make Scripts Executable
      run: chmod +x scripts/*.sh

    - name: Run Test Script to Generate Input File
      continue-on-error: true
      run: |      
        TIMESTAMP=$(date +"%Y-%m-%dT%H:%M:%S")
        BASELINE_COMPAT_PATH=reports/tests_output/now
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        echo "BASELINE_COMPAT_PATH=$BASELINE_COMPAT_PATH" >> $GITHUB_ENV
        mkdir -p $BASELINE_COMPAT_PATH
        if [ "${{ env.JOB_TYPE }}" == "nightly" ]; then
          ./scripts/run_nightly_tests.sh -t $TIMESTAMP
        else
          ./scripts/run_commit_tests.sh -t $TIMESTAMP
        fi        
      env:
        TERM: xterm-256color

    - name: Parse Test Results
      run: |
        # Extract test IDs and their statuses into a sorted file
        awk -F '|' '{print $2 "|" $3}' /tmp/SHARED.UNITS | grep -E 'PASS|FAIL' | sort > current_test_results_${{ env.JOB_TYPE }}.txt

    # Check out 'test-results' branch into 'test-results' subdirectory
    - name: Checkout test-results branch into subdirectory
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: test-results
        path: test-results
        fetch-depth: 0
        persist-credentials: true  # Ensure we can push back

    # Handle case where 'test-results' branch doesn't exist
    - name: Initialize test-results branch if it doesn't exist
      run: |
        cd test-results
        if [ "$(git rev-parse --abbrev-ref HEAD)" != "test-results" ]; then
          echo "test-results branch does not exist. Creating it."
          git checkout -b test-results
          git commit --allow-empty -m "Initialize test-results branch"
          git push origin test-results
        else
          echo "test-results branch already exists."
        fi
        cd ..

    - name: Compare Test Results
      id: compare_tests
      run: |
        if [ -f "test-results/previous_test_results_${{ env.JOB_TYPE }}.txt" ]; then
          if diff test-results/previous_test_results_${{ env.JOB_TYPE }}.txt current_test_results_${{ env.JOB_TYPE }}.txt > /dev/null; then
          echo "No changes in test results."
            echo "TEST_CHANGED=false" >> $GITHUB_ENV
        else
          echo "Changes detected in test results."
            echo "TEST_CHANGED=true" >> $GITHUB_ENV
          fi
        else
          echo "No previous test results found. Proceeding with report generation."
          echo "TEST_CHANGED=true" >> $GITHUB_ENV
        fi
      continue-on-error: true

    - name: Update Test Results in test-results Branch
      if: always()
      run: |
        cp current_test_results_${{ env.JOB_TYPE }}.txt test-results/previous_test_results_${{ env.JOB_TYPE }}.txt
        cd test-results
        git add previous_test_results_${{ env.JOB_TYPE }}.txt
        git commit -m "Update test results for ${{ env.JOB_TYPE }}" || echo "No changes to commit."
        git push origin test-results
        cd ..

    # Run test report generation steps always
    - name: Run JUnit Report Generation Script
      continue-on-error: true
      run: |
        python3 scripts/into_junit.py /tmp/SHARED.UNITS ${{ env.TIMESTAMP }} 1 > junit.xml

    - name: Convert JUnit XML to Standard HTML Report
      continue-on-error: true
      run: |
        cat junit.xml
        junit2html junit.xml ${{ env.BASELINE_COMPAT_PATH }}/junit-standard-report.html

    - name: Convert JUnit XML to Matrix HTML Report
      continue-on-error: true
      run: |
        junit2html --report-matrix ${{ env.BASELINE_COMPAT_PATH }}/junit-matrix-report.html junit.xml

    - name: Upload JUnit XML Report
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: junit-report
        path: junit.xml

    - name: Upload Standard HTML Report
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: junit-standard-html-report
        path: ${{ env.BASELINE_COMPAT_PATH }}/junit-standard-report.html

    - name: Upload Matrix HTML Report
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: junit-matrix-html-report
        path: ${{ env.BASELINE_COMPAT_PATH }}/junit-matrix-report.html

    - name: Upload Test Output Log Files
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: test-output-logs
        path: ${{ env.BASELINE_COMPAT_PATH }}

    - name: Display JUnit Test Results
      if: github.event_name == 'push'  # Only run this step on pushes to main
      uses: dorny/test-reporter@v1
      with:
        name: 'JUnit Results'
        path: 'junit.xml'
        reporter: 'java-junit'
        fail-on-error: false

    - name: Provide Report Links
      run: |
        echo "JUnit reports are available as artifacts."

    - name: Generate environment.properties
      run: |
        python scripts/generate_allure_environment.py ${{ github.sha }} ${{ github.ref_name }} > environment.properties

    - name: Upload environment.properties
      uses: actions/upload-artifact@v4
      with:
        name: environment
        path: environment.properties

    # Generate Allure Report
    - name: Generate Allure Report
      if: env.TEST_CHANGED == 'true'
      run: |
        # Install Allure if not already installed
        sudo apt-get update
        sudo apt-get install -y default-jre
        curl -sSL https://github.com/allure-framework/allure2/releases/download/2.18.1/allure-2.18.1.tgz | sudo tar -zx -C /opt/
        sudo ln -s /opt/allure-2.18.1/bin/allure /usr/bin/allure

        # Create build/allure-results directory
        mkdir -p build/allure-results

        # Copy JUnit XML report to allure results
        cp junit.xml build/allure-results/

        # Copy environment.properties to allure results
        cp environment.properties build/allure-results/

        # Copy previous allure history if it exists
        if [ -d "test-results/allure-history/${{ env.JOB_TYPE }}/history" ]; then
          mkdir -p build/allure-results/history
          cp -r test-results/allure-history/${{ env.JOB_TYPE }}/history/* build/allure-results/history/
        fi

        # Generate Allure report
        allure generate build/allure-results -o allure-report --clean

        # Prepare allure-history directory for deployment
        mkdir -p test-results/allure-history/${{ env.JOB_TYPE }}
        cp -r allure-report/* test-results/allure-history/${{ env.JOB_TYPE }}/

        # Copy new history back for future runs
        cp -r allure-report/history test-results/allure-history/${{ env.JOB_TYPE }}/

    - name: Copy JUnit HTML Reports to Allure History Directory
      if: env.TEST_CHANGED == 'true'
      run: |
        # Copy JUnit HTML reports to the allure-history directory
        mkdir -p test-results/allure-history/${{ env.BASELINE_COMPAT_PATH }}
        cp -f ${{ env.BASELINE_COMPAT_PATH }}/junit-standard-report.html test-results/allure-history/${{ env.BASELINE_COMPAT_PATH }}/
        cp -f ${{ env.BASELINE_COMPAT_PATH }}/junit-matrix-report.html test-results/allure-history/${{ env.BASELINE_COMPAT_PATH }}/

    - name: Copy Help Docs to Allure History Directory
      if: env.TEST_CHANGED == 'true'
      run: |
        mkdir -p test-results/allure-history/help-docs/
        cp -r ./docs/* test-results/allure-history/help-docs/
        
    - name: Generate Root Index for Allure History
      if: env.TEST_CHANGED == 'true'
      run: |
        echo "<html>" > test-results/allure-history/index.html
        echo "<head><title>Project Reports and Documentation</title></head>" >> test-results/allure-history/index.html
        echo "<body>" >> test-results/allure-history/index.html
        echo "<h1>Project Reports and Documentation</h1>" >> test-results/allure-history/index.html
        echo "<ul>" >> test-results/allure-history/index.html
        echo "<li><a href='./ci/'>Allure CI Reports</a></li>" >> test-results/allure-history/index.html
        echo "<li><a href='./nightly/'>Allure Nightly Reports</a></li>" >> test-results/allure-history/index.html
        echo "<li><a href='./${{ env.BASELINE_COMPAT_PATH }}/junit-standard-report.html'>JUnit Standard Report</a></li>" >> test-results/allure-history/index.html
        echo "<li><a href='./${{ env.BASELINE_COMPAT_PATH }}/junit-matrix-report.html'>JUnit Matrix Report</a></li>" >> test-results/allure-history/index.html
        # echo "<li><a href='./help-docs/'>Help Documentation</a></li>" >> test-results/allure-history/index.html
        echo "</ul>" >> test-results/allure-history/index.html
        echo "</body>" >> test-results/allure-history/index.html
        echo "</html>" >> test-results/allure-history/index.html

    # Commit and Push Allure History to test-results Branch
    - name: Commit and Push Allure History to test-results Branch
      if: env.TEST_CHANGED == 'true'
      run: |
        cd test-results
        git add allure-history
        git commit -m "Update Allure history for ${{ env.JOB_TYPE }}" || echo "No changes to commit."
        git push origin test-results
        cd ..
        
    # Deploy to GitHub Pages using the gh-pages branch
    - name: Deploy Allure reports, JUnit HTML reports, and help docs to GitHub Pages
      if: env.TEST_CHANGED == 'true'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: test-results/allure-history
        personal_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: test-results
        
    - name: Auto-Approve the Pull Request
      if: github.event_name == 'pull_request_target'
      uses: hmarr/auto-approve-action@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
