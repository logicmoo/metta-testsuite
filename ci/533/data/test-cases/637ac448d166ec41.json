{"uid":"637ac448d166ec41","name":"BCHAIN-COMP.06","historyId":"ANTI-REGRESSION:ANTI-REGRESSION#BCHAIN-COMP.06","time":{"start":1732247058000,"stop":1732247059037,"duration":1037},"status":"failed","statusMessage":"Test failed: Expected '((: ((rule (rule1 axiom)) CPU) (less 2 3)))' but got '((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)'","statusTrace":"AssertionError: Test failed: Expected '((: ((rule (rule1 axiom)) CPU) (less 2 3)))' but got '((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)'","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"<![CDATA[","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"<a href=\"https://trueagi-io.github.io/metta-wam/reports/tests_output/baseline-compat/tests/baseline_compat/anti-regression/bchain_comp.metta.4_failed.html#ANTI-REGRESSION.BCHAIN-COMP.06\">Test Report</a>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Assertion: (assertEqualToResult (bc (: $prf (less $x $y)) (S (S (S Z)))))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Expected: ((: ((rule (rule1 axiom)) CPU) (less 2 3)))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Actual: ((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"]]>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"ANTI-REGRESSION"},{"name":"testClass","value":"ANTI-REGRESSION"},{"name":"package","value":"ANTI-REGRESSION"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":58,"unknown":0,"total":60},"items":[{"uid":"a95b55df3d23f9fa","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/531//#testresult/a95b55df3d23f9fa","status":"failed","statusDetails":"Test failed: Expected '((: ((rule (rule1 axiom)) CPU) (less 2 3)))' but got '((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)'","time":{"start":1732236094000,"stop":1732236095041,"duration":1041}},{"uid":"f92acd58e4328857","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/530//#testresult/f92acd58e4328857","status":"passed","time":{"start":1732173223000,"stop":1732173223024,"duration":24}},{"uid":"cd5a5b37fb767fc7","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/529//#testresult/cd5a5b37fb767fc7","status":"passed","time":{"start":1732172565000,"stop":1732172565031,"duration":31}},{"uid":"203f08e71afd0de1","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/528//#testresult/203f08e71afd0de1","status":"passed","time":{"start":1732168656000,"stop":1732168656036,"duration":36}},{"uid":"aadc1c7f4b9f8bc","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/527//#testresult/aadc1c7f4b9f8bc","status":"passed","time":{"start":1732168005000,"stop":1732168005036,"duration":36}},{"uid":"d690d811cffd9573","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/525//#testresult/d690d811cffd9573","status":"passed","time":{"start":1732167007000,"stop":1732167007037,"duration":37}},{"uid":"4b097228da941a01","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/526//#testresult/4b097228da941a01","status":"passed","time":{"start":1732167332000,"stop":1732167332035,"duration":35}},{"uid":"243ba6e93e35df1f","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/524//#testresult/243ba6e93e35df1f","status":"passed","time":{"start":1732166853000,"stop":1732166853046,"duration":46}},{"uid":"c7f5a126a5e5bb53","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/523//#testresult/c7f5a126a5e5bb53","status":"passed","time":{"start":1732165533000,"stop":1732165533037,"duration":37}},{"uid":"ba8ad5c5b5fbdc23","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/522//#testresult/ba8ad5c5b5fbdc23","status":"passed","time":{"start":1732160925000,"stop":1732160925035,"duration":35}},{"uid":"34bebe45c7aa7f00","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/519//#testresult/34bebe45c7aa7f00","status":"passed","time":{"start":1732136842000,"stop":1732136842033,"duration":33}},{"uid":"685df1827276b052","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/518//#testresult/685df1827276b052","status":"passed","time":{"start":1732108964000,"stop":1732108964037,"duration":37}},{"uid":"e6b96c3f79ec7c44","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/517//#testresult/e6b96c3f79ec7c44","status":"passed","time":{"start":1732105781000,"stop":1732105781036,"duration":36}},{"uid":"9b91a7e1f28ba7ef","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/516//#testresult/9b91a7e1f28ba7ef","status":"passed","time":{"start":1732104890000,"stop":1732104890023,"duration":23}},{"uid":"be90839fde7e8461","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/515//#testresult/be90839fde7e8461","status":"passed","time":{"start":1732104511000,"stop":1732104511043,"duration":43}},{"uid":"9aa9df3879439011","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/514//#testresult/9aa9df3879439011","status":"passed","time":{"start":1732103732000,"stop":1732103732027,"duration":27}},{"uid":"9c024914c74d2ef3","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/512//#testresult/9c024914c74d2ef3","status":"passed","time":{"start":1732042317000,"stop":1732042317045,"duration":45}},{"uid":"adfd0fe502f2b573","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/510//#testresult/adfd0fe502f2b573","status":"passed","time":{"start":1731993899000,"stop":1731993899037,"duration":37}},{"uid":"82b68add33abb55c","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/511//#testresult/82b68add33abb55c","status":"passed","time":{"start":1731993915000,"stop":1731993915038,"duration":38}},{"uid":"d7e6328f33287558","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/509//#testresult/d7e6328f33287558","status":"passed","time":{"start":1731993795000,"stop":1731993795030,"duration":30}}]},"tags":[]},"source":"637ac448d166ec41.json","parameterValues":[]}