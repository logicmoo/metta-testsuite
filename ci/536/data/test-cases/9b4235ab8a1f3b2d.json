{"uid":"9b4235ab8a1f3b2d","name":"BCHAIN.06","historyId":"ANTI-REGRESSION:ANTI-REGRESSION#BCHAIN.06","time":{"start":1732307129000,"stop":1732307130233,"duration":1233},"status":"failed","statusMessage":"Test failed: Expected '((: ((rule (rule1 axiom)) CPU) (less 2 3)))' but got '((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)'","statusTrace":"AssertionError: Test failed: Expected '((: ((rule (rule1 axiom)) CPU) (less 2 3)))' but got '((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)'","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"steps":[{"name":"<![CDATA[","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"<a href=\"https://trueagi-io.github.io/metta-wam/reports/tests_output/baseline-compat/tests/baseline_compat/anti-regression/bchain.metta.1_failed.html#ANTI-REGRESSION.BCHAIN.06\">Test Report</a>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Assertion: (assertEqualToResult (bc (: $prf (less $x $y)) (S (S (S Z)))))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Expected: ((: ((rule (rule1 axiom)) CPU) (less 2 3)))","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Actual: ((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"]]>","time":{},"steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":7,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"resultFormat","value":"junit"},{"name":"suite","value":"ANTI-REGRESSION"},{"name":"testClass","value":"ANTI-REGRESSION"},{"name":"package","value":"ANTI-REGRESSION"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":58,"unknown":0,"total":63},"items":[{"uid":"dc447dfb24bfd409","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/535//#testresult/dc447dfb24bfd409","status":"failed","statusDetails":"Test failed: Expected '((: ((rule (rule1 axiom)) CPU) (less 2 3)))' but got '((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)'","time":{"start":1732301769000,"stop":1732301770294,"duration":1294}},{"uid":"344a9e776042007","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/534//#testresult/344a9e776042007","status":"failed","statusDetails":"Test failed: Expected '((: ((rule (rule1 axiom)) CPU) (less 2 3)))' but got '((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)'","time":{"start":1732287274000,"stop":1732287275265,"duration":1265}},{"uid":"5a241d4eb6dabcaa","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/533//#testresult/5a241d4eb6dabcaa","status":"failed","statusDetails":"Test failed: Expected '((: ((rule (rule1 axiom)) CPU) (less 2 3)))' but got '((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)'","time":{"start":1732247058000,"stop":1732247059300,"duration":1300}},{"uid":"e684f911e8bc1b63","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/531//#testresult/e684f911e8bc1b63","status":"failed","statusDetails":"Test failed: Expected '((: ((rule (rule1 axiom)) CPU) (less 2 3)))' but got '((: ((rule (rule1 axiom)) CPU) (less 2 3)) (: ((rule (rule1 axiom)) (return CPU)) (less 2 3)) (: ((rule (rule1 axiom)) (return (return CPU))) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: ((rule (rule1 axiom)) ((return return) (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) CPU) (less 2 3)) (: (((return rule) (rule1 axiom)) (return CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) (return (return CPU))) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) CPU)) (less 2 3)) (: (((return rule) (rule1 axiom)) ((return return) (return CPU))) (l...(10)'","time":{"start":1732236094000,"stop":1732236095273,"duration":1273}},{"uid":"2d0857f47ae30ebc","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/530//#testresult/2d0857f47ae30ebc","status":"passed","time":{"start":1732173223000,"stop":1732173223004,"duration":4}},{"uid":"b4e3d48a4cc41493","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/529//#testresult/b4e3d48a4cc41493","status":"passed","time":{"start":1732172565000,"stop":1732172565003,"duration":3}},{"uid":"20fcabff445f41aa","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/528//#testresult/20fcabff445f41aa","status":"passed","time":{"start":1732168656000,"stop":1732168656003,"duration":3}},{"uid":"d70178ffa5cc570e","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/527//#testresult/d70178ffa5cc570e","status":"passed","time":{"start":1732168005000,"stop":1732168005002,"duration":2}},{"uid":"bb8790d888b06c5d","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/525//#testresult/bb8790d888b06c5d","status":"passed","time":{"start":1732167007000,"stop":1732167007003,"duration":3}},{"uid":"66780003901954fc","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/526//#testresult/66780003901954fc","status":"passed","time":{"start":1732167332000,"stop":1732167332003,"duration":3}},{"uid":"688ddc58cb0c1540","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/524//#testresult/688ddc58cb0c1540","status":"passed","time":{"start":1732166853000,"stop":1732166853003,"duration":3}},{"uid":"9805712ad0c8b118","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/523//#testresult/9805712ad0c8b118","status":"passed","time":{"start":1732165533000,"stop":1732165533004,"duration":4}},{"uid":"ccb22db2596e1941","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/522//#testresult/ccb22db2596e1941","status":"passed","time":{"start":1732160925000,"stop":1732160925003,"duration":3}},{"uid":"e7df1dd7747635dd","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/519//#testresult/e7df1dd7747635dd","status":"passed","time":{"start":1732136842000,"stop":1732136842002,"duration":2}},{"uid":"cf7382cf3b4a9886","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/518//#testresult/cf7382cf3b4a9886","status":"passed","time":{"start":1732108964000,"stop":1732108964002,"duration":2}},{"uid":"8562c71f6abcf103","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/517//#testresult/8562c71f6abcf103","status":"passed","time":{"start":1732105781000,"stop":1732105781002,"duration":2}},{"uid":"9a7d302b90967150","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/516//#testresult/9a7d302b90967150","status":"passed","time":{"start":1732104890000,"stop":1732104890003,"duration":3}},{"uid":"6e74d3e0c8505e5f","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/515//#testresult/6e74d3e0c8505e5f","status":"passed","time":{"start":1732104511000,"stop":1732104511003,"duration":3}},{"uid":"7eaae236e91bb545","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/514//#testresult/7eaae236e91bb545","status":"passed","time":{"start":1732103732000,"stop":1732103732003,"duration":3}},{"uid":"e15c2d0947ca8640","reportUrl":"https://trueagi-io.github.io/metta-wam/ci/512//#testresult/e15c2d0947ca8640","status":"passed","time":{"start":1732042317000,"stop":1732042317004,"duration":4}}]},"tags":[]},"source":"9b4235ab8a1f3b2d.json","parameterValues":[]}