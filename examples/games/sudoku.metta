(sudoku_board 1 1 1 1  )
(sudoku_board 1 2 1 2  )
(sudoku_board 1 3 1 3  )
(sudoku_board 1 4 2 1  )
(sudoku_board 1 5 2 2  )
(sudoku_board 1 6 2 3  )
(sudoku_board 1 7 3 1  )
(sudoku_board 1 8 3 2  )
(sudoku_board 1 9 3 3  )
(sudoku_board 2 1 1 4  )
(sudoku_board 2 2 1 5  )
(sudoku_board 2 3 1 6  )
(sudoku_board 2 4 2 4  )
(sudoku_board 2 5 2 5  )
(sudoku_board 2 6 2 6  )
(sudoku_board 2 7 3 4  )
(sudoku_board 2 8 3 5  )
(sudoku_board 2 9 3 6  )
(sudoku_board 3 1 1 7  )
(sudoku_board 3 2 1 8  )
(sudoku_board 3 3 1 9  )
(sudoku_board 3 4 2 7  )
(sudoku_board 3 5 2 8  )
(sudoku_board 3 6 2 9  )
(sudoku_board 3 7 3 7  )
(sudoku_board 3 8 3 8  )
(sudoku_board 3 9 3 9  )
(sudoku_board 4 1 4 1  )
(sudoku_board 4 2 4 2  )
(sudoku_board 4 3 4 3  )
(sudoku_board 4 4 5 1  )
(sudoku_board 4 5 5 2  )
(sudoku_board 4 6 5 3  )
(sudoku_board 4 7 6 1  )
(sudoku_board 4 8 6 2  )
(sudoku_board 4 9 6 3  )
(sudoku_board 5 1 4 4  )
(sudoku_board 5 2 4 5  )
(sudoku_board 5 3 4 6  )
(sudoku_board 5 4 5 4  )
(sudoku_board 5 5 5 5  )
(sudoku_board 5 6 5 6  )
(sudoku_board 5 7 6 4  )
(sudoku_board 5 8 6 5  )
(sudoku_board 5 9 6 6  )
(sudoku_board 6 1 4 7  )
(sudoku_board 6 2 4 8  )
(sudoku_board 6 3 4 9  )
(sudoku_board 6 4 5 7  )
(sudoku_board 6 5 5 8  )
(sudoku_board 6 6 5 9  )
(sudoku_board 6 7 6 7  )
(sudoku_board 6 8 6 8  )
(sudoku_board 6 9 6 9  )
(sudoku_board 7 1 7 1  )
(sudoku_board 7 2 7 2  )
(sudoku_board 7 3 7 3  )
(sudoku_board 7 4 8 1  )
(sudoku_board 7 5 8 2  )
(sudoku_board 7 6 8 3  )
(sudoku_board 7 7 9 1  )
(sudoku_board 7 8 9 2  )
(sudoku_board 7 9 9 3  )
(sudoku_board 8 1 7 4  )
(sudoku_board 8 2 7 5  )
(sudoku_board 8 3 7 6  )
(sudoku_board 8 4 8 4  )
(sudoku_board 8 5 8 5  )
(sudoku_board 8 6 8 6  )
(sudoku_board 8 7 9 4  )
(sudoku_board 8 8 9 5  )
(sudoku_board 8 9 9 6  )
(sudoku_board 9 1 7 7  )
(sudoku_board 9 2 7 8  )
(sudoku_board 9 3 7 9  )
(sudoku_board 9 4 8 7  )
(sudoku_board 9 5 8 8  )
(sudoku_board 9 6 8 9  )
(sudoku_board 9 7 9 7  )
(sudoku_board 9 8 9 8  )
(sudoku_board 9 9 9 9  )
(sudoku_puzzle_state 1 1 5  )
(sudoku_puzzle_state 1 2 3  )
(sudoku_puzzle_state 1 3 0  )
(sudoku_puzzle_state 1 4 0  )
(sudoku_puzzle_state 1 5 7  )
(sudoku_puzzle_state 1 6 0  )
(sudoku_puzzle_state 1 7 0  )
(sudoku_puzzle_state 1 8 0  )
(sudoku_puzzle_state 1 9 0  )
(sudoku_puzzle_state 2 1 6  )
(sudoku_puzzle_state 2 2 0  )
(sudoku_puzzle_state 2 3 0  )
(sudoku_puzzle_state 2 4 1  )
(sudoku_puzzle_state 2 5 9  )
(sudoku_puzzle_state 2 6 5  )
(sudoku_puzzle_state 2 7 0  )
(sudoku_puzzle_state 2 8 0  )
(sudoku_puzzle_state 2 9 0  )
(sudoku_puzzle_state 3 1 0  )
(sudoku_puzzle_state 3 2 9  )
(sudoku_puzzle_state 3 3 8  )
(sudoku_puzzle_state 3 4 0  )
(sudoku_puzzle_state 3 5 0  )
(sudoku_puzzle_state 3 6 0  )
(sudoku_puzzle_state 3 7 0  )
(sudoku_puzzle_state 3 8 6  )
(sudoku_puzzle_state 3 9 0  )
(sudoku_puzzle_state 4 1 8  )
(sudoku_puzzle_state 4 2 0  )
(sudoku_puzzle_state 4 3 0  )
(sudoku_puzzle_state 4 4 0  )
(sudoku_puzzle_state 4 5 6  )
(sudoku_puzzle_state 4 6 0  )
(sudoku_puzzle_state 4 7 0  )
(sudoku_puzzle_state 4 8 0  )
(sudoku_puzzle_state 4 9 3  )
(sudoku_puzzle_state 5 1 4  )
(sudoku_puzzle_state 5 2 0  )
(sudoku_puzzle_state 5 3 0  )
(sudoku_puzzle_state 5 4 8  )
(sudoku_puzzle_state 5 5 0  )
(sudoku_puzzle_state 5 6 3  )
(sudoku_puzzle_state 5 7 0  )
(sudoku_puzzle_state 5 8 0  )
(sudoku_puzzle_state 5 9 1  )
(sudoku_puzzle_state 6 1 7  )
(sudoku_puzzle_state 6 2 0  )
(sudoku_puzzle_state 6 3 0  )
(sudoku_puzzle_state 6 4 0  )
(sudoku_puzzle_state 6 5 2  )
(sudoku_puzzle_state 6 6 0  )
(sudoku_puzzle_state 6 7 0  )
(sudoku_puzzle_state 6 8 0  )
(sudoku_puzzle_state 6 9 6  )
(sudoku_puzzle_state 7 1 0  )
(sudoku_puzzle_state 7 2 6  )
(sudoku_puzzle_state 7 3 0  )
(sudoku_puzzle_state 7 4 0  )
(sudoku_puzzle_state 7 5 0  )
(sudoku_puzzle_state 7 6 0  )
(sudoku_puzzle_state 7 7 2  )
(sudoku_puzzle_state 7 8 8  )
(sudoku_puzzle_state 7 9 0  )
(sudoku_puzzle_state 8 1 0  )
(sudoku_puzzle_state 8 2 0  )
(sudoku_puzzle_state 8 3 0  )
(sudoku_puzzle_state 8 4 4  )
(sudoku_puzzle_state 8 5 1  )
(sudoku_puzzle_state 8 6 9  )
(sudoku_puzzle_state 8 7 0  )
(sudoku_puzzle_state 8 8 0  )
(sudoku_puzzle_state 8 9 5  )
(sudoku_puzzle_state 9 1 0  )
(sudoku_puzzle_state 9 2 0  )
(sudoku_puzzle_state 9 3 0  )
(sudoku_puzzle_state 9 4 0  )
(sudoku_puzzle_state 9 5 8  )
(sudoku_puzzle_state 9 6 0  )
(sudoku_puzzle_state 9 7 0  )
(sudoku_puzzle_state 9 8 7  )
(sudoku_puzzle_state 9 9 9  )
(row 1 )
(row 2 )
(row 3 )
(row 4 )
(row 5 )
(row 6 )
(row 7 )
(row 8 )
(row 9 )
(column 1 )
(column 2 )
(column 3 )
(column 4 )
(column 5 )
(column 6 )
(column 7 )
(column 8 )
(column 9 )
(quad 1 )
(quad 2 )
(quad 3 )
(quad 4 )
(quad 5 )
(quad 6 )
(quad 7 )
(quad 8 )
(quad 9 )
(sudoku_number 1 )
(sudoku_number 2 )
(sudoku_number 3 )
(sudoku_number 4 )
(sudoku_number 5 )
(sudoku_number 6 )
(sudoku_number 7 )
(sudoku_number 8 )
(sudoku_number 9 )

(tempnum 1)
(tempnum 2)
(tempnum 3)

(xcount 0)

(= (get_remaining_possible_candidates )   
     (   match &self   (sudoku_number $num   )     (
      (if (== (exist_temp_num $num) False )
        $num 
       (empty)    )  

;   ($num)
      )       
       )  
  )



(= (add_xnum (cell_xstate $r $c $sta ) )  (add-atom &self (tempnum $sta) )  )


;(: map-expr (-> (-> $t $t) Expression Expression))

(= (add_temp_nums $expr)
   (if (== $expr ()) ()
       (let* (($head (car-atom $expr))
              ($tail (cdr-atom $expr))
;              ($head-new ($f $head))
              ($head-new (add_xnum $head))
              ($tail-new (add_temp_nums $tail))
             )
         (cons-atom $head-new $tail-new)
       )
   )
)

;(= (check_cells $expr)
;   (if (== $expr ()) ()
;       (let* (($head (car-atom $expr))
;              ($tail (cdr-atom $expr))
;              ($head-new (check_cell $head))
;              ($tail-new (check_cells $tail))
;             )
;         (cons-atom $head-new $tail-new)
;       )
;   )
;)



(= (set_connected_cell_values  $row $col ) 
 (        
  (add_temp_nums (get_column_stateyz $row $col ) ) 
  (add_temp_nums (get_row_stateyz $row $col )  ) 
  (add_temp_nums (get_quad_stateyz (sudoku_quad_num $row $col ) ) ) 
              )
         )


(= (process_list $expr)
   (if (== $expr ()) ()
       (let* (($head (car-atom $expr))
              ($tail (cdr-atom $expr))
;              ($head-new ($f $head))
              ($head-new (increment_count))

              ($tail-new (process_list $tail))
             )
        (
             (cons-atom $head-new $tail-new)
;    (println "jfjfjfj")
             )
       )
   )
)



(= (length_list $expr)
   (let* 
    ( ($g init_count)
      ($ty (process_list $expr)   ) 
      
    )
; True
  ()
 ;  (get_count )
    )

  )

; (xcount 0)
(= (get_count )  (match &self (xcount $co)    $co    )   )
;(= (get_count )  ( get-state xcount )  )   

(= (init_count )   ( 
 (let*  (
      ($was (get_count ) )
      ($we  (remove-atom &self (xcount $was)) )
      ($re (add-atom &self (xcount 0 ))   )
;       (change-state &self (xcount 0 )   )
     )
     True 
  )  ) )

;(= (increment $atom) (change-state! $atom (+ 1 (get-state $atom))))
; (get-state (xcount $was))
(= (increment_count )   ( 
 (let*  (
      ($was (get_count ) )
      ($we  (remove-atom &self (xcount $was)) )
      ($cx  (+ $was 1) )
      ($re (add-atom &self (xcount $cx ))   )
;      ($re (change-state &self (xcount $cx ))   )
     )
     $cx 
  )  ) )



(= (update_cell_state $row $column $state)   ( 
 (let*  (
  	 	($was (get_cell_state $row $column) )
    	($we  (remove-atom &self (sudoku_puzzle_state $row $column $was)) )
      ($re (add-atom &self (sudoku_puzzle_state $row $column  $state  ))   )
 ;      ($was (change-state (sudoku_puzzle_state $row $column $state) ) )
     )
     True 
	)  ) )

  





;(= (get_cell_state $row $column)    (match &self (sudoku_puzzle_state $row $column $state)    $state    )   )
;(= (get_row_state $row)   (collapse (match &self  (sudoku_puzzle_state $row $num $state)    $state    )  ) )
;(= (get_row_statex $row)  (collapse (match &self (, (column $w) (sudoku_puzzle_row_state $row $w $state)  )    $state    )  ) )
;(= (get_row_statey $row)   (collapse (match &self  (sudoku_puzzle_state $row $colx $state)    (cell_xstate $row $colx $state)    )  ) )

(= (get_temp_nums)   (match &self   ( tempnum $num  )      ($num    )          )  )

(= (remove_temp_nums)   (match &self   ( tempnum $num  )   (remove-atom &self (tempnum $num )  )    )  )

(= (exist_temp_num $num)   
        (let $m (collapse (match &self (tempnum $num) True))
        (if (== $m ())
            False
            True
        )
    )
             )


(= (get_column_stateyz $rowx $colx)   
     (match &self   ( sudoku_puzzle_state $row $colx $state  )     (
      (if (> $state 0)
       (cell_xstate $row $colx $state)
       (empty)
    )  )     )  
  )

; probably collapse add 
(= (sudoku_quad_num $rowx $colx)   
       (match &self   ( sudoku_board $rowx $colx $quadn $nothing  )     
      $quadn           )          )


(= (get_quad_stateyz $quadn)   
     (match &self   ( sudoku_puzzle_state $row $colx $state  )     (
      (if (and (> $state 0) (== (sudoku_quad_num $row $colx) $quadn ) )
       (cell_xstate $row $colx $state)
       (empty)
    )  )     )  
  )


(= (get_row_stateyz $row $xcol)   
     (match &self   ( sudoku_puzzle_state $row $colx $state  )     (
      (if (> $state 0)
       (cell_xstate $row $colx $state)
       (empty)
    )  )     )  
	)




;!(set_connected_cell_values  2 9 ) 
;!(get_temp_nums)
;!(get_remaining_possible_candidates)
;!(length_list (get_remaining_possible_candidates ))

 ;(let*  (
 ;  ($e  (set_connected_cell_values  $r $c )  )
  ;    ($re (length_list (get_remaining_possible_candidates ) )   )
  ;   )
  ;   True 
  ; )


(= (count_list $x)
   (if (== $x ())
     0
     (+ (count_list (cdr-atom $x)) 1)))






(= (check_cell $r $c $sta )  
(let*  ( 
    ( $ty (remove_temp_nums) )
 ($ze (set_connected_cell_values  $r $c ) )
   
    )
  True
    )
  )




;!(process_list (get_remaining_possible_candidates ))
;!(size-atom (collapse (get_remaining_possible_candidates ) ) )  
; !(increment_count )
;!(exist_temp_num 4) 



!(update_cell_state 2 1 7)

;!(get_remaining_possible_candidates)
;!(get_temp_nums)


; OR THIS



;!(println "REMAINING candidates test for 0 0 ")
; !(remove_temp_nums) 
;!(check_cell 2 9 0  )
;!(length_list (get_remaining_possible_candidates )) 
;!(get_count)

!(get_quad_stateyz 5)
!(get_column_stateyz 5 6 )  
!(get_row_stateyz 5 6 )   


;OR THIS  LASTTT
;!(println "REMAINING candidates test for 2 9 ")
;!(remove_temp_nums)
;!(set_connected_cell_values  2 9 ) 
;!(get_temp_nums)
;!(length_list (get_remaining_possible_candidates ))
;!(println "get count1")
;!(get_count)


;!(get_temp_nums)
;!(get_remaining_possible_candidates)
;!($lex (get_remaining_possible_candidates ) )
;!(length_list  (collapse  $lex )  )



;!(length_list  $we   )
;!(count_list ( $we )  )

;!(let* ( ($we get_remaining_possible_candidates  )  ) (  $we  ) )   
;!(print $we )


;!(println "REMAINING candidates test for 3 4 ")
;!(init_count)
;!(remove_temp_nums)
;!(set_connected_cell_values  3 4 ) 
;!(get_temp_nums)
;!(get_remaining_possible_candidates)
;!(length_list (get_remaining_possible_candidates ))
;!(println "get count2")
;!(get_count)

;!(change-state &self (xcount 0 )   )

;!(try_cell_value (take_action_from_action_stack) )
;!(if_violation_backtrack_else_continue)

;!(println "count ")
;!(countlist (get_remaining_possible_candidates ))
   

; !(get_count)

;!(process_list (get_row_statey 2 ))
;!(println "xx 46-2 ")

;!(zipx (vx A (vx B ())) (vx 1 (vx 2 ())) ) 
;!(println "xx 47 ")
;!(zipy (vp A B C) (vu 1 2 3))  

;!(assertEqualToResult ( get_row_state 2 )  ( 4 4 4 )  ) 
;!(collapse  (  match &self (sudoku_puzzle_state $row 1 $state)    $state   ) )
