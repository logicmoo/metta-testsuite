eval_tag(rust,1031,"register-module!",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"register-module!\"), move |_| { register_module_op.clone() });",0)
eval_tag(rust,1033,"git-module!",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"git-module!\"), move |_| { git_module_op.clone() });",0)
eval_tag(rust,1767,"match",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"match\"), move |_| { match_op.clone() });",0)
eval_tag(rust,1769,"bind!",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"bind!\"), move |_| { bind_op.clone() });",0)
eval_tag(rust,1771,"new-space",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"new-space\"), move |_| { new_space_op.clone() });",0)
eval_tag(rust,1773,"add-atom",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"add-atom\"), move |_| { add_atom_op.clone() });",0)
eval_tag(rust,1775,"remove-atom",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"remove-atom\"), move |_| { remove_atom_op.clone() });",0)
eval_tag(rust,1777,"get-atoms",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-atoms\"), move |_| { get_atoms_op.clone() });",0)
eval_tag(rust,1779,"car-atom",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"car-atom\"), move |_| { car_atom_op.clone() });",0)
eval_tag(rust,1781,"cdr-atom",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"cdr-atom\"), move |_| { cdr_atom_op.clone() });",0)
eval_tag(rust,1783,"cons-atom",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"cons-atom\"), move |_| { cons_atom_op.clone() });",0)
eval_tag(rust,1785,"println!",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"println!\"), move |_| { println_op.clone() });",0)
eval_tag(rust,1787,"format-args",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"format-args\"), move |_| { format_args_op.clone() });",0)
eval_tag(rust,1789,"trace!",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"trace!\"), move |_| { trace_op.clone() });",0)
eval_tag(rust,1795,"let*",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"let\\*\"), move |_| { let_var_op.clone() });",0)
eval_tag(rust,1797,"new-state",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"new-state\"), move |_| { new_state_op.clone() });",0)
eval_tag(rust,1799,"change-state!",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"change-state!\"), move |_| { change_state_op.clone() });",0)
eval_tag(rust,1801,"get-state",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-state\"), move |_| { get_state_op.clone() });",0)
eval_tag(rust,1803,"get-metatype",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-metatype\"), move |_| { get_meta_type_op.clone() });",0)
eval_tag(rust,1805,"mod-space!",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"mod-space!\"), move |_| { mod_space_op.clone() });",0)
eval_tag(rust,1807,"print-mods!",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"print-mods!\"), move |_| { print_mods_op.clone() });",0)
eval_tag(rust,1809,"sealed",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"sealed\"), move |_| { sealed_op.clone() });",0)
eval_tag(rust,1821,"capture",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"capture\"), move |_| { capture_op.clone() });",0)
eval_tag(rust,1823,"case",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"case\"), move |_| { case_op.clone() });",0)
eval_tag(rust,1829,"collapse",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"collapse\"), move |_| { collapse_op.clone() });",0)
eval_tag(rust,1833,"unique",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"unique\"), move |_| { unique_op.clone() });",0)
eval_tag(rust,1835,"union",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"union\"), move |_| { union_op.clone() });",0)
eval_tag(rust,1837,"intersection",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"intersection\"), move |_| { intersection_op.clone() });",0)
eval_tag(rust,1839,"subtraction",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"subtraction\"), move |_| { subtraction_op.clone() });",0)
eval_tag(rust,1841,"get-type",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-type\"), move |_| { get_type_op.clone() });",0)
eval_tag(rust,1843,"get-type-space",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-type-space\"), move |_| { get_type_space_op.clone() });",0)
eval_tag(rust,1845,"import!",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"import!\"), move |_| { import_op.clone() });",0)
eval_tag(rust,1847,"include",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"include\"), move |_| { include_op.clone() });",0)
eval_tag(rust,1849,"pragma!",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"pragma!\"), move |_| { pragma_op.clone() });",0)
eval_tag(rust,1859,"&self",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"&self\"), move |_| { self_atom.clone() });",0)
eval_tag(rust,1907,"flip",'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"flip\"), move |_| { flip_op.clone() });",0)
eval_tag(pl_tag,328,"echo",'../canary/metta_eval.pl',"eval_20(_,_,_,_,['echo',Value],Value):- !.",1)
eval_tag(pl_tag,329,"coerce",'../canary/metta_eval.pl',"eval_20(=,Type,_,_,['coerce',Type,Value],Result):- !, coerce(Type,Value,Result).",2)
eval_tag(pl_tag,383,"chain",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['chain',Atom,Var|Y],Res):-  !,  eval_args(Eq,_RetType,Depth,Self,Atom,R),",2)
eval_tag(pl_tag,393,"eval-for",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['eval-for',Type,X],Res):- !,",2)
eval_tag(pl_tag,406,"filter-atom",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['filter-atom',List,Var,Pred],Res):- !,",3)
eval_tag(pl_tag,415,"map-atom",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['map-atom',List,V,Eval],Res):- !,",3)
eval_tag(pl_tag,430,"foldl-atom",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['foldl-atom',List,Init,A,B,Eval],Res):- !,",5)
eval_tag(pl_tag,536,"let*",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['let*',[],Body],RetVal):- !, eval_args(Eq,RetType,Depth,Self,Body,RetVal).",1)
eval_tag(pl_tag,554,"rtrace!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['rtrace!',Cond],Res):- !, rtrace(eval_args(Eq,RetType,Depth,Self,Cond,Res)).",1)
eval_tag(pl_tag,555,"no-rtrace!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['no-rtrace!',Cond],Res):- !, quietly(eval_args(Eq,RetType,Depth,Self,Cond,Res)).",1)
eval_tag(pl_tag,556,"trace!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['trace!',A,B],C):- !, % writeln(trace(A)),",2)
eval_tag(pl_tag,561,"trace",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['trace',Cond],Res):- !, with_debug(eval_args,eval_args(Eq,RetType,Depth,Self,Cond,Res)).",1)
eval_tag(pl_tag,562,"profile!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['profile!',Cond],Res):- !, time_eval(profile(Cond),profile(eval_args(Eq,RetType,Depth,Self,Cond,Res))).",1)
eval_tag(pl_tag,563,"time!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['time!',Cond],Res):- !, time_eval(eval_args(Cond),eval_args(Eq,RetType,Depth,Self,Cond,Res)).",1)
eval_tag(pl_tag,564,"print",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['print',Cond],Res):- !, eval_args(Eq,RetType,Depth,Self,Cond,Res),format('~N'),print(Res),format('~N').",1)
eval_tag(pl_tag,736,"sealed",'../canary/metta_eval.pl',"eval_20(_Eq, _RetType, _Depth, _Self, ['sealed', InputVarList, Expr], Result) :- !,",2)
eval_tag(pl_tag,805,"unify",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['unify',Space|Args],Res):- !,",1)
eval_tag(pl_tag,907,"switch",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['switch',A,CL|T],Res):- !,",2)
eval_tag(pl_tag,913,"case",'../canary/metta_eval.pl',"eval_20(Eq,_RetType,Depth,Self,['case',A,[[Void,_]]],Res):-",3)
eval_tag(pl_tag,979,"collapse-bind",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['collapse-bind',List],Res):-!,",1)
eval_tag(pl_tag,989,"superpose-bind",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['superpose-bind',List],Res):- !,",1)
eval_tag(pl_tag,997,"collapse",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['collapse',List],Res):-!,",1)
eval_tag(pl_tag,1017,"sequential",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['sequential',List],Res):- !,",1)
eval_tag(pl_tag,1069,"call!",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType1,_Depth,_Self,['call!',S], TF):- !, eval_call(S,TF).",1)
eval_tag(pl_tag,1070,"call-fn!",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType1,_Depth,_Self,['call-fn!',S], R):- !, eval_call_fn(S,R).",1)
eval_tag(pl_tag,1071,"call-fn-nth!",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType1,_Depth,_Self,['call-fn-nth!',Nth,S], R):-",2)
eval_tag(pl_tag,1093,"decons-atom",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['decons-atom',OneArg],[H,T]):- !, must_unify(OneArg,[H|T]).",1)
eval_tag(pl_tag,1096,"decons",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['decons',OneArg],[H,T]):- !, must_unify(OneArg,[H|T]).",1)
eval_tag(pl_tag,1115,"if-unify",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['if-unify',X,Y,Then,Else],Res):- !,",4)
eval_tag(pl_tag,1122,"if-equal",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['if-equal',X,Y,Then,Else],Res):- !,",4)
eval_tag(pl_tag,1191,"car-atom",'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Dpth,_Slf,['car-atom',Atom],CAR_Y):- !, Atom=[CAR|_],!,do_expander(Eq,RetType,CAR,CAR_Y).",1)
eval_tag(pl_tag,1192,"cdr-atom",'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Dpth,_Slf,['cdr-atom',Atom],CDR_Y):- !, Atom=[_|CDR],!,do_expander(Eq,RetType,CDR,CDR_Y).",1)
eval_tag(pl_tag,1194,"cons",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['Cons', A, B ],['Cons', AA, BB]):- no_cons_reduce, !,",2)
eval_tag(pl_tag,1213,"change-state!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['change-state!',StateExpr, UpdatedValue], Ret):- !,",2)
eval_tag(pl_tag,1217,"new-state",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['new-state',UpdatedValue],StateMonad):- !,",1)
eval_tag(pl_tag,1219,"get-state",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['get-state',StateExpr],Value):- !,",1)
eval_tag(pl_tag,1324,"type-cast",'../canary/metta_eval.pl',"eval_20(Eq,RetCasted,Depth,Self,['type-cast',Val,Into,Self],Casted):-current_self(Self),!,",3)
eval_tag(pl_tag,1343,"get-types",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,Depth,Self,['get-types',Val],TypeO):- !,",1)
eval_tag(pl_tag,1347,"get-type",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['get-type',Val,Self],Type):- current_self(Self), !,",2)
eval_tag(pl_tag,1365,"get-type-space",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['get-type-space',Other,Val],Type):- !,",2)
eval_tag(pl_tag,1369,"length",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['length',L],Res):- !, eval_args(Eq,RetType,Depth,Self,L,LL), !, (is_list(LL)->length(LL,Res);Res=1).",1)
eval_tag(pl_tag,1370,"countelement",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['CountElement',L],Res):- !, eval_args(Eq,RetType,Depth,Self,L,LL), !, (is_list(LL)->length(LL,Res);Res=1).",1)
eval_tag(pl_tag,1372,"get-metatype",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['get-metatype',Val],TypeO):- !,",1)
eval_tag(pl_tag,1397,"stringtochars",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['stringToChars',String],Chars):- !, eval_args(Eq,RetType,Depth,Self,String,SS), string_chars(SS,Chars0), maplist(as_metta_char,Chars0,Chars).",1)
eval_tag(pl_tag,1398,"charstostring",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['charsToString',Chars],String):- !, eval_args(Eq,RetType,Depth,Self,Chars,CC), maplist(as_metta_char,CC0,CC), string_chars(String,CC0).",1)
eval_tag(pl_tag,1437,"format-args",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['format-args',Format,Args],Result):-",2)
eval_tag(pl_tag,1451,"parse",'../canary/metta_eval.pl',"eval_20( Eq, RetType, Depth, Self, [ 'parse' , L ] , Exp ):- !,",1)
eval_tag(pl_tag,1455,"repr",'../canary/metta_eval.pl',"eval_20( _Eq, _RetType, _Depth, _Self, [ 'repr' , L ] , Sxx ):- !,",1)
eval_tag(pl_tag,1459,"output-to-string",'../canary/metta_eval.pl',"eval_20( Eq, RetType, Depth, Self, [ 'output-to-string' , L ] , Sxx ):- !,",1)
eval_tag(pl_tag,1471,"extend-py!",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Dpth,_Slf,['extend-py!',Module],Res):-  !, 'extend-py!'(Module,Res).",1)
eval_tag(pl_tag,1472,"register-module!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['register-module!',Dir],RetVal):- !,",1)
eval_tag(pl_tag,1485,"include!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['include!',Other,File],RetVal):- !,",2)
eval_tag(pl_tag,1489,"include",'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Depth,Self,['include',File],RetVal):- !,",1)
eval_tag(pl_tag,1492,"load-ascii",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['load-ascii',Other,File],RetVal):- !,",2)
eval_tag(pl_tag,1495,"import!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['import!',Other,File],RetVal):- !,",2)
eval_tag(pl_tag,1498,"load-file!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['load-file!',Other,File],RetVal):- !,",2)
eval_tag(pl_tag,1507,"bind!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Depth,_Slf,['bind!',Other,['new-space']],RetVal):- atom(Other),!,",2)
eval_tag(pl_tag,1514,"pragma!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['pragma!',Other,Expr],RetVal):- !,",2)
eval_tag(pl_tag,1518,"transfer!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Dpth,Self,['transfer!',File],RetVal):- !, must_det_ll((include_metta(Self,File),",1)
eval_tag(pl_tag,1522,"save-space!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['save-space!',Other,File],RetVal):- !,",2)
eval_tag(pl_tag,1576,"function",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['function',X],Res):- !, gensym(return_,RetF),",1)
eval_tag(pl_tag,1581,"return",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['return',X],_):- !,",1)
eval_tag(pl_tag,1588,"catch",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['catch',X,EX,Handler],Res):- !,",3)
eval_tag(pl_tag,1591,"throw",'../canary/metta_eval.pl',"eval_20(Eq,_TRetType,Depth,Self,['throw',X],_):- !,",1)
eval_tag(pl_tag,1595,"number-of",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['number-of',X],N):- !,",1)
eval_tag(pl_tag,1603,"findall!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['findall!',Template,X],ResL):- !,",2)
eval_tag(pl_tag,1608,"limit!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['limit!',N,E],R):- !, eval_20(Eq,RetType,Depth,Self,['limit',N,E],R).",2)
eval_tag(pl_tag,1609,"limit",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['limit',NE,E],R):-  !,",2)
eval_tag(pl_tag,1613,"offset!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['offset!',N,E],R):- !, eval_20(Eq,RetType,Depth,Self,['offset',N,E],R).",2)
eval_tag(pl_tag,1614,"offset",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['offset',NE,E],R):-  !,",2)
eval_tag(pl_tag,1618,"max-time!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['max-time!',N,E],R):- !, eval_20(Eq,RetType,Depth,Self,['max-time',N,E],R).",2)
eval_tag(pl_tag,1619,"max-time",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['max-time',NE,E],R):-  !,",2)
eval_tag(pl_tag,1624,"call-cleanup!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['call-cleanup!',NE,E],R):-  !,",2)
eval_tag(pl_tag,1628,"setup-call-cleanup!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['setup-call-cleanup!',S,NE,E],R):-  !,",3)
eval_tag(pl_tag,1634,"with-output-to!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['with-output-to!',S,NE],R):-  !,",2)
eval_tag(pl_tag,1701,"maplist!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['maplist!',Pred,ArgL1],ResL):- !,",2)
eval_tag(pl_tag,1724,"concurrent-maplist!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['concurrent-maplist!',Pred,ArgL1],ResL):- !,",2)
eval_tag(pl_tag,1736,"concurrent-forall!",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['concurrent-forall!',Gen,Test|Options],NoResult):- !,",2)
eval_tag(pl_tag,1744,"hyperpose",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['hyperpose',ArgL],Res):- !, metta_hyperpose(Eq,RetType,Depth,Self,ArgL,Res).",1)
eval_tag(pl_tag,1756,"predicate-arity",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Dpth,_Slf,['predicate-arity',F],A):- !,",1)
eval_tag(pl_tag,1759,"function-arity",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Dpth,_Slf,['function-arity',F],A):- !,",1)
eval_tag(pl_tag,1768,"compile-space!",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['compile-space!',Space],Res):- !,",1)
eval_tag(pl_tag,1787,"compile!",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['compile!',Space],Res):- !,",1)
eval_tag(pl_tag,1876,"fromnumber",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['fromNumber',NE],RetVal):- !,",1)
eval_tag(pl_tag,1905,"unique",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['unique',Eval],RetVal):- !,",1)
eval_tag(pl_tag,1910,"pred-unique",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['pred-unique',P2,Eval],RetVal):- !,",2)
eval_tag(pl_tag,1915,"subtraction",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['subtraction',Eval1,Eval2],RetVal):- !,",2)
eval_tag(pl_tag,1920,"pred-subtraction",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['pred-subtraction',P2,Eval1,Eval2],RetVal):- !,",3)
eval_tag(pl_tag,1925,"union",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['union',Eval1,Eval2],RetVal):- !,",2)
eval_tag(pl_tag,1930,"pred-union",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['pred-union',P2,Eval1,Eval2],RetVal):- !,",3)
eval_tag(pl_tag,1938,"intersection",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['intersection',Eval1,Eval2],RetVal):- !,",2)
eval_tag(pl_tag,1943,"pred-intersection",'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['pred-intersection',P2,Eval1,Eval2],RetVal):- !,",3)
eval_tag(pl_tag,2021,"make_list",'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Dpth,_Slf,['make_list',List],MettaList):- !, into_metta_cons(List,MettaList),check_returnval(Eq,RetType,MettaList).",1)
eval_tag(pl_tag,2028,"call-string!",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['call-string!',Str],NoResult):- !,'call-string!'(Str,NoResult).",1)
eval_tag(pl_tag,2070,"rust",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['rust',Bang,PredDecl],Res):- Bang == '!', !,",2)
eval_tag(pl_tag,2074,"rust!",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['rust!',PredDecl],Res):- !,",1)
eval_tag(pl_tag,2077,"py-list",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['py-list',Arg],Res):- !,",1)
eval_tag(pl_tag,2079,"py-dict",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['py-dict',Arg],Res):- !,",1)
eval_tag(pl_tag,2081,"py-tuple",'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['py-tuple',Arg],Res):- !,",1)
eval_tag(pl_tag,2083,"py-atom",'../canary/metta_eval.pl',"eval_40(_Eq,_RetType,_D7epth,_Self,['py-atom',Arg],Res):- !,",1)
eval_tag(pl_tag,2087,"py-dot",'../canary/metta_eval.pl',"eval_40(_Eq,_RetType,_Depth,_Self,['py-dot',Arg1,Arg2],Res):- !,",2)
eval_tag(pl_tag,2089,"py-eval",'../canary/metta_eval.pl',"eval_70(_Eq,_RetType,_Depth,_Self,['py-eval',Arg],Res):- !,",1)
eval_tag(pl_interp_tag,507,"int_fa_format-args",'../canary/metta_interp.pl',"% 'int_fa_format-args'(FormatArgs, Result):- eval_H(['format-args'|FormatArgs], Result).",0)
eval_tag(pl_interp_tag,588,"%",'../canary/metta_interp.pl',"'%'(Dividend, Divisor, Remainder):- eval_H(['mod',Dividend, Divisor], Remainder).",0)
eval_tag(pl_interp_tag,876,"true",'../canary/metta_interp.pl',"is_False(X):- X\\=='True', (is_False1(X)-> true ; (eval_H(X,Y),is_False1(Y))).",0)
eval_tag(pl_interp_tag,1461,"=",'../canary/metta_interp.pl',"eval_H(StackMax,Self,Term,X):-  catch_metta_return(eval_args('=',_,StackMax,Self,Term,X),X).",0)
eval_tag(metta_example,3,"match",'../../tests/baseline_compat/metta-morph_tests/match_feval.metta',"!(match &self (= (f $x) $y) $y)",0)
eval_tag(metta_example,10,"collapse",'../../tests/baseline_compat/metta-morph_tests/supercollapse.metta',"\t\t (collapse (superpose ((superpose $V1) (superpose $V2))))))",0)
eval_tag(metta_example,24,"pragma!",'../../tests/baseline_compat/metta-morph_tests/supercollapse.metta',"\t(pragma! trace-on-exec False)",0)
eval_tag(metta_example,25,"pragma!",'../../tests/baseline_compat/metta-morph_tests/supercollapse.metta',"\t(pragma! trace-on-eval False)",0)
eval_tag(metta_example,26,"pragma!",'../../tests/baseline_compat/metta-morph_tests/supercollapse.metta',"\t(pragma! trace-length 1090)",0)
eval_tag(metta_example,27,"pragma!",'../../tests/baseline_compat/metta-morph_tests/supercollapse.metta',"\t(pragma! stack-max 100))",0)
eval_tag(metta_example,1,"bind!",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(bind! &belief_events (new-space))",0)
eval_tag(metta_example,2,"bind!",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(bind! &goal_events (new-space))",0)
eval_tag(metta_example,3,"match",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(match &belief_events $1 $1)",0)
eval_tag(metta_example,4,"add-atom",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(add-atom &belief_events belief1)",0)
eval_tag(metta_example,5,"match",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(match &belief_events $1 $1)",0)
eval_tag(metta_example,6,"case",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(case belief1",0)
eval_tag(metta_example,9,"case",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(case (match &belief_events $1 $1)",0)
eval_tag(metta_example,12,"case",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(assertEqualToResult (case (match &belief_events $1 $1)",0)
eval_tag(metta_example,15,"case",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(assertEqualToResult (case (match &goal_events $1 $1)",0)
eval_tag(metta_example,18,"case",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(assertEqualToResult (case (match &goal_events $1 $1)",0)
eval_tag(metta_example,22,"add-atom",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(add-atom &goal_events goal1)",0)
eval_tag(metta_example,23,"case",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(assertEqualToResult (case (match &goal_events $1 $1)",0)
eval_tag(metta_example,26,"case",'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(assertEqualToResult (case (match &goal_events $1 $1) ((",0)
eval_tag(metta_example,16,"match",'../../tests/baseline_compat/metta-morph_tests/types3.metta',"!(match &self (GreaterThan $x $y)",0)
eval_tag(metta_example,12,"case",'../../tests/baseline_compat/metta-morph_tests/let_superpose_if_case.metta',"          (case (1 $y)",0)
eval_tag(metta_example,20,"case",'../../tests/baseline_compat/metta-morph_tests/let_superpose_if_case.metta',"          (case (1 $y) (((1 3) (f 0))",0)
eval_tag(metta_example,1,"new-state",'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(bind! &FIFO (new-state 42))",0)
eval_tag(metta_example,2,"bind!",'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(bind! &WU (new-space))",0)
eval_tag(metta_example,3,"change-state!",'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(change-state! &FIFO 45)",0)
eval_tag(metta_example,4,"get-state",'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(get-state &FIFO)",0)
eval_tag(metta_example,5,"add-atom",'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(add-atom &WU a)",0)
eval_tag(metta_example,6,"match",'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(match &WU $1 $1)",0)
eval_tag(metta_example,7,"add-atom",'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(add-atom &WU b)",0)
eval_tag(metta_example,8,"remove-atom",'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(remove-atom &WU a)",0)
eval_tag(metta_example,11,"match",'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"  (match &WU $1 $1)",0)
eval_tag(metta_example,12,"get-atoms",'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"  (get-atoms &WU))",0)
eval_tag(metta_example,1,"bind!",'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"!(bind! &attentional_focus (new-space))",0)
eval_tag(metta_example,2,"add-atom",'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"!(add-atom &attentional_focus 1)",0)
eval_tag(metta_example,3,"bind!",'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"!(bind! &concepts (new-space))",0)
eval_tag(metta_example,4,"add-atom",'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"!(add-atom &concepts 2)",0)
eval_tag(metta_example,8,"match",'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"  (match &attentional_focus $1 $1)",0)
eval_tag(metta_example,12,"match",'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"  (match &concepts $1 $1)",0)
eval_tag(metta_example,17,"match",'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"   (match (superpose (&attentional_focus &concepts)) $1 $1)",0)
eval_tag(metta_example,9,"sequential",'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"(= (sequential $1) (superpose $1))",0)
eval_tag(metta_example,12,"case",'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"(= (do $1) (case $1 ()))",0)
eval_tag(metta_example,18,"collapse",'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"(= (TupleConcat $Ev1 $Ev2) (collapse (superpose ((superpose $Ev1) (superpose $Ev2)))))",0)
eval_tag(metta_example,27,"let*",'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"   (let* (($w1 (Truth_c2w $c1)) ($w2 (Truth_c2w $c2)) ($w  (+ $w1 $w2))",0)
eval_tag(metta_example,41,"let*",'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"   (== () (collapse (let* (($x (superpose $Ev1))",0)
eval_tag(metta_example,48,"match",'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',";   (match &self (, (= (|- ($A $T1) ($B $T2)) ($Term ($f $T1 $T2)))",0)
eval_tag(metta_example,54,"match",'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"   (match &self (, (($A $T1) $Ev1) (($B $T2) $Ev2))",0)
eval_tag(metta_example,78,"let*",'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"       (let* (($head (car-atom $options))",0)
eval_tag(metta_example,87,"collapse",'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"(= (evidenceQuery $Term) (reduceBeliefs RevisionAndChoice (EmptyEvent todo) (collapse (query $Term))))",0)
eval_tag(metta_example,91,"collapse",'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"   (let $options (collapse (evidenceQuery (superpose $Terms)))",0)
eval_tag(metta_example,2,"pragma!",'../../tests/baseline_compat/metta-morph_tests/tests0.metta',";!(pragma! trace-on-fail True)",0)
eval_tag(metta_example,3,"pragma!",'../../tests/baseline_compat/metta-morph_tests/tests0.metta',";!(pragma! trace-on-pass True)",0)
eval_tag(metta_example,5,"import!",'../../tests/baseline_compat/metta-morph_tests/tests0.metta',"!(import! &self NARS)",0)
eval_tag(metta_example,2,"let*",'../../tests/baseline_compat/metta-morph_tests/let_superpose_list2.metta',"   (let* (($y (* 2 $x))",0)
eval_tag(metta_example,3,"sequential",'../../tests/baseline_compat/metta-morph_tests/add_atom_match.metta',"(= (sequential $1) (superpose $1))",0)
eval_tag(metta_example,7,"sequential",'../../tests/baseline_compat/metta-morph_tests/add_atom_match.metta',";  (sequential",0)
eval_tag(metta_example,12,"sequential",'../../tests/baseline_compat/metta-morph_tests/add_atom_match.metta',"!(sequential",0)
eval_tag(metta_example,1,"collapse",'../../tests/baseline_compat/metta-morph_tests/collapse.metta',"!(collapse (1 2 3))",0)
eval_tag(metta_example,5,"repr",'../../tests/baseline_compat/metta-morph_tests/types2.metta',"(= (reproduce $x $y) childlion)",0)
eval_tag(metta_example,9,"get-type",'../../tests/baseline_compat/metta-morph_tests/types2.metta',"!(get-type lion1)",0)
eval_tag(metta_example,11,"repr",'../../tests/baseline_compat/metta-morph_tests/types2.metta',"!(reproduce lion1 lion2)",0)
eval_tag(metta_example,13,"get-type",'../../tests/baseline_compat/metta-morph_tests/types2.metta',"!(get-type Lion)",0)
eval_tag(metta_example,15,"match",'../../tests/baseline_compat/metta-morph_tests/types2.metta',"!(match &self (: Lion $1) $1)",0)
eval_tag(metta_example,16,"match",'../../tests/baseline_compat/metta-morph_tests/types2.metta',"!(match &self (: reproduce $1) $1)",0)
eval_tag(metta_example,2,"sequential",'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"(= (sequential $1) (superpose $1))",0)
eval_tag(metta_example,5,"case",'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"(= (do $1) (case $1 ()))",0)
eval_tag(metta_example,9,"new-state",'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(bind! &var (new-state 1))",0)
eval_tag(metta_example,11,"change-state!",'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"   (superpose ((do (change-state! &var (+ 1 (get-state &var))))",0)
eval_tag(metta_example,20,"get-state",'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(get-state &var)",0)
eval_tag(metta_example,21,"sequential",'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(sequential ((increment)))",0)
eval_tag(metta_example,23,"get-state",'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(get-state &var)",0)
eval_tag(metta_example,24,"sequential",'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(sequential ((change-state! &var (+ 1 (get-state &var)))))",0)
eval_tag(metta_example,25,"get-state",'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(get-state &var)",0)
eval_tag(metta_example,2,"let*",'../../tests/baseline_compat/metta-morph_tests/let_superpose_list.metta',"   (let* (($y (* 2 $x))",0)
eval_tag(metta_example,9,"hyperpose",'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 2)) (superpose (1 2)))",0)
eval_tag(metta_example,11,"hyperpose",'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 (If (== 1 2) 1)))",0)
eval_tag(metta_example,14,"hyperpose",'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose ((If (== 1 2) 1) 1))",0)
eval_tag(metta_example,17,"hyperpose",'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 2 3))",0)
eval_tag(metta_example,20,"hyperpose",'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose ((If (== 1 2) 1) 2 3))",0)
eval_tag(metta_example,23,"hyperpose",'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 (If (== 1 2) 1) 3))",0)
eval_tag(metta_example,26,"hyperpose",'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 2 (If (== 1 2) 1)))",0)
eval_tag(metta_example,29,"hyperpose",'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 (If (== 1 2) 1) (If (== 1 2) 1)))",0)
eval_tag(metta_example,32,"hyperpose",'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 2 3 4))",0)
eval_tag(metta_example,35,"hyperpose",'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose ((1 2) (3 4)))",0)
eval_tag(metta_example,2,"let*",'../../tests/baseline_compat/metta-morph_tests/letlet.metta',"      (let* ((($f1 $c1) $T))",0)
eval_tag(metta_example,7,"bind!",'../../tests/baseline_compat/hyperon-experimental_scripts/e1_kb_write.metta',"!(bind! &kb (new-space))",0)
eval_tag(metta_example,28,"add-atom",'../../tests/baseline_compat/hyperon-experimental_scripts/e1_kb_write.metta',"       (add-atom &kb (Green $x)))",0)
eval_tag(metta_example,6,"get-atoms",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"; Even at the very beginning of the main script `(get-atoms &self)`",0)
eval_tag(metta_example,10,"get-atoms",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',";;!(get-atoms &self)",0)
eval_tag(metta_example,11,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',";;!(get-type (get-atoms &self))",0)
eval_tag(metta_example,12,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"!(get-type &self)",0)
eval_tag(metta_example,15,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"  ((let $x (get-atoms &self) (get-type $x)))",0)
eval_tag(metta_example,16,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"  ((get-type &self)))",0)
eval_tag(metta_example,27,"import!",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"!(import! &m f1_moduleA.metta)",0)
eval_tag(metta_example,31,"let*",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',";  (let* (($x (collapse (get-atoms &m)))",0)
eval_tag(metta_example,34,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',";  (get-type &self))",0)
eval_tag(metta_example,54,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"  (match &m (= (f 2) $x) $x)",0)
eval_tag(metta_example,60,"import!",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"!(import! &self f1_moduleA.metta)",0)
eval_tag(metta_example,68,"&self",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"; MeTTLog:  xlisting('&self').",0)
eval_tag(metta_example,76,"let*",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"  (let* (($a (collapse (get-atoms &self)))",0)
eval_tag(metta_example,85,"let*",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"  (== (let* (($x (collapse (get-atoms &m)))",0)
eval_tag(metta_example,100,"import!",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"!(import! &self f1_moduleB.metta)",0)
eval_tag(metta_example,115,"import!",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"!(import! &self ../hyperon-experimental_scripts/f1_moduleB.metta)",0)
eval_tag(metta_example,16,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',"  (match &self (= (color) $x) $x)",0)
eval_tag(metta_example,18,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',";!(assertEqual (match &self (= (color) $x) $x) (color))",0)
eval_tag(metta_example,21,"collapse",'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',";!(assertEqual (collapse (color)) (red yellow green))",0)
eval_tag(metta_example,30,"collapse",'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',"  (collapse",0)
eval_tag(metta_example,50,"collapse",'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',"  (let $x (collapse (color)) (superpose $x)))",0)
eval_tag(metta_example,58,"collapse",'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',"  (collapse (shape))",0)
eval_tag(metta_example,89,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',"   (match &self (= (eq $x $y) T) $x))",0)
eval_tag(metta_example,16,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta',"  (match &self",0)
eval_tag(metta_example,24,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta',"  (match &self",0)
eval_tag(metta_example,31,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta',"  (match &self",0)
eval_tag(metta_example,46,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta',"  (match &self",0)
eval_tag(metta_example,53,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta',"  (match &self",0)
eval_tag(metta_example,12,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (curry +))",0)
eval_tag(metta_example,15,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type ((curry +) 2))",0)
eval_tag(metta_example,37,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (curry-a + 2))",0)
eval_tag(metta_example,40,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type ((curry-a + 2) 3))",0)
eval_tag(metta_example,44,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type ((curry-a + 2) \"S\"))",0)
eval_tag(metta_example,103,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',";   (get-type (lambda ($x $y) (+ $x $y)))",0)
eval_tag(metta_example,155,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 1) (Left 5)))",0)
eval_tag(metta_example,169,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (Left \"5\")))",0)
eval_tag(metta_example,172,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (UntypedC \"5\")))",0)
eval_tag(metta_example,175,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (UntypedC (Null) 5)))",0)
eval_tag(metta_example,197,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"(= (fmap-i $f (Cons $x $xs))",0)
eval_tag(metta_example,203,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (fmap-i (curry-a * 2) (Cons 3 (Cons 4 Nil)))",0)
eval_tag(metta_example,204,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (Cons 6 (Cons 8 Nil)))",0)
eval_tag(metta_example,223,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"(= (insert $x Nil) (Cons $x Nil))",0)
eval_tag(metta_example,224,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"(= (insert $x (Cons $head $tail))",0)
eval_tag(metta_example,231,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"(= (sort (Cons $head $tail)) (insert $head (sort $tail)))",0)
eval_tag(metta_example,234,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (Cons 1 (Cons 2 (Cons 3 Nil))))",0)
eval_tag(metta_example,236,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (sort (Cons 3 (Cons 1 (Cons 2 Nil))))",0)
eval_tag(metta_example,237,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (Cons 1 (Cons 2 (Cons 3 Nil))))",0)
eval_tag(metta_example,19,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (get-type (Cons 0 (Cons 1 Nil)))",0)
eval_tag(metta_example,24,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"(= (drop (Cons $x $xs)) $xs)",0)
eval_tag(metta_example,28,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (get-type (drop (Cons 1 Nil)))",0)
eval_tag(metta_example,32,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (drop (Cons 2 (Cons 1 Nil)))",0)
eval_tag(metta_example,33,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (Cons 1 Nil))",0)
eval_tag(metta_example,37,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (get-type (drop Nil))",0)
eval_tag(metta_example,54,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (get-type (ConsN \"1\" (ConsN \"2\" NilN)))",0)
eval_tag(metta_example,59,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"(= (dropN (ConsN $x $xs)) $xs)",0)
eval_tag(metta_example,62,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (get-type (dropN (ConsN \"1\" NilN)))",0)
eval_tag(metta_example,68,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  ((get-type (dropN (dropN (ConsN \"1\" NilN)))))",0)
eval_tag(metta_example,13,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta',"  (match &self",0)
eval_tag(metta_example,20,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta',"  (match &self",0)
eval_tag(metta_example,36,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta',"  (match &self",0)
eval_tag(metta_example,48,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta',"  (match &self",0)
eval_tag(metta_example,17,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (($x leaf2) leaf3) $x)",0)
eval_tag(metta_example,30,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self ($who is a $what) ($who the $what))",0)
eval_tag(metta_example,44,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (:= (Green $who) T) ($who is really green))",0)
eval_tag(metta_example,47,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (:= ($color $who) T) ($who is really $color))",0)
eval_tag(metta_example,51,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (:= ($color $who) $tv) (It's $tv that $who is $color))",0)
eval_tag(metta_example,57,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (:= (Green Tom) $tv) $tv)",0)
eval_tag(metta_example,68,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (isa $color color) $color)",0)
eval_tag(metta_example,7,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b1_equal_chain.metta',"; (match &self (= (expr) $r) $r)",0)
eval_tag(metta_example,6,"import!",'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"!(import! &kb c2_spaces_kb)",0)
eval_tag(metta_example,10,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"  (match &kb",0)
eval_tag(metta_example,19,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"  (match &self ($p is-a Color) $p)",0)
eval_tag(metta_example,27,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"  (match &kb",0)
eval_tag(metta_example,41,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"  (match &kb ($prop is-a Color)",0)
eval_tag(metta_example,51,"import!",'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"!(import! &self c2_spaces_kb)",0)
eval_tag(metta_example,53,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"  (match &self",0)
eval_tag(metta_example,20,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/c3_pln_stv.metta',"   (match &self",0)
eval_tag(metta_example,36,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/c3_pln_stv.metta',"   (match &self",0)
eval_tag(metta_example,5,"import!",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_moduleB.metta',"!(import! &self f1_moduleC.metta)",0)
eval_tag(metta_example,7,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type 5)",0)
eval_tag(metta_example,10,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (+ 5 7))",0)
eval_tag(metta_example,15,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type +)",0)
eval_tag(metta_example,21,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (+ 5 \"4\"))",0)
eval_tag(metta_example,24,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (+ -))",0)
eval_tag(metta_example,30,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type Either)",0)
eval_tag(metta_example,41,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (Left 5))",0)
eval_tag(metta_example,49,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (isLeft (Right 5)))",0)
eval_tag(metta_example,54,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (isLeft 5))",0)
eval_tag(metta_example,66,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (LeftP 5))",0)
eval_tag(metta_example,73,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (pair (LeftP 5) \"String\"))",0)
eval_tag(metta_example,85,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (Cons 5 (Cons 6 Nil)))",0)
eval_tag(metta_example,88,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (Cons 5 (Cons \"6\" Nil)))",0)
eval_tag(metta_example,96,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (let (List $t) (get-type (Cons 5 (Cons 6 Nil)))",0)
eval_tag(metta_example,10,"function",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"; Predicates (functions) from `Entity` to `Type`",0)
eval_tag(metta_example,18,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (Mortal Plato))",0)
eval_tag(metta_example,40,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (HumansAreMortal SocratesIsHuman))",0)
eval_tag(metta_example,44,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (HumansAreMortal (Human Socrates)))",0)
eval_tag(metta_example,57,"remove-atom",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"(nop (remove-atom &self (: = (-> Atom Atom Atom))))",0)
eval_tag(metta_example,58,"remove-atom",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"(nop (remove-atom &corlib (: = (-> Atom Atom Atom))))",0)
eval_tag(metta_example,61,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"!(\"sameTypes\" (get-type SocratesIsMortal) (get-type (HumansAreMortal SocratesIsHuman)))",0)
eval_tag(metta_example,63,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (= SocratesIsMortal (HumansAreMortal SocratesIsHuman)))",0)
eval_tag(metta_example,67,"&self",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"; it doesn't mean that the equality itself is true (an inhabited type).",0)
eval_tag(metta_example,69,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"!(\"sameTypes\" (get-type (Mortal Socrates)) (get-type (Mortal Plato)))",0)
eval_tag(metta_example,71,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (= (Mortal Socrates) (Mortal Plato)))",0)
eval_tag(metta_example,75,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsMortal) (get-type (HumansAreMortal PlatoIsHuman)))",0)
eval_tag(metta_example,78,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (= SocratesIsMortal (HumansAreMortal PlatoIsHuman)))",0)
eval_tag(metta_example,82,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsHuman) (get-type PlatoIsHuman))",0)
eval_tag(metta_example,85,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (= SocratesIsHuman PlatoIsHuman))",0)
eval_tag(metta_example,88,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsHuman) (get-type SocratesIsMortal))",0)
eval_tag(metta_example,90,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (= SocratesIsHuman SocratesIsMortal))",0)
eval_tag(metta_example,122,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"   (match &self (: $x $type) T))",0)
eval_tag(metta_example,134,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"   (match &self (: $impl (-> $cause $type))",0)
eval_tag(metta_example,8,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"!(bind! &state-token (new-state (A B)))",0)
eval_tag(metta_example,18,"get-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"   (get-state (get-token))",0)
eval_tag(metta_example,27,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"   (new-state (A B)))",0)
eval_tag(metta_example,35,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (get-type (new-state 2))",0)
eval_tag(metta_example,39,"change-state!",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (get-type (change-state! (new-state \"S\") \"V\"))",0)
eval_tag(metta_example,44,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (let $v (new-state 1) (get-type $v))",0)
eval_tag(metta_example,49,"get-type",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (get-type &state-token)",0)
eval_tag(metta_example,58,"rtrace!",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',";!(rtrace!",0)
eval_tag(metta_example,66,"change-state!",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (change-state! (new-state 1) \"S\")",0)
eval_tag(metta_example,75,"change-state!",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"!(nop (change-state! &state-token (C D)))",0)
eval_tag(metta_example,79,"get-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"   (get-state (get-token))",0)
eval_tag(metta_example,88,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (let $x (new-state 1)",0)
eval_tag(metta_example,90,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (new-state 2))",0)
eval_tag(metta_example,95,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"   (let $tnso (new-state 1) $tnso)",0)
eval_tag(metta_example,96,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"   (new-state 1))",0)
eval_tag(metta_example,85,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"   (Cons (S Z) (Cons Z Nil))",0)
eval_tag(metta_example,86,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  ((Cons (S Z) (Cons Z Nil))))",0)
eval_tag(metta_example,92,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  (Cons S (Cons Z Nil))",0)
eval_tag(metta_example,93,"cons",'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  ((Error (Cons Z Nil) BadType)))",0)
eval_tag(metta_example,175,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  (match &self (Green $who) $who)",0)
eval_tag(metta_example,185,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  (match &self (Green $who) (Green $who))",0)
eval_tag(metta_example,195,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"    (match &self (= (eq $r (S Z)) $tv) $tv))",0)
eval_tag(metta_example,225,"let*",'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  (let* (($r1 (Add Z Z))",0)
eval_tag(metta_example,9,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"    (let $new-state (new-state $status)",0)
eval_tag(metta_example,20,"get-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"  (get-state (status (Goal lunch-order)))",0)
eval_tag(metta_example,28,"change-state!",'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"!(nop (change-state! (status (Goal lunch-order)) active))",0)
eval_tag(metta_example,36,"get-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"  (get-state (status (Goal lunch-order)))",0)
eval_tag(metta_example,43,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"!(bind! &state-active (new-state active))",0)
eval_tag(metta_example,44,"change-state!",'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"!(nop (change-state! &state-active inactive))",0)
eval_tag(metta_example,45,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"; We cannot put `(new-state active)` inside `match`, because it doesn't",0)
eval_tag(metta_example,47,"new-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"; `(let $state-active (new-state active)) ...) here.",0)
eval_tag(metta_example,51,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"    (match &self (= (status (Goal $goal)) &state-active) $goal)",0)
eval_tag(metta_example,57,"get-state",'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"  (if (== (get-state (status (Goal $goal)))",0)
eval_tag(metta_example,5,"import!",'../../tests/baseline_compat/hyperon-experimental_scripts/f1_moduleA.metta',"!(import! &self f1_moduleC.metta)",0)
eval_tag(metta_example,8,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta',"(= (frog $x) (match &self (Frog $x) T))",0)
eval_tag(metta_example,46,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta',"   (match &self (Evaluation ($P $x)) T))",0)
eval_tag(metta_example,51,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta',"   (match &self",0)
eval_tag(metta_example,79,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta',"   (match &self (Evaluation ($P $x)) ($P $x)))",0)
eval_tag(metta_example,84,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta',"   (match &self",0)
eval_tag(metta_example,31,"rtrace!",'../../tests/baseline_compat/hyperon-experimental_scripts/b3_direct.metta',";!(rtrace! (ift (green $x) $x))",0)
eval_tag(metta_example,33,"rtrace!",'../../tests/baseline_compat/hyperon-experimental_scripts/b3_direct.metta',"; !(rtrace! (, (green $x) (println! $x)))",0)
eval_tag(metta_example,47,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/b3_direct.metta',"  (match &self (= ($p Fritz) T) $p)",0)
eval_tag(metta_example,5,"pragma!",'../../tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta',"!(pragma! type-check auto)",0)
eval_tag(metta_example,41,"collapse",'../../tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta',"   (collapse (+ 5 \"S\"))",0)
eval_tag(metta_example,51,"&self",'../../tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta',"; within MeTTa (e.g. for self-reflective genetic programming).",0)
eval_tag(metta_example,53,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta',"(match &self (== SocratesIsHuman SamIsMortal) Really?)",0)
eval_tag(metta_example,9,"bind!",'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"!(bind! &memory (new-space))",0)
eval_tag(metta_example,14,"case",'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"   (case $expr",0)
eval_tag(metta_example,21,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"   (match &memory (state $var $y)",0)
eval_tag(metta_example,28,"add-atom",'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"        (dood (add-atom &memory (state $var $value)))))",0)
eval_tag(metta_example,39,"case",'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"   (case (get-state (person name))",0)
eval_tag(metta_example,50,"case",'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"   (case (get-state greeted)",0)
eval_tag(metta_example,27,"match",'../../tests/baseline_compat/hyperon-experimental_scripts/a2_opencoggy.metta',"  (match &self",0)
eval_tag(metta_example,16,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))",0)
eval_tag(metta_example,30,"extend-py!",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',";;!(extend-py! ../utils/helper.py)",0)
eval_tag(metta_example,32,"cdr-atom",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (tuple-count $tuple) (if (== $tuple ()) 0 (+ 1 (tuple-count (cdr-atom $tuple)))))",0)
eval_tag(metta_example,34,"bind!",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"!(bind! &specializations (new-space))",0)
eval_tag(metta_example,36,"bind!",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"!(bind! &abstractions (new-space))",0)
eval_tag(metta_example,41,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (refdb) $db))",0)
eval_tag(metta_example,42,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (msNat) (fromNumber $msup)))",0)
eval_tag(metta_example,43,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (highsurp) $highsurp))",0)
eval_tag(metta_example,48,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (refdb) $db))",0)
eval_tag(metta_example,49,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (msNat) (fromNumber $msup)))",0)
eval_tag(metta_example,50,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (highsurp) $highsurp))",0)
eval_tag(metta_example,56,"match",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"   (match $db ($link $x $y) ",0)
eval_tag(metta_example,63,"match",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"   (match $db ($target-link $x $y)",0)
eval_tag(metta_example,68,"case",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"   (case (match &specializations $sp $sp)",0)
eval_tag(metta_example,72,"case",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"   (case (match &abstractions $aptrn $aptrn)",0)
eval_tag(metta_example,82,"match",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (specialize $link) (match &specializations ($link $x $y) ($link $x $y)))",0)
eval_tag(metta_example,85,"match",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (all-specialization) (match &specializations $x $x))",0)
eval_tag(metta_example,92,"case",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"      (case ((get-metatype $pattern) $pattern)",0)
eval_tag(metta_example,105,"case",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"    (case $ptrn (",0)
eval_tag(metta_example,113,"case",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"      (case (match &self (= (refdb) $db) $db)",0)
eval_tag(metta_example,118,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (countNat $pattern) (fromNumber (count $pattern)))",0)
eval_tag(metta_example,135,"case",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"    (case $pattern ",0)
eval_tag(metta_example,142,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"    (add-atom &self ",0)
eval_tag(metta_example,150,"case",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"    (case $pattern (",0)
eval_tag(metta_example,187,"import!",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"; !(import! &self ../utils/MinerUtils.metta)",0)
eval_tag(metta_example,208,"let*",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"  (let* (($cptrn (miner $db $ms $depth))",0)
eval_tag(metta_example,217,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"!(add-atom &db (Inheritance C A))",0)
eval_tag(metta_example,218,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"!(add-atom &db (Inheritance D E))",0)
eval_tag(metta_example,219,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"!(add-atom &db (Inheritance C E))",0)
eval_tag(metta_example,225,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (depth) (fromNumber 0))",0)
eval_tag(metta_example,226,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"; (= (depth) (fromNumber 1))",0)
eval_tag(metta_example,227,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"; (= (depth) (fromNumber 2))",0)
eval_tag(metta_example,1,"pragma!",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"!(pragma! compile full)",0)
eval_tag(metta_example,4,"get-metatype",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"(= (is-variable $x) (== (get-metatype $x) Variable))",0)
eval_tag(metta_example,11,"get-metatype",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"(= (is-expression $x) (== (get-metatype $x) Expression))",0)
eval_tag(metta_example,18,"car-atom",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"\t\t\t\t\t\t  (and (let $head (car-atom $x) (is-closed $head))",0)
eval_tag(metta_example,24,"bind!",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"!(bind! &kb (new-space))",0)
eval_tag(metta_example,26,"add-atom",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"!(add-atom &kb (: axiom (nums 2 3)))",0)
eval_tag(metta_example,28,"add-atom",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"!(add-atom &kb (: rule1 ",0)
eval_tag(metta_example,32,"add-atom",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"!(add-atom &kb ",0)
eval_tag(metta_example,38,"add-atom",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"; !(add-atom &kb ",0)
eval_tag(metta_example,51,"match",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"(= (bc (: $prf $ccln) $space $_1) (match $space (: $prf $ccln) (: $prf $ccln)))",0)
eval_tag(metta_example,61,"let*",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"   (let* (((: $prfabs (-> $prms $ccln)) ",0)
eval_tag(metta_example,75,"pragma!",'../../tests/baseline_compat/anti-regression/bc_comp.metta',"; !(pragma! eval debug)",0)
eval_tag(metta_example,16,"fromnumber",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))",0)
eval_tag(metta_example,26,"case",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"      (case ((get-metatype $pattern) $pattern)",0)
eval_tag(metta_example,38,"case",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"    (case $ptrn (",0)
eval_tag(metta_example,48,"case",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"      (case (match &self (= (refdb) $db) $db)",0)
eval_tag(metta_example,53,"fromnumber",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"(= (countNat $pattern) (fromNumber (count $pattern)))",0)
eval_tag(metta_example,55,"bind!",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(bind! &kb (new-space))",0)
eval_tag(metta_example,60,"add-atom",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"    (add-atom &kb $sptrn))",0)
eval_tag(metta_example,69,"import!",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"; !(import! &db ../data/sample.metta)",0)
eval_tag(metta_example,70,"bind!",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(bind! &db (new-space))",0)
eval_tag(metta_example,71,"add-atom",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(add-atom &db (Inheritance B A))",0)
eval_tag(metta_example,72,"add-atom",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(add-atom &db (Inheritance C A))",0)
eval_tag(metta_example,73,"add-atom",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(add-atom &db (Inheritance D E))",0)
eval_tag(metta_example,74,"add-atom",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(add-atom &db (Inheritance C E))",0)
eval_tag(metta_example,82,"match",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"(= (bc (: $prf $ccln) $_) (match &kb (: $prf $ccln) (: $prf $ccln)))",0)
eval_tag(metta_example,85,"let*",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"   (let* (((: $prfabs (-> $prms $ccln)) (bc (: $prfabs (-> $prms $ccln)) $k))",0)
eval_tag(metta_example,108,"let*",'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"    (let* (($aptrn (Inheritance (VarIdx Z) (VarIdx (S Z))))",0)
eval_tag(metta_example,16,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))",0)
eval_tag(metta_example,30,"extend-py!",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',";;!(extend-py! ../utils/helper.py)",0)
eval_tag(metta_example,32,"cdr-atom",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (tuple-count $tuple) (if (== $tuple ()) 0 (+ 1 (tuple-count (cdr-atom $tuple)))))",0)
eval_tag(metta_example,34,"bind!",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"!(bind! &specializations (new-space))",0)
eval_tag(metta_example,36,"bind!",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"!(bind! &abstractions (new-space))",0)
eval_tag(metta_example,41,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (refdb) $db))",0)
eval_tag(metta_example,42,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (msNat) (fromNumber $msup)))",0)
eval_tag(metta_example,43,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (highsurp) $highsurp))",0)
eval_tag(metta_example,48,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (refdb) $db))",0)
eval_tag(metta_example,49,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (msNat) (fromNumber $msup)))",0)
eval_tag(metta_example,50,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (highsurp) $highsurp))",0)
eval_tag(metta_example,56,"match",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"   (match $db ($link $x $y) ",0)
eval_tag(metta_example,63,"match",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"   (match $db ($target-link $x $y)",0)
eval_tag(metta_example,68,"case",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"   (case (match &specializations $sp $sp)",0)
eval_tag(metta_example,72,"case",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"   (case (match &abstractions $aptrn $aptrn)",0)
eval_tag(metta_example,82,"match",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (specialize $link) (match &specializations ($link $x $y) ($link $x $y)))",0)
eval_tag(metta_example,85,"match",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (all-specialization) (match &specializations $x $x))",0)
eval_tag(metta_example,92,"case",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"      (case ((get-metatype $pattern) $pattern)",0)
eval_tag(metta_example,104,"case",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"    (case $ptrn (",0)
eval_tag(metta_example,112,"case",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"      (case (match &self (= (refdb) $db) $db)",0)
eval_tag(metta_example,117,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (countNat $pattern) (fromNumber (count $pattern)))",0)
eval_tag(metta_example,134,"case",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"    (case $pattern ",0)
eval_tag(metta_example,141,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"    (add-atom &self ",0)
eval_tag(metta_example,149,"case",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"    (case $pattern (",0)
eval_tag(metta_example,186,"import!",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"; !(import! &self ../utils/MinerUtils.metta)",0)
eval_tag(metta_example,207,"let*",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"  (let* (($cptrn (miner $db $ms $depth))",0)
eval_tag(metta_example,216,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"!(add-atom &db (Inheritance C A))",0)
eval_tag(metta_example,217,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"!(add-atom &db (Inheritance D E))",0)
eval_tag(metta_example,218,"add-atom",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"!(add-atom &db (Inheritance C E))",0)
eval_tag(metta_example,224,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (depth) (fromNumber 0))",0)
eval_tag(metta_example,225,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"; (= (depth) (fromNumber 1))",0)
eval_tag(metta_example,226,"fromnumber",'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"; (= (depth) (fromNumber 2))",0)
eval_tag(metta_example,1,"pragma!",'../../tests/baseline_compat/anti-regression/bchain.metta',"!(pragma! compile False)",0)
eval_tag(metta_example,4,"get-metatype",'../../tests/baseline_compat/anti-regression/bchain.metta',"(= (is-variable $x) (== (get-metatype $x) Variable))",0)
eval_tag(metta_example,11,"get-metatype",'../../tests/baseline_compat/anti-regression/bchain.metta',"(= (is-expression $x) (== (get-metatype $x) Expression))",0)
eval_tag(metta_example,18,"car-atom",'../../tests/baseline_compat/anti-regression/bchain.metta',"\t\t\t\t\t\t  (and (let $head (car-atom $x) (is-closed $head))",0)
eval_tag(metta_example,24,"bind!",'../../tests/baseline_compat/anti-regression/bchain.metta',"!(bind! &kb (new-space))",0)
eval_tag(metta_example,26,"add-atom",'../../tests/baseline_compat/anti-regression/bchain.metta',"!(add-atom &kb (: axiom (nums 2 3)))",0)
eval_tag(metta_example,28,"add-atom",'../../tests/baseline_compat/anti-regression/bchain.metta',"!(add-atom &kb (: rule1 ",0)
eval_tag(metta_example,32,"add-atom",'../../tests/baseline_compat/anti-regression/bchain.metta',"!(add-atom &kb ",0)
eval_tag(metta_example,38,"add-atom",'../../tests/baseline_compat/anti-regression/bchain.metta',"; !(add-atom &kb ",0)
eval_tag(metta_example,51,"match",'../../tests/baseline_compat/anti-regression/bchain.metta',"(= (bc (: $prf $ccln) $_1) (match &kb (: $prf $ccln) (: $prf $ccln)))",0)
eval_tag(metta_example,61,"let*",'../../tests/baseline_compat/anti-regression/bchain.metta',"   (let* (((: $prfabs (-> $prms $ccln)) ",0)
eval_tag(metta_example,73,"pragma!",'../../tests/baseline_compat/anti-regression/bchain.metta',"; !(pragma! eval debug)",0)
eval_tag(metta_example,1,"pragma!",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"!(pragma! compile full)",0)
eval_tag(metta_example,4,"get-metatype",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"(= (is-variable $x) (== (get-metatype $x) Variable))",0)
eval_tag(metta_example,11,"get-metatype",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"(= (is-expression $x) (== (get-metatype $x) Expression))",0)
eval_tag(metta_example,18,"car-atom",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"\t\t\t\t\t\t  (and (let $head (car-atom $x) (is-closed $head))",0)
eval_tag(metta_example,24,"bind!",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"!(bind! &kb (new-space))",0)
eval_tag(metta_example,26,"add-atom",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"!(add-atom &kb (: axiom (nums 2 3)))",0)
eval_tag(metta_example,28,"add-atom",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"!(add-atom &kb (: rule1 ",0)
eval_tag(metta_example,32,"add-atom",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"!(add-atom &kb ",0)
eval_tag(metta_example,38,"add-atom",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"; !(add-atom &kb ",0)
eval_tag(metta_example,51,"match",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"(= (bc (: $prf $ccln) $_1) (match &kb (: $prf $ccln) (: $prf $ccln)))",0)
eval_tag(metta_example,61,"let*",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"   (let* (((: $prfabs (-> $prms $ccln)) ",0)
eval_tag(metta_example,73,"pragma!",'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"; !(pragma! eval debug)",0)
eval_tag(metta_example,4,"get-metatype",'../../tests/baseline_compat/anti-regression/test_if_closed.metta',"(= (is-variable $x) (== (get-metatype $x) Variable))",0)
eval_tag(metta_example,11,"get-metatype",'../../tests/baseline_compat/anti-regression/test_if_closed.metta',"(= (is-expression $x) (== (get-metatype $x) Expression))",0)
eval_tag(metta_example,19,"car-atom",'../../tests/baseline_compat/anti-regression/test_if_closed.metta',"\t\t\t\t\t\t  (and (let $head (car-atom $x) (is-closed $head))",0)
eval_tag(metta_example,25,"pragma!",'../../tests/baseline_compat/anti-regression/test_if_closed.metta',";!(pragma! eval trace)",0)
eval_tag(metta_example,6,"get-atoms",'../../tests/baseline_compat/module-system/f1_imports.metta',"; Even at the very beginning of the script `(get-atoms &self)`",0)
eval_tag(metta_example,12,"get-type",'../../tests/baseline_compat/module-system/f1_imports.metta',"  ((let $x (get-atoms &self) (get-type $x)))",0)
eval_tag(metta_example,13,"get-type",'../../tests/baseline_compat/module-system/f1_imports.metta',"  (superpose (((get-type &self)) ((get-type &self)))))",0)
eval_tag(metta_example,24,"import!",'../../tests/baseline_compat/module-system/f1_imports.metta',"!(import! &m f1_moduleA)",0)
eval_tag(metta_example,30,"car-atom",'../../tests/baseline_compat/module-system/f1_imports.metta',"    (let $head (car-atom $list)",0)
eval_tag(metta_example,41,"collapse",'../../tests/baseline_compat/module-system/f1_imports.metta',"  (let $x (collapse (get-atoms &m)) (contains $x is-space))",0)
eval_tag(metta_example,46,"collapse",'../../tests/baseline_compat/module-system/f1_imports.metta',"; !(let $x (collapse (get-atoms &m)) (car-atom $x))",0)
eval_tag(metta_example,58,"match",'../../tests/baseline_compat/module-system/f1_imports.metta',"  (match &m (= (f 2) $x) $x)",0)
eval_tag(metta_example,64,"import!",'../../tests/baseline_compat/module-system/f1_imports.metta',"!(import! &self f1_moduleA)",0)
eval_tag(metta_example,88,"collapse",'../../tests/baseline_compat/module-system/f1_imports.metta',";  (let $a (collapse (get-atoms &self)) (contains $a is-m))",0)
eval_tag(metta_example,93,"import!",'../../tests/baseline_compat/module-system/f1_imports.metta',"!(import! &corelib corelib)",0)
eval_tag(metta_example,97,"collapse",'../../tests/baseline_compat/module-system/f1_imports.metta',"  (let $a (collapse (get-atoms &self)) (contains $a is-corelib))",0)
eval_tag(metta_example,109,"import!",'../../tests/baseline_compat/module-system/f1_imports.metta',"!(import! &self f1_moduleB)",0)
eval_tag(metta_example,123,"import!",'../../tests/baseline_compat/module-system/f1_imports.metta',"!(import! &self f1_moduleB)",0)
eval_tag(metta_example,6,"import!",'../../tests/baseline_compat/module-system/c2_spaces.metta',"!(import! &kb c2_spaces_kb)",0)
eval_tag(metta_example,10,"match",'../../tests/baseline_compat/module-system/c2_spaces.metta',"  (match &kb",0)
eval_tag(metta_example,19,"match",'../../tests/baseline_compat/module-system/c2_spaces.metta',"  (match &self ($p is-a Color) $p)",0)
eval_tag(metta_example,27,"match",'../../tests/baseline_compat/module-system/c2_spaces.metta',"  (match &kb",0)
eval_tag(metta_example,41,"match",'../../tests/baseline_compat/module-system/c2_spaces.metta',"  (match &kb ($prop is-a Color)",0)
eval_tag(metta_example,51,"import!",'../../tests/baseline_compat/module-system/c2_spaces.metta',"!(import! &self c2_spaces_kb)",0)
eval_tag(metta_example,53,"match",'../../tests/baseline_compat/module-system/c2_spaces.metta',"  (match &self",0)
eval_tag(metta_example,5,"import!",'../../tests/baseline_compat/module-system/f1_moduleB.metta',"!(import! &self f1_moduleC)",0)
eval_tag(metta_example,5,"import!",'../../tests/baseline_compat/module-system/f1_moduleA.metta',"!(import! &self f1_moduleC)",0)
eval_tag(metta_example,1,"collapse",'../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta',"!(collapse (superpose ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))",0)
eval_tag(metta_example,31,"maplist!",'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (maplist! is-even (1 2 3)) ((False True False)))",0)
eval_tag(metta_example,35,"maplist!",'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (maplist! < (1 2 3) (2 2 2)) ((True False False)))",0)
eval_tag(metta_example,39,"maplist!",'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (maplist! plus-ternary (1 2 3) (4 5 6) (7 8 9)) ((12 15 18)))",0)
eval_tag(metta_example,43,"maplist!",'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (maplist! maplist! (< >) ((1 2 3) (1 2 3)) ((2 2 2) (2 2 2))) (((True False False) (False False True))))",0)
eval_tag(metta_example,50,"maplist!",'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (maplist! get-type (my-list)) (((-> Expression))))",0)
eval_tag(metta_example,58,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (catch (max-time! 1 (concurrent-maplist! is-even (1 2 3))) ",0)
eval_tag(metta_example,64,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (catch (max-time! 1 (concurrent-maplist! < (1 2 3) (2 2 2))) ",0)
eval_tag(metta_example,70,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',";!(assertEqualToResult (catch (max-time! 1 (concurrent-maplist! plus-ternary (1 2 3) (4 5 6) (7 8 9))) ",0)
eval_tag(metta_example,76,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (catch (max-time! 1 (concurrent-maplist! concurrent-maplist! (is-even is-odd) ((1 2 3) (1 2 3))))",0)
eval_tag(metta_example,82,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (catch (max-time! 1 (maplist! get-type (my-list)))",0)
eval_tag(metta_example,81,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"   (let* (((: $ructor (-> $premise $conclusion)) ($rb))",0)
eval_tag(metta_example,87,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))",0)
eval_tag(metta_example,94,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $conclusion)) ($rb))",0)
eval_tag(metta_example,102,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $conclusion)) ($rb))",0)
eval_tag(metta_example,111,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $premise5 $conclusion)) ($rb))",0)
eval_tag(metta_example,146,"car-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"\t  (car-atom $a) ",0)
eval_tag(metta_example,147,"car-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"      (let $t (cdr-atom $a) (superpose ((car-atom $a) (first-few (- $n 1) $t)))))))",0)
eval_tag(metta_example,2,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(bind! &space31 (new-space))",0)
eval_tag(metta_example,3,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(bind! &space32 (new-space))",0)
eval_tag(metta_example,4,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(bind! &space33 (new-space))",0)
eval_tag(metta_example,5,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(bind! &space34 (new-space))",0)
eval_tag(metta_example,8,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(add-atom &space31 (superpose ((foo $x $y) (foo 1 2) (foo 3 4) (foo $x 10) (foo $x $x))))",0)
eval_tag(metta_example,11,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(add-atom &space32 (superpose ((foo 1 2) (foo 5 6) (foo $x $y))))",0)
eval_tag(metta_example,14,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(add-atom &space33 (superpose ((foo 3 4) (foo 5 6))))",0)
eval_tag(metta_example,21,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (subtraction (get-atoms &space31) (get-atoms &space32))",0)
eval_tag(metta_example,28,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (subtraction (get-atoms &space31) (get-atoms &space33))",0)
eval_tag(metta_example,35,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (subtraction (get-atoms &space34) (get-atoms &space31))",0)
eval_tag(metta_example,44,"union",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (union (get-atoms &space31) (get-atoms &space32))",0)
eval_tag(metta_example,51,"union",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (union (get-atoms &space32) (get-atoms &space33))",0)
eval_tag(metta_example,58,"union",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (union (get-atoms &space31) (get-atoms &space33))",0)
eval_tag(metta_example,65,"union",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (union (get-atoms &space31) (superpose ((foo 7 8))))",0)
eval_tag(metta_example,72,"union",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (union (get-atoms &space31) (get-atoms &space34))",0)
eval_tag(metta_example,19,"findall!",'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! $X (match &self (my-numbers $X) $X)) ((1 2 7 212)))",0)
eval_tag(metta_example,22,"findall!",'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! $X (match &self (my-numbers $X) (this-predicate-doesnt-matter $X))) ((1 2 7 212)))",0)
eval_tag(metta_example,25,"findall!",'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! (is-even $X) (match &self (my-numbers $X) $X)) ((False True False True)))",0)
eval_tag(metta_example,28,"findall!",'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! ($X $Y) (match &self (my-pairs $X $Y) (this-predicate-doesnt-matter $X $Y))) (((2 4) (4 8))))",0)
eval_tag(metta_example,29,"findall!",'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! ($Y $X) (match &self (my-pairs $X $Y) (this-predicate-doesnt-matter $X $Y))) (((4 2) (8 4))))",0)
eval_tag(metta_example,32,"findall!",'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! (/ $X $Y) (match &self (my-pairs $X $Y) (this-predicate-doesnt-matter $X $Y))) ((0.5 0.5)))",0)
eval_tag(metta_example,33,"findall!",'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! (/ $Y $X) (match &self (my-pairs $X $Y) (this-predicate-doesnt-matter $X $Y))) ((2 2)))",0)
eval_tag(metta_example,4,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(assertEqualToResult (intersection (superpose (a b (+ 2 3 ) c)) (superpose (b c (+ 2 3) c c d))) (b 5 c))",0)
eval_tag(metta_example,6,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(assertEqual (intersection (superpose (a b (+ 2 3 ) c)) (superpose (b c (+ 2 3) c c d)))  (superpose (b (+ 2 3) c)))",0)
eval_tag(metta_example,9,"repr",'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(repr aswde)",0)
eval_tag(metta_example,11,"repr",'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(assertEqualToResult (repr aswde ) (\"aswde\" ))",0)
eval_tag(metta_example,14,"parse",'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(parse \"kjh\")",0)
eval_tag(metta_example,16,"parse",'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(assertEqualToResult (parse \"kjh\" ) (kjh ))",0)
eval_tag(metta_example,3,"stringtochars",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars \"xyzzy\") ('x' 'y' 'z' 'z' 'y'))",0)
eval_tag(metta_example,5,"charstostring",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (charsToString ('x' 'y' 'z' 'z' 'y')) \"xyzzy\")",0)
eval_tag(metta_example,7,"stringtochars",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars \"\") ())",0)
eval_tag(metta_example,9,"charstostring",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (charsToString ()) \"\")",0)
eval_tag(metta_example,12,"stringtochars",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (charsToString (stringToChars \"xyzzy\")) \"xyzzy\")",0)
eval_tag(metta_example,14,"stringtochars",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars (charsToString ('x' 'y' 'z' 'z' 'y'))) ('x' 'y' 'z' 'z' 'y'))",0)
eval_tag(metta_example,17,"charstostring",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (charsToString ('x' 'y' ' ' 'z' 'y')) \"xy zy\")",0)
eval_tag(metta_example,19,"stringtochars",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars \"xy zy\") ('x' 'y' ' ' 'z' 'y'))",0)
eval_tag(metta_example,21,"charstostring",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (charsToString (' ')) \" \")",0)
eval_tag(metta_example,23,"stringtochars",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars \" \") (' '))",0)
eval_tag(metta_example,25,"stringtochars",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars (superpose (\"ab\" \"cd\" \"ef\"))) (superpose (('a' 'b') ('c' 'd') ('e' 'f'))))",0)
eval_tag(metta_example,29,"format-args",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"\" (1 2 3)) \"\")",0)
eval_tag(metta_example,31,"format-args",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \" \" (1 2 3)) \" \")",0)
eval_tag(metta_example,33,"format-args",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"{}\" (1 2 3)) \"1\")",0)
eval_tag(metta_example,35,"format-args",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"{}}\" (1 2 3)) \"{}\")",0)
eval_tag(metta_example,37,"format-args",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"xyz zy\" (1 2 3)) \"xyz zy\")",0)
eval_tag(metta_example,39,"format-args",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"Indexed {1} {} {0} {}\" (1 2 3)) \"Indexed 2 1 1 2\")",0)
eval_tag(metta_example,41,"format-args",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"Different types {} {} {} {} {} {}\" (1 \"2\" 'c' -0.5 atom (1 2 c -0.5 atom))) \"Different types 1 2 c -0.5 atom (1 2 c -0.5 atom)\")",0)
eval_tag(metta_example,43,"format-args",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"Two digit index={11}\" (0 1 2 3 4 5 6 7 8 9 10 \"eleven\")) \"Two digit index=eleven\")",0)
eval_tag(metta_example,46,"format-args",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"Bad args list {1} {} {0} {}\" x) (Error x BadType))",0)
eval_tag(metta_example,48,"format-args",'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"Malformed format}{{}{{{}{} {4} { } {-1} {x} {{{{{{}}}}}}{{{{{}}}}}\" (\"success1\" \"success2\")) \"Malformed format}{}{success1success2 {4} { } {-1} {x} {{{}}}{{{}}}\")",0)
eval_tag(metta_example,3,"pragma!",'../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta',"!(pragma! compile full)",0)
eval_tag(metta_example,20,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta',"!(println! (fib 12))",0)
eval_tag(metta_example,22,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta',"!(println! (fib1 0 1 100 0))",0)
eval_tag(metta_example,24,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta',"!(println! (fib1 0 1 80 0))",0)
eval_tag(metta_example,26,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta',"!(println! (fib 80))",0)
eval_tag(metta_example,1,"sealed",'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"!(assertEqualToResult (sealed ($x) (sealed ($a $b) (quote (= ($a $x $c) ($b))))) ((quote (= ($a $x $c) ($b)))))  ",0)
eval_tag(metta_example,3,"sealed",'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"!(assertEqualToResult (sealed ($x $y) (quote (= ($y $z)))) ((quote (= ($y $z)))))",0)
eval_tag(metta_example,7,"sealed",'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"!(assertEqual (let (quote ($sv $st)) (sealed ($x) (quote ($x (output $x)))) ",0)
eval_tag(metta_example,12,"sealed",'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"(= (callsealer $a $b) (sealed () (quote ((* (+ 40 $a) (/ 100 $b))))))",0)
eval_tag(metta_example,19,"sealed",'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"(= (callsealer1 $a $b)  (sealed ($a) (quote ((* (+ 40 $a) (/ 100 $b))))))",0)
eval_tag(metta_example,26,"sealed",'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"(= (callsealer2 $a $b) (sealed ($a $b) (quote ((* (+ 40 $a) (/ 100 $b))))))",0)
eval_tag(metta_example,4,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose (a b c d)) (superpose (b c)))",0)
eval_tag(metta_example,11,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (subtraction (superpose (a b c d)) (superpose (b c))) (superpose (d)))",0)
eval_tag(metta_example,18,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose ((foo bar) (bar baz) qux)) (superpose ((bar baz) qux)))",0)
eval_tag(metta_example,25,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose (1 2 3 foo bar)) (superpose (2 foo)))",0)
eval_tag(metta_example,32,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose (a b b c d)) (superpose (b c)))",0)
eval_tag(metta_example,39,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (unique (subtraction (superpose (a b b c)) (superpose (b c c d))))",0)
eval_tag(metta_example,46,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (unique (superpose (a b b c))) (unique (superpose (b c c d))))",0)
eval_tag(metta_example,53,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose ($x $y)) (superpose (b)))",0)
eval_tag(metta_example,60,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose (a b c)) (superpose ()))",0)
eval_tag(metta_example,67,"subtraction",'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose ((foo $x) (bar $y))) (superpose ((bar $y) (foo qux))))",0)
eval_tag(metta_example,5,"collapse",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"    (collapse (unique (superpose $list))))",0)
eval_tag(metta_example,10,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose (a b b c c c d)))",0)
eval_tag(metta_example,17,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose (a b c d)))",0)
eval_tag(metta_example,24,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose (a)))",0)
eval_tag(metta_example,31,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ()))",0)
eval_tag(metta_example,38,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose (a a a a)))",0)
eval_tag(metta_example,45,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ((1 2) (1 2) (3 4))))",0)
eval_tag(metta_example,52,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose (1 \"hello\" 1 \"world\" \"hello\" 3.14 3.14)))",0)
eval_tag(metta_example,73,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ($x $y $x $z)))",0)
eval_tag(metta_example,80,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ((:: $x $y) (:: $x $z) (:: $x $y) (:: $a $b))))",0)
eval_tag(metta_example,87,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ((:: $x $y) (:: $x $y) (:: $x $z) (:: $x $y))))",0)
eval_tag(metta_example,94,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ((:: 1 $x) (:: $x \"hello\") (:: 1 $x) (:: $y $z) (:: $x \"hello\"))))",0)
eval_tag(metta_example,101,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ((:: $x (:: a b)) (:: $x (:: a b)) (:: (:: 1 $x) (:: 2 $y)) (:: (:: 1 $x) (:: 2 $y)))))",0)
eval_tag(metta_example,16,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta',"!(assertEqual (xor (mprogn (println! \"First\") True) (mprogn (println! \"Second\") False)) True)",0)
eval_tag(metta_example,17,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta',"!(assertEqual (xor (mprogn (println! \"First\") True) (mprogn (println! \"Second\") True)) False)",0)
eval_tag(metta_example,18,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta',"!(assertEqual (xor (mprogn (println! \"First\") False) (mprogn (println! \"Second\") True)) True)",0)
eval_tag(metta_example,19,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta',"!(assertEqual (xor (mprogn (println! \"First\") False) (mprogn (println! \"Second\") False)) False)",0)
eval_tag(metta_example,2,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"!(bind! &kb (new-space))",0)
eval_tag(metta_example,5,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"!(add-atom &kb (SS-P_AS A_AS B_AS))",0)
eval_tag(metta_example,6,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"!(add-atom &kb (SS-Q_AS A_AS C_AS))",0)
eval_tag(metta_example,12,"match",'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"  (match   &kb",0)
eval_tag(metta_example,20,"match",'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"   (match  &kb  ($rel A_AS $x) ($rel $x))",0)
eval_tag(metta_example,26,"case",'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"  (case",0)
eval_tag(metta_example,5,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"!(assertEqual (intersection (superpose (a b c d )) (superpose ( c d e f ))) (superpose (c d)))",0)
eval_tag(metta_example,12,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c d)) (superpose (b c)))",0)
eval_tag(metta_example,19,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (intersection (superpose (a b c d)) (superpose (b c))) (superpose (d)))",0)
eval_tag(metta_example,26,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((foo bar) (bar baz) qux)) (superpose ((bar baz) qux)))",0)
eval_tag(metta_example,33,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (1 2 3 foo bar)) (superpose (2 foo)))",0)
eval_tag(metta_example,39,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b b c d)) (superpose (b c)))",0)
eval_tag(metta_example,46,"unique",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (unique (intersection (superpose (a b b c)) (superpose (b c c d))))",0)
eval_tag(metta_example,53,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c)) (superpose ()))",0)
eval_tag(metta_example,60,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c)) (superpose (x y z)))",0)
eval_tag(metta_example,67,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c d)) (superpose (b c x y)))",0)
eval_tag(metta_example,74,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c d)) (superpose (a b c d)))",0)
eval_tag(metta_example,81,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c (a b c))) (superpose (a b c (a b c))))",0)
eval_tag(metta_example,88,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c d)) (superpose (c)))",0)
eval_tag(metta_example,95,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c d e f)) (superpose (b c d)))",0)
eval_tag(metta_example,102,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a (b c) d)) (superpose ((b c) e f)))",0)
eval_tag(metta_example,109,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((a b) (c d))) (superpose ()))",0)
eval_tag(metta_example,116,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (1 2 3 foo bar)) (superpose (3 foo baz)))",0)
eval_tag(metta_example,123,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((foo $x) (bar $y))) (superpose ((bar $y) (foo qux))))",0)
eval_tag(metta_example,130,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($x b c)) (superpose (b $y c)))",0)
eval_tag(metta_example,137,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (($x b) (c d))) (superpose ((a $y) (c d))))",0)
eval_tag(metta_example,144,"pred-intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (pred-intersection unified (superpose (($x (+ 1 2)) (3 4))) (superpose ((3 $y) (4 (+ 1 2)))))",0)
eval_tag(metta_example,151,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((foo (+ 1 2)) (bar $y))) (superpose ((foo 3) (bar baz))))",0)
eval_tag(metta_example,158,"pred-intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (pred-intersection unified (superpose ((foo (+ 1 2)) (bar $y))) (superpose ((foo 3) (bar baz))))",0)
eval_tag(metta_example,165,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (($x b) (+ 2 2))) (superpose ((a $y) 4)))",0)
eval_tag(metta_example,173,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($x (f $x))) (superpose ((f (f $x)))))",0)
eval_tag(metta_example,180,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($y (f $x))) (superpose ($a (f $b))))",0)
eval_tag(metta_example,187,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((f $x) $y )) (superpose ((f $b) $a )))",0)
eval_tag(metta_example,193,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((f $x) $x )) (superpose ((f $a) $a )))",0)
eval_tag(metta_example,199,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($x (f $x) )) (superpose ($a (f $a))))",0)
eval_tag(metta_example,206,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($y (f $x))) (superpose ($x (f $x))))",0)
eval_tag(metta_example,213,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($x (f $y))) (superpose ((f $y) $x)))",0)
eval_tag(metta_example,220,"collapse",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"; (= (intersection $x $y) (superpose (intersect-elements (collapse $x) (collapse $y))))",0)
eval_tag(metta_example,223,"collapse",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"(= (intersect-elements $x $y) (collapse (intersection (superpose $x) (superpose $y))))",0)
eval_tag(metta_example,228,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"!(bind! &ctx1 (make-space (f1 f2 f3)))",0)
eval_tag(metta_example,229,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"!(bind! &ctx2 (make-space (f1 f2 f3 f4 f5)))",0)
eval_tag(metta_example,230,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"(intersection (get-atoms &ctx1) (get-atoms &ctx2)) ",0)
eval_tag(metta_example,232,"get-atoms",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"!(get-atoms &ctx1) -> 1 2 3 4 5 6 7 ... .. ... ",0)
eval_tag(metta_example,233,"get-atoms",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"!(get-atoms &ctx2) -> 1 2 3 4 5 6 7 ... .. ... ",0)
eval_tag(metta_example,235,"collapse",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"(= (intersection $x $y) (superpose (intersection-element (collapse $x) (collapse $y))))",0)
eval_tag(metta_example,237,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"(intersection (get-atoms &ctx1) (get-atoms &ctx2)) ",0)
eval_tag(metta_example,45,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"   (let* (((: $ructor (-> $premise $conclusion)) ($rb))",0)
eval_tag(metta_example,51,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))",0)
eval_tag(metta_example,58,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $conclusion)) ($rb))",0)
eval_tag(metta_example,66,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $conclusion)) ($rb))",0)
eval_tag(metta_example,75,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $premise5 $conclusion)) ($rb))",0)
eval_tag(metta_example,110,"car-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"\t  (car-atom $a) ",0)
eval_tag(metta_example,111,"car-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"\t  (let $t (cdr-atom $a) (superpose ((car-atom $a) (first-few (- $n 1) $t)))))))",0)
eval_tag(metta_example,120,"limit",'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"!(assertEqualToResult (limit 6 (synthesize (: $term $type) kb rb (S Z))) ((: a A) (: a B) (: abc (Implication (AndLink A B) C)) ",0)
eval_tag(metta_example,6,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (foo) Error Error) (1 2))",0)
eval_tag(metta_example,10,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (throw Error) Error \"An exception was caught\") (\"An exception was caught\"))",0)
eval_tag(metta_example,14,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (catch (throw Error) Error \"Error level 2\") Error \"Error level 1\") (\"Error level 2\"))",0)
eval_tag(metta_example,15,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (catch (throw Error1) Error2 \"Error level 2\") Error1 \"Error level 1\") (\"Error level 1\"))",0)
eval_tag(metta_example,19,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (catch (throw Error2) Error2 (throw Error1)) Error1 \"Error level 1\") (\"Error level 1\"))",0)
eval_tag(metta_example,26,"throw",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"(= (bar) (throw Error))",0)
eval_tag(metta_example,29,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (bar) Error \"An exception was caught\") (1 2 \"An exception was caught\"))",0)
eval_tag(metta_example,33,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (throw (Error \"This is an error message\")) (Error $message) $message) (\"This is an error message\"))",0)
eval_tag(metta_example,35,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',";; catcher (catch arg2) not evaluated",0)
eval_tag(metta_example,37,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (catch (throw 3) (+ 1 2) \"Error level 2\") 3 \"Error level 1\") (\"Error level 1\"))",0)
eval_tag(metta_example,39,"throw",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',";; exception (throw arg) is evaluated",0)
eval_tag(metta_example,41,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (catch (throw (+ 1 2)) (+ 1 2) \"Error level 2\") 3 \"Error level 1\") (\"Error level 1\"))",0)
eval_tag(metta_example,43,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',";; recover (catch arg3) is evaluated if exception is caught",0)
eval_tag(metta_example,45,"catch",'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (throw (Error 2)) (Error $x) (+ $x 1)) (3))",0)
eval_tag(metta_example,12,"chain",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval (get-metatype $atom)) $type",0)
eval_tag(metta_example,19,"chain",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"    (chain (decons $atom) $list",0)
eval_tag(metta_example,24,"if-equal",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (eval (if-equal $atom Empty $then $else)))",0)
eval_tag(metta_example,28,"if-equal",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"    (eval (if-equal $head Error $then $else))",0)
eval_tag(metta_example,31,"return",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"(= (return-on-error $atom $then)",0)
eval_tag(metta_example,41,"switch",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"(= (switch $atom $cases)",0)
eval_tag(metta_example,44,"switch",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"(= (switch-internal $atom (($pattern $template) $tail))",0)
eval_tag(metta_example,48,"match",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (match $atom $var $templ",0)
eval_tag(metta_example,53,"chain",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval $atom) $res",0)
eval_tag(metta_example,60,"chain",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval (get-type $atom $space)) $actual-type",0)
eval_tag(metta_example,69,"chain",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval (get-metatype $type)) $meta",0)
eval_tag(metta_example,78,"chain",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval (get-metatype $atom)) $meta",0)
eval_tag(metta_example,91,"chain",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"    (chain (eval (get-type $op $space)) $op-type",0)
eval_tag(metta_example,98,"type-cast",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"    (eval (type-cast $atom $type $space)) )))",0)
eval_tag(metta_example,102,"chain",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"    (chain (eval (interpret $op $type $space)) $reduced-op",0)
eval_tag(metta_example,112,"match",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (match $args ()",0)
eval_tag(metta_example,121,"return",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"            (eval (return-on-error $reduced-head",0)
eval_tag(metta_example,130,"cons",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"      (cons $head $reduced-tail) ))))",0)
eval_tag(metta_example,136,"chain",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"      (chain (eval (interpret $head %Undefined% $space)) $rhead",0)
eval_tag(metta_example,142,"chain",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval $atom) $result",0)
eval_tag(metta_example,20,"case",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"(case (+ 1 5)",0)
eval_tag(metta_example,29,"case",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta'," (case (+ 1 5)",0)
eval_tag(metta_example,37,"case",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"    (case 5",0)
eval_tag(metta_example,44,"case",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta'," (case (+ 1 (superpose (1 2 3)))",0)
eval_tag(metta_example,52,"case",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"  (case (+ 1 (superpose (1 2 3)))",0)
eval_tag(metta_example,58,"collapse",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"!(assertEqualToResult (collapse (superpose ())) (()))",0)
eval_tag(metta_example,62,"collapse",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"!(assertEqualToResult (collapse (superpose ((nop 1)))) (()))",0)
eval_tag(metta_example,69,"match",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"!(match &self $1 $1)",0)
eval_tag(metta_example,71,"get-atoms",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"!(get-atoms &self)",0)
eval_tag(metta_example,74,"match",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"!(assertEqual (match &self $1 $1)  (get-atoms &self))",0)
eval_tag(metta_example,80,"match",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"  (match &self",0)
eval_tag(metta_example,94,"match",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"   (match &self ($rel A $x) ($rel $x))",0)
eval_tag(metta_example,101,"case",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"  (case",0)
eval_tag(metta_example,109,"case",'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"  (case",0)
eval_tag(metta_example,1,"new-state",'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(bind! &evaluated (new-state False))",0)
eval_tag(metta_example,4,"change-state!",'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"   ((change-state! &evaluated True) True))",0)
eval_tag(metta_example,16,"new-state",'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(bind! &evaluated (new-state False))",0)
eval_tag(metta_example,18,"get-state",'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(assertEqual (get-state &evaluated) True)",0)
eval_tag(metta_example,43,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(assertEqualToResult (or (mprogn (println! \"First\") True) (mprogn (println! \"Second\") False)) (True))",0)
eval_tag(metta_example,44,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(assertEqualToResult (or (mprogn (println! \"First\") True) (mprogn (println! \"Second\") True)) (True))",0)
eval_tag(metta_example,45,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(assertEqualToResult (or (mprogn (println! \"First\") False) (mprogn (println! \"Second\") True)) (True))",0)
eval_tag(metta_example,46,"print",'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(assertEqualToResult (or (mprogn (println! \"First\") False) (mprogn (println! \"Second\") False)) (False))",0)
eval_tag(metta_example,27,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space1 (new-space))",0)
eval_tag(metta_example,28,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space2 (new-space))",0)
eval_tag(metta_example,29,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space1 (superpose ((= (foo $x $y) (+ $x $y)) (foo 1 2) (foo 3 4) (foo $x 10) (foo $x $x) (foo (foo 1 2) 3))))",0)
eval_tag(metta_example,30,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space2 (superpose ((= (foo $a $b) (+ $a $b)) (foo 1 2) (foo 5 6) (foo 5 10) (foo 9 9) (foo (foo 1 2) 3))))",0)
eval_tag(metta_example,32,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space1) (get-atoms &space2))",0)
eval_tag(metta_example,38,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space3 (new-space))",0)
eval_tag(metta_example,39,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space3 (superpose ((foo 7 8))))",0)
eval_tag(metta_example,41,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space1) (get-atoms &space3))",0)
eval_tag(metta_example,47,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space4 (new-space))",0)
eval_tag(metta_example,48,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space4 (superpose ((foo 1 2) (foo 3 4) (foo $m $n))))",0)
eval_tag(metta_example,50,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space1) (get-atoms &space4))",0)
eval_tag(metta_example,56,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space5 (new-space))",0)
eval_tag(metta_example,57,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space5 (superpose ((foo (foo 1 2) 3) (foo (foo 3 4) 7) (foo $p $q))))",0)
eval_tag(metta_example,59,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space4) (get-atoms &space5))",0)
eval_tag(metta_example,65,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space6 (new-space))",0)
eval_tag(metta_example,66,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space6 (superpose ((foo (foo 1 2) 3) (foo 7 7) (foo (foo $r 2) 3))))",0)
eval_tag(metta_example,68,"pred-intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (pred-intersection unified (get-atoms &space4) (get-atoms &space6))",0)
eval_tag(metta_example,74,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space7 (new-space))",0)
eval_tag(metta_example,75,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space7 (superpose ((foo $x $x) (foo 7 7) (foo (foo 1 2) 3))))",0)
eval_tag(metta_example,77,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space6) (get-atoms &space7))",0)
eval_tag(metta_example,84,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space7) (get-atoms &space6))",0)
eval_tag(metta_example,90,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space8 (new-space))",0)
eval_tag(metta_example,91,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space9 (new-space))",0)
eval_tag(metta_example,92,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space8 (superpose ((foo $a $b) (foo 3 $c))))",0)
eval_tag(metta_example,93,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space9 (superpose ((foo $y $z) (foo 3 $d))))",0)
eval_tag(metta_example,95,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space8) (get-atoms &space9))",0)
eval_tag(metta_example,102,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space1) (get-atoms &space8))",0)
eval_tag(metta_example,109,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space4) (get-atoms &space8))",0)
eval_tag(metta_example,115,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space10 (new-space))",0)
eval_tag(metta_example,116,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space10 (superpose ((foo (foo 1 2) 3))))",0)
eval_tag(metta_example,118,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space10) (get-atoms &space2))",0)
eval_tag(metta_example,124,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space11 (new-space))",0)
eval_tag(metta_example,125,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space12 (new-space))",0)
eval_tag(metta_example,126,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space11 (superpose ((foo $x $x))))",0)
eval_tag(metta_example,127,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space12 (superpose ((foo $y $y))))",0)
eval_tag(metta_example,129,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space11) (get-atoms &space12))",0)
eval_tag(metta_example,136,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space21 (new-space))",0)
eval_tag(metta_example,137,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space21 (superpose ((foo 1 2) (foo 3 4) (foo 5 6))))",0)
eval_tag(metta_example,141,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space21) (superpose ((foo 1 2) (foo 7 8))))",0)
eval_tag(metta_example,147,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space22 (new-space))",0)
eval_tag(metta_example,148,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space22 (superpose ((foo $x 10) (foo 3 4) (foo $y $y))))",0)
eval_tag(metta_example,152,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space22) (superpose ((foo 5 10) (foo 3 $z))))",0)
eval_tag(metta_example,158,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space23 (new-space))",0)
eval_tag(metta_example,159,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space23 (superpose ((foo $a $b) (foo 3 4) (foo $c $c))))",0)
eval_tag(metta_example,163,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space23) (superpose ((foo $x $y) (foo 3 4))))",0)
eval_tag(metta_example,169,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space24 (new-space))",0)
eval_tag(metta_example,170,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space24 (superpose ((foo 7 7) (foo (foo 1 2) 3) (foo $z $z))))",0)
eval_tag(metta_example,174,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space24) (superpose ((foo 7 7))))",0)
eval_tag(metta_example,180,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space25 (new-space))",0)
eval_tag(metta_example,181,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space25 (superpose ((foo (foo 3 4) 7) (foo $p $p) (foo 5 5))))",0)
eval_tag(metta_example,185,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space25) (superpose ((foo 5 5) (foo 7 8))))",0)
eval_tag(metta_example,191,"bind!",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space26 (new-space))",0)
eval_tag(metta_example,192,"add-atom",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space26 (superpose ((foo (foo 1 2) 3) (foo $x $y) (foo (foo 3 4) 7))))",0)
eval_tag(metta_example,196,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space26) (superpose ((foo (foo 1 2) 3))))",0)
eval_tag(metta_example,5,"flip",'../../tests/baseline_compat/hyperon-mettalog_sanity/flip_test.metta',"    (if (flip)",0)
eval_tag(metta_example,13,"flip",'../../tests/baseline_compat/hyperon-mettalog_sanity/flip_test.metta',"    (if (flip)",0)
eval_tag(metta_example,4,"repr",'../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta',";!(assertEqualToResults (repr atoma_tag) \"atoma_tag\")",0)
eval_tag(metta_example,5,"parse",'../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta',";!(assertEqualToResults (parse \"x_string_tag\") x_string_tag)",0)
eval_tag(metta_example,8,"intersection",'../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta',"; !(intersection (superpose (a b c d )) (superpose ( c d e f )))",0)
eval_tag(metta_example,11,"union",'../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta',"; !(union (superpose (a b c d )) (superpose ( c d e f )))",0)
eval_tag(metta_example,12,"union",'../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta',"!(assertEqualToResults (union (superpose (a b c d )) (superpose ( c d e f ))) (a b c d e f))",0)
eval_tag(metta_example,4,"case",'../../tests/baseline_compat/hyperon-mettalog_sanity/01_lang_inc.metta',"    (case $x",0)
eval_tag(metta_example,14,"get-type",'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(get-type insert)",0)
eval_tag(metta_example,16,"cons",'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"(= (insert $x Nil) (Cons $x Nil))",0)
eval_tag(metta_example,17,"cons",'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"(= (insert $x (Cons $head $tail))",0)
eval_tag(metta_example,22,"cons",'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(assertEqual (insert 2 (insert 1 Nil)) (Cons 1 (Cons 2 Nil)))",0)
eval_tag(metta_example,24,"cons",'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(assertEqual  (Cons 1 Nil)  (Cons 1 Nil))",0)
eval_tag(metta_example,26,"cons",'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(assertEqual  (insert 1 Nil)  (Cons 1 Nil))",0)
eval_tag(metta_example,30,"cons",'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(assertEqual (insert 1 (insert 2 Nil)) (Cons 1 (Cons 2 Nil)))",0)
eval_tag(metta_example,32,"cons",'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(assertEqual (insert 3 (insert 2 (insert 1 Nil))) (Cons 1 (Cons 2 (Cons 3 Nil))))",0)
eval_tag(metta_example,5,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/is_space.metta',"   (let* (($type (get-type $atom)) ($space (get-type &self))) (== $type $space)))",0)
eval_tag(metta_example,6,"get-atoms",'../../tests/baseline_compat/quick/f1_imports.metta',"; Even at the very beginning of the main script `(get-atoms &self)`",0)
eval_tag(metta_example,10,"get-atoms",'../../tests/baseline_compat/quick/f1_imports.metta',";;!(get-atoms &self)",0)
eval_tag(metta_example,11,"get-type",'../../tests/baseline_compat/quick/f1_imports.metta',";;!(get-type (get-atoms &self))",0)
eval_tag(metta_example,12,"get-type",'../../tests/baseline_compat/quick/f1_imports.metta',"!(get-type &self)",0)
eval_tag(metta_example,15,"get-type",'../../tests/baseline_compat/quick/f1_imports.metta',"  ((let $x (get-atoms &self) (get-type $x)))",0)
eval_tag(metta_example,16,"get-type",'../../tests/baseline_compat/quick/f1_imports.metta',"  ((get-type &self)))",0)
eval_tag(metta_example,27,"import!",'../../tests/baseline_compat/quick/f1_imports.metta',"!(import! &m f1_moduleA.metta)",0)
eval_tag(metta_example,31,"let*",'../../tests/baseline_compat/quick/f1_imports.metta',";  (let* (($x (collapse (get-atoms &m)))",0)
eval_tag(metta_example,34,"get-type",'../../tests/baseline_compat/quick/f1_imports.metta',";  (get-type &self))",0)
eval_tag(metta_example,54,"match",'../../tests/baseline_compat/quick/f1_imports.metta',"  (match &m (= (f 2) $x) $x)",0)
eval_tag(metta_example,60,"import!",'../../tests/baseline_compat/quick/f1_imports.metta',"!(import! &self f1_moduleA.metta)",0)
eval_tag(metta_example,68,"&self",'../../tests/baseline_compat/quick/f1_imports.metta',"; MeTTLog:  xlisting('&self').",0)
eval_tag(metta_example,76,"let*",'../../tests/baseline_compat/quick/f1_imports.metta',"  (let* (($a (collapse (get-atoms &self)))",0)
eval_tag(metta_example,85,"let*",'../../tests/baseline_compat/quick/f1_imports.metta',"  (== (let* (($x (collapse (get-atoms &m)))",0)
eval_tag(metta_example,100,"import!",'../../tests/baseline_compat/quick/f1_imports.metta',"!(import! &self f1_moduleB.metta)",0)
eval_tag(metta_example,115,"import!",'../../tests/baseline_compat/quick/f1_imports.metta',"!(import! &self ../hyperon-experimental_scripts/f1_moduleB.metta)",0)
eval_tag(metta_example,12,"get-type",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (curry +))",0)
eval_tag(metta_example,15,"get-type",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type ((curry +) 2))",0)
eval_tag(metta_example,37,"get-type",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (curry-a + 2))",0)
eval_tag(metta_example,40,"get-type",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type ((curry-a + 2) 3))",0)
eval_tag(metta_example,44,"get-type",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type ((curry-a + 2) \"S\"))",0)
eval_tag(metta_example,103,"get-type",'../../tests/baseline_compat/quick/d2_higherfunc.metta',";   (get-type (lambda ($x $y) (+ $x $y)))",0)
eval_tag(metta_example,155,"get-type",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 1) (Left 5)))",0)
eval_tag(metta_example,169,"get-type",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (Left \"5\")))",0)
eval_tag(metta_example,172,"get-type",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (UntypedC \"5\")))",0)
eval_tag(metta_example,175,"get-type",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (UntypedC (Null) 5)))",0)
eval_tag(metta_example,197,"cons",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"(= (fmap-i $f (Cons $x $xs))",0)
eval_tag(metta_example,203,"cons",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (fmap-i (curry-a * 2) (Cons 3 (Cons 4 Nil)))",0)
eval_tag(metta_example,204,"cons",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (Cons 6 (Cons 8 Nil)))",0)
eval_tag(metta_example,223,"cons",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"(= (insert $x Nil) (Cons $x Nil))",0)
eval_tag(metta_example,224,"cons",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"(= (insert $x (Cons $head $tail))",0)
eval_tag(metta_example,231,"cons",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"(= (sort (Cons $head $tail)) (insert $head (sort $tail)))",0)
eval_tag(metta_example,234,"cons",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (Cons 1 (Cons 2 (Cons 3 Nil))))",0)
eval_tag(metta_example,236,"cons",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (sort (Cons 3 (Cons 1 (Cons 2 Nil))))",0)
eval_tag(metta_example,237,"cons",'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (Cons 1 (Cons 2 (Cons 3 Nil))))",0)
eval_tag(metta_example,5,"import!",'../../tests/baseline_compat/quick/f1_moduleB.metta',"!(import! &self f1_moduleC.metta)",0)
eval_tag(metta_example,7,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type 5)",0)
eval_tag(metta_example,10,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (+ 5 7))",0)
eval_tag(metta_example,15,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type +)",0)
eval_tag(metta_example,21,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (+ 5 \"4\"))",0)
eval_tag(metta_example,24,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (+ -))",0)
eval_tag(metta_example,30,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type Either)",0)
eval_tag(metta_example,41,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (Left 5))",0)
eval_tag(metta_example,49,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (isLeft (Right 5)))",0)
eval_tag(metta_example,54,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (isLeft 5))",0)
eval_tag(metta_example,66,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (LeftP 5))",0)
eval_tag(metta_example,73,"get-type",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (pair (LeftP 5) \"String\"))",0)
eval_tag(metta_example,85,"cons",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (Cons 5 (Cons 6 Nil)))",0)
eval_tag(metta_example,88,"cons",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (Cons 5 (Cons \"6\" Nil)))",0)
eval_tag(metta_example,96,"cons",'../../tests/baseline_compat/quick/d1_gadt.metta',"  (let (List $t) (get-type (Cons 5 (Cons 6 Nil)))",0)
eval_tag(metta_example,10,"function",'../../tests/baseline_compat/quick/d4_type_prop.metta',"; Predicates (functions) from `Entity` to `Type`",0)
eval_tag(metta_example,18,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (Mortal Plato))",0)
eval_tag(metta_example,40,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (HumansAreMortal SocratesIsHuman))",0)
eval_tag(metta_example,44,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (HumansAreMortal (Human Socrates)))",0)
eval_tag(metta_example,57,"remove-atom",'../../tests/baseline_compat/quick/d4_type_prop.metta',"(nop (remove-atom &self (: = (-> Atom Atom Atom))))",0)
eval_tag(metta_example,58,"remove-atom",'../../tests/baseline_compat/quick/d4_type_prop.metta',"(nop (remove-atom &corlib (: = (-> Atom Atom Atom))))",0)
eval_tag(metta_example,61,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"!(\"sameTypes\" (get-type SocratesIsMortal) (get-type (HumansAreMortal SocratesIsHuman)))",0)
eval_tag(metta_example,63,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (= SocratesIsMortal (HumansAreMortal SocratesIsHuman)))",0)
eval_tag(metta_example,67,"&self",'../../tests/baseline_compat/quick/d4_type_prop.metta',"; it doesn't mean that the equality itself is true (an inhabited type).",0)
eval_tag(metta_example,69,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"!(\"sameTypes\" (get-type (Mortal Socrates)) (get-type (Mortal Plato)))",0)
eval_tag(metta_example,71,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (= (Mortal Socrates) (Mortal Plato)))",0)
eval_tag(metta_example,75,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsMortal) (get-type (HumansAreMortal PlatoIsHuman)))",0)
eval_tag(metta_example,78,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (= SocratesIsMortal (HumansAreMortal PlatoIsHuman)))",0)
eval_tag(metta_example,82,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsHuman) !(get-type PlatoIsHuman))",0)
eval_tag(metta_example,85,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (= SocratesIsHuman PlatoIsHuman))",0)
eval_tag(metta_example,88,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsHuman) (get-type SocratesIsMortal))",0)
eval_tag(metta_example,90,"get-type",'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (= SocratesIsHuman SocratesIsMortal))",0)
eval_tag(metta_example,122,"match",'../../tests/baseline_compat/quick/d4_type_prop.metta',"   (match &self (: $x $type) T))",0)
eval_tag(metta_example,134,"match",'../../tests/baseline_compat/quick/d4_type_prop.metta',"   (match &self (: $impl (-> $cause $type))",0)
eval_tag(metta_example,5,"import!",'../../tests/baseline_compat/quick/f1_moduleA.metta',"!(import! &self f1_moduleC.metta)",0)
eval_tag(metta_example,45,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta',"   (let* (((: $ructor (-> $premise $conclusion)) ($rb))",0)
eval_tag(metta_example,51,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))",0)
eval_tag(metta_example,58,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $conclusion)) ($rb))",0)
eval_tag(metta_example,66,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $conclusion)) ($rb))",0)
eval_tag(metta_example,75,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $premise5 $conclusion)) ($rb))",0)
eval_tag(metta_example,40,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/synthesize.metta',"   (let* (((: $ructor (-> $premise $conclusion)) ($rb))",0)
eval_tag(metta_example,46,"let*",'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/synthesize.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))",0)
eval_tag(metta_example,1,"pragma!",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_116378.metta',"!(pragma! time debug)",0)
eval_tag(metta_example,2,"import!",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_116378.metta',"!(import! &hald116378 hald_spo_116378)",0)
eval_tag(metta_example,3,"match",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_116378.metta',";!(match &hald116378 (Doxorubicin $p $o) (Doxorubicin $p $o))",0)
eval_tag(metta_example,5,"number-of",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_116378.metta',";!(assertEqualToResult (number-of (match &hald116378 (Doxorubicin $p $o) (Doxorubicin $p $o))) (96))",0)
eval_tag(metta_example,7,"match",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_116378.metta',"  (match &hald116378 (Doxorubicin $p $o) (Doxorubicin $p $o))",0)
eval_tag(metta_example,10,"cons",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/hald_spo_100.metta',"(Constipation associated Sarcopenia)",0)
eval_tag(metta_example,1,"pragma!",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_5000.metta',"!(pragma! time debug)",0)
eval_tag(metta_example,2,"import!",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_5000.metta',"!(import! &hald5000 hald_spo_5000)",0)
eval_tag(metta_example,4,"match",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_5000.metta',"   (match &hald5000 (Doxorubicin $p $o) (Doxorubicin $p $o))",0)
eval_tag(metta_example,1,"import!",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_1000.metta',"!(import! &hald1000 hald_spo_1000.metta)",0)
eval_tag(metta_example,2,"match",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_1000.metta',"!(assertEqualToResult (match &hald1000 (Doxorubicin $p $o) (Doxorubicin $p $o)) ",0)
eval_tag(metta_example,1,"import!",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_100.metta',"!(import! &hald100 hald_spo_100.metta)",0)
eval_tag(metta_example,3,"match",'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_100.metta',"    (match &hald100 (Doxorubicin $p $o) (Doxorubicin $p $o))",0)
eval_tag(metta_tag_std_lib,18,"cons",'../canary/stdlib_mettalog.metta',";(: cons (-> Atom Atom Atom))",0)
eval_tag(metta_tag_std_lib,19,"decons",'../canary/stdlib_mettalog.metta',";(: decons (-> Atom Atom))",0)
eval_tag(metta_tag_std_lib,21,"return",'../canary/stdlib_mettalog.metta',"(: return (-> Atom ReturnType))",0)
eval_tag(metta_tag_std_lib,22,"switch",'../canary/stdlib_mettalog.metta',"(: switch (-> %Undefined% Expression Atom))",0)
eval_tag(metta_tag_std_lib,23,"unify",'../canary/stdlib_mettalog.metta',"(: unify (-> Atom Atom Atom Atom %Undefined%))",0)
eval_tag(metta_tag_std_lib,27,"function-arity",'../canary/stdlib_mettalog.metta',"(: function-arity (-> Symbol Number))",0)
eval_tag(metta_tag_std_lib,28,"predicate-arity",'../canary/stdlib_mettalog.metta',"(: predicate-arity (-> Symbol Number))",0)
eval_tag(metta_tag_std_lib,29,"pragma!",'../canary/stdlib_mettalog.metta',"(: pragma! (-> Atom Atom (->)))",0)
eval_tag(metta_tag_std_lib,31,"match",'../canary/stdlib_mettalog.metta',"(: match (-> hyperon::space::DynSpace Atom Atom %Undefined%))",0)
eval_tag(metta_tag_std_lib,32,"case",'../canary/stdlib_mettalog.metta',"(: case (-> Expression Atom Atom))",0)
eval_tag(metta_tag_std_lib,34,"import!",'../canary/stdlib_mettalog.metta',"(: import! (-> hyperon::space::DynSpace Atom (->)))",0)
eval_tag(metta_tag_std_lib,35,"get-type",'../canary/stdlib_mettalog.metta',"(: get-type (-> Atom Type))",0)
eval_tag(metta_tag_std_lib,76,"return",'../canary/stdlib_mettalog.metta',"(@doc return\n  (@desc \"Returns value from the (function ...) expression\")\n  (@params (\n    (@param \"Value to be returned\")))\n  (@return \"Passed argument\"))",0)
eval_tag(metta_tag_std_lib,81,"return",'../canary/stdlib_mettalog.metta',"(: return (-> $t $t))",0)
eval_tag(metta_tag_std_lib,85,"function",'../canary/stdlib_mettalog.metta',"(@doc function\n  (@desc \"Evaluates the argument until it becomes (return <result>). Then (function (return <result>)) is reduced to the <result>.\")\n  (@params (\n    (@param \"Atom to be evaluated\")))\n  (@return \"Result of atom's evaluation\"))",0)
eval_tag(metta_tag_std_lib,90,"function",'../canary/stdlib_mettalog.metta',"(: function (-> Atom Atom))",0)
eval_tag(metta_tag_std_lib,103,"chain",'../canary/stdlib_mettalog.metta',"(@doc chain\n  (@desc \"Evaluates first argument, binds it to the variable (second argument) and then evaluates third argument which contains (or not) mentioned variable\")\n  (@params (\n    (@param \"Atom to be evaluated\")\n    (@param \"Variable\")\n    (@param \"Atom which will be evaluated at the end\")))\n  (@return \"Result of evaluating third input argument\"))",0)
eval_tag(metta_tag_std_lib,110,"chain",'../canary/stdlib_mettalog.metta',"(: chain (-> Atom Variable Atom Atom))",0)
eval_tag(metta_tag_std_lib,114,"if-unify",'../canary/stdlib_mettalog.metta',"(@doc if-unify\n  (@desc \"Matches two first arguments and returns third argument if they are matched and forth argument otherwise\")\n  (@params (\n\t(@param \"First atom to unify with\")\n\t(@param \"Second atom to unify with\")\n\t(@param \"Result if two atoms unified successfully\")\n\t(@param \"Result otherwise\")))\n  (@return \"Third argument when first two atoms are unifiable or forth one otherwise\"))",0)
eval_tag(metta_tag_std_lib,122,"if-unify",'../canary/stdlib_mettalog.metta',"(: if-unify (-> Atom Atom Atom Atom %Undefined%))",0)
eval_tag(metta_tag_std_lib,136,"cons",'../canary/stdlib_mettalog.metta',"(@doc cons-atom\n  (@desc \"Constructs an expression using two arguments\")\n  (@params (\n    (@param \"Head of an expression\")\n    (@param \"Tail of an expression\")))\n  (@return \"New expression consists of two input arguments\"))",0)
eval_tag(metta_tag_std_lib,142,"cons-atom",'../canary/stdlib_mettalog.metta',"(: cons-atom (-> Atom Expression Expression))",0)
eval_tag(metta_tag_std_lib,144,"cons",'../canary/stdlib_mettalog.metta',"; AKA? (: cons (-> Atom Atom Atom))",0)
eval_tag(metta_tag_std_lib,147,"decons-atom",'../canary/stdlib_mettalog.metta',"(@doc decons-atom\n  (@desc \"Works as a reverse to cons-atom function. It gets Expression as an input and returns it splitted to head and tail, e.g. (decons-atom (Cons X Nil)) -> (Cons (X Nil))\")\n  (@params (\n    (@param \"Expression\")))\n  (@return \"Deconsed expression\"))",0)
eval_tag(metta_tag_std_lib,152,"decons-atom",'../canary/stdlib_mettalog.metta',"(: decons-atom (-> Expression Expression))",0)
eval_tag(metta_tag_std_lib,154,"decons",'../canary/stdlib_mettalog.metta',"; AKA? (: decons (-> Atom Atom))",0)
eval_tag(metta_tag_std_lib,157,"collapse-bind",'../canary/stdlib_mettalog.metta',"(@doc collapse-bind\n  (@desc \"Evaluates the Atom (first argument) and returns an expression which contains all alternative evaluations in a form (Atom Bindings). Bindings are represented in a form of a grounded atom.\")\n  (@params (\n    (@param \"Atom to be evaluated\")))\n  (@return \"All alternative evaluations\"))",0)
eval_tag(metta_tag_std_lib,163,"collapse-bind",'../canary/stdlib_mettalog.metta',"(: collapse-bind (-> Atom Atom)) ; We specialize but leaving the old defs in case",0)
eval_tag(metta_tag_std_lib,164,"collapse-bind",'../canary/stdlib_mettalog.metta',"(: collapse-bind (-> Atom Expression))",0)
eval_tag(metta_tag_std_lib,168,"superpose-bind",'../canary/stdlib_mettalog.metta',"(@doc superpose-bind\n  (@desc \"Complement to the collapse-bind. It takes result of collapse-bind (first argument) and returns only result atoms without bindings\")\n  (@params (\n    (@param \"Expression in form (Atom Binding)\")))\n  (@return \"Non-deterministic list of Atoms\"))",0)
eval_tag(metta_tag_std_lib,174,"superpose-bind",'../canary/stdlib_mettalog.metta',"(: superpose-bind (-> Expression Atom))",0)
eval_tag(metta_tag_std_lib,175,"superpose-bind",'../canary/stdlib_mettalog.metta',"(: superpose-bind (-> Atom Atom)) ; We specialize them but leaving the old defs in case",0)
eval_tag(metta_tag_std_lib,251,"return",'../canary/stdlib_mettalog.metta',"(@doc return-on-error\n  (@desc \"Returns first argument if it is Empty or an error. Returns second argument otherwise.\")\n  (@params (\n    (@param \"Previous evaluation result\")\n    (@param \"Atom for further evaluation\")))\n  (@return \"Return previous result if it is an error or Empty or continue evaluation\"))",0)
eval_tag(metta_tag_std_lib,274,"switch",'../canary/stdlib_mettalog.metta',"(@doc switch\n  (@desc \"Subsequently tests multiple pattern-matching conditions (second argument) for the given value (first argument)\")\n  (@params (\n    (@param \"Atom to be matched with patterns\")\n    (@param \"Tuple of pairs mapping condition patterns to results\")))\n  (@return \"Result which corresponds to the pattern which is matched with the passed atom first\"))",0)
eval_tag(metta_tag_std_lib,282,"switch",'../canary/stdlib_mettalog.metta',"(: switch (-> Atom Atom Atom))",0)
eval_tag(metta_tag_std_lib,290,"switch",'../canary/stdlib_mettalog.metta',"(: switch (-> %Undefined% Expression Atom))",0)
eval_tag(metta_tag_std_lib,297,"switch",'../canary/stdlib_mettalog.metta',"(@doc switch-internal\n  (@desc \"This function is being called inside switch function to test one of the cases and it calls switch once again if current condition is not met\")\n  (@params (\n    (@param \"Atom (it will be evaluated)\")\n    (@param \"Deconsed tuple of pairs mapping condition patterns to results\")))\n  (@return \"Result of evaluating of Atom bound to met condition\"))",0)
eval_tag(metta_tag_std_lib,336,"type-cast",'../canary/stdlib_mettalog.metta',"(@doc type-cast\n  (@desc \"Casts atom passed as a first argument to the type passed as a second argument using space as a context\")\n  (@params (\n    (@param \"Atom to be casted\")\n    (@param \"Type to cast atom to\")\n    (@param \"Context atomspace\")))\n  (@return \"Atom if casting is successful, (Error ... BadType) otherwise\"))",0)
eval_tag(metta_tag_std_lib,343,"type-cast",'../canary/stdlib_mettalog.metta',"(: type-cast (-> Atom Atom Atom Atom))",0)
eval_tag(metta_tag_std_lib,357,"match",'../canary/stdlib_mettalog.metta',"(@doc match-types\n  (@desc \"Checks if two types can be unified and returns third argument if so, fourth - otherwise\")\n  (@params (\n    (@param \"First type\")\n    (@param \"Second type\")\n    (@param \"Atom to be returned if types can be unified\")\n    (@param \"Atom to be returned if types cannot be unified\")))\n  (@return \"Third or fourth argument\"))",0)
eval_tag(metta_tag_std_lib,390,"match",'../canary/stdlib_mettalog.metta',"(@doc match-type-or\n  (@desc \"Checks if two types (second and third arguments) can be unified and returns result of OR operation between first argument and type checking result\")\n  (@params (\n    (@param \"Boolean value\")\n    (@param \"First type\")\n    (@param \"Second type\")))\n  (@return \"True or False\"))",0)
eval_tag(metta_tag_std_lib,403,"filter-atom",'../canary/stdlib_mettalog.metta',"(@doc filter-atom\n  (@desc \"Function takes list of atoms (first argument), variable (second argument) and filter predicate (third argument) and returns list with items which passed filter. E.g. (filter-atom (1 2 3 4) $v (eval (> $v 2))) will give (3 4)\")\n  (@params (\n    (@param \"List of atoms\")\n    (@param \"Variable\")\n    (@param \"Filter predicate\")))\n  (@return \"Filtered list\"))",0)
eval_tag(metta_tag_std_lib,410,"filter-atom",'../canary/stdlib_mettalog.metta',"(: filter-atom (-> Expression Variable Atom Expression))",0)
eval_tag(metta_tag_std_lib,422,"map-atom",'../canary/stdlib_mettalog.metta',"(@doc map-atom\n  (@desc \"Function takes list of atoms (first argument), variable to be used inside (second variable) and an expression which will be evaluated for each atom in list (third argument). Expression should contain variable. So e.g. (map-atom (1 2 3 4) $v (eval (+ $v 1))) will give (2 3 4 5)\")\n  (@params (\n    (@param \"List of atoms\")\n    (@param \"Variable name\")\n    (@param \"Template using variable\")))\n  (@return \"Result of evaluating template for each atom in a list\"))",0)
eval_tag(metta_tag_std_lib,429,"map-atom",'../canary/stdlib_mettalog.metta',"(: map-atom (-> Expression Variable Atom Expression))",0)
eval_tag(metta_tag_std_lib,439,"foldl-atom",'../canary/stdlib_mettalog.metta',"(@doc foldl-atom\n  (@desc \"Function takes list of values (first argument), initial value (second argument) and operation (fifth argument) and applies it consequently to the list of values, using init value as a start. It also takes two variables (third and fourth argument) to use them inside\")\n  (@params (\n    (@param \"List of values\")\n    (@param \"Init value\")\n    (@param \"Variable\")\n    (@param \"Variable\")\n    (@param \"Operation\")))\n  (@return \"Result of applying operation to the list of values\"))",0)
eval_tag(metta_tag_std_lib,448,"foldl-atom",'../canary/stdlib_mettalog.metta',"(: foldl-atom (-> Expression Atom Variable Variable Atom Atom))",0)
eval_tag(metta_tag_std_lib,576,"if-equal",'../canary/stdlib_mettalog.metta',"(@doc if-equal\n  (@desc \"Checks if first two arguments are equal and evaluates third argument if equal, fourth argument - otherwise\")\n  (@params (\n    (@param \"First argument\")\n    (@param \"Second argument\")\n    (@param \"Atom to be evaluated if arguments are equal\")\n    (@param \"Atom to be evaluated if arguments are not equal\")))\n  (@return \"Evaluated third or fourth argument\"))",0)
eval_tag(metta_tag_std_lib,637,"flip",'../canary/stdlib_mettalog.metta',"(@doc flip\n  (@desc \"Produces random boolean value\")\n  (@params ())\n  (@return \"Random boolean value\"))",0)
eval_tag(metta_tag_std_lib,698,"let*",'../canary/stdlib_mettalog.metta',"(@doc let*\n  (@desc \"Same as let, but first argument is a tuple containing tuples of variables and their bindings, e.g. (($v (+ 1 2)) ($v2 (* 5 6)))\")\n  (@params (\n    (@param \"Tuple of tuples with variables and their bindings\")\n    (@param \"Expression which will be reduced and in which variable (first argument) could be used\")))\n  (@return \"Result of second argument's evaluation\"))",0)
eval_tag(metta_tag_std_lib,704,"let*",'../canary/stdlib_mettalog.metta',"(: let* (-> Expression Atom Atom))",0)
eval_tag(metta_tag_std_lib,715,"stringtochars",'../canary/stdlib_mettalog.metta',"(: stringToChars (-> String Expression))",0)
eval_tag(metta_tag_std_lib,716,"charstostring",'../canary/stdlib_mettalog.metta',"(: charsToString (-> Expression String))",0)
eval_tag(metta_tag_std_lib,717,"parse",'../canary/stdlib_mettalog.metta',"(: parse (-> String Atom))",0)
eval_tag(metta_tag_std_lib,718,"repr",'../canary/stdlib_mettalog.metta',"(: repr (-> Atom String))",0)
eval_tag(metta_tag_std_lib,741,"car-atom",'../canary/stdlib_mettalog.metta',"(@doc car-atom\n  (@desc \"Extracts the first atom of an expression as a tuple\")\n  (@params (\n    (@param \"Expression\")))\n  (@return \"First atom of an expression\"))",0)
eval_tag(metta_tag_std_lib,747,"car-atom",'../canary/stdlib_mettalog.metta',"(: car-atom (-> Expression Atom))",0)
eval_tag(metta_tag_std_lib,754,"cdr-atom",'../canary/stdlib_mettalog.metta',"(@doc cdr-atom\n  (@desc \"Extracts the tail of an expression (all except first atom)\")\n  (@params (\n    (@param \"Expression\")))\n  (@return \"Tail of an expression\"))",0)
eval_tag(metta_tag_std_lib,759,"cdr-atom",'../canary/stdlib_mettalog.metta',"(: cdr-atom (-> Expression Expression))",0)
eval_tag(metta_tag_std_lib,1078,"add-atom",'../canary/stdlib_mettalog.metta',"(@doc add-atom\n  (@desc \"Adds atom into the atomspace without reducing it\")\n  (@params (\n    (@param \"Atomspace to add atom into\")\n    (@param \"Atom to add\")))\n  (@return \"Unit atom\"))",0)
eval_tag(metta_tag_std_lib,1084,"add-atom",'../canary/stdlib_mettalog.metta',"(: add-atom (-> hyperon::space::DynSpace Atom (->)))",0)
eval_tag(metta_tag_std_lib,1088,"new-space",'../canary/stdlib_mettalog.metta',"(@doc new-space\n  (@desc \"Creates new Atomspace which could be used further in the program as a separate from &self Atomspace\")\n  (@params ())\n  (@return \"Reference to a new space\"))",0)
eval_tag(metta_tag_std_lib,1092,"new-space",'../canary/stdlib_mettalog.metta',"(: new-space (-> hyperon::space::DynSpace))",0)
eval_tag(metta_tag_std_lib,1096,"remove-atom",'../canary/stdlib_mettalog.metta',"(@doc remove-atom\n  (@desc \"Removes atom from the input Atomspace\")\n  (@params (\n    (@param \"Reference to the space from which the Atom needs to be removed\")\n    (@param \"Atom to be removed\")))\n  (@return \"Unit atom\"))",0)
eval_tag(metta_tag_std_lib,1102,"remove-atom",'../canary/stdlib_mettalog.metta',"(: remove-atom (-> hyperon::space::DynSpace Atom (->)))",0)
eval_tag(metta_tag_std_lib,1106,"get-atoms",'../canary/stdlib_mettalog.metta',"(@doc get-atoms\n  (@desc \"Shows all atoms in the input Atomspace\")\n  (@params (\n    (@param \"Reference to the space\")))\n  (@return \"List of all atoms in the input space\"))",0)
eval_tag(metta_tag_std_lib,1112,"get-atoms",'../canary/stdlib_mettalog.metta',"(: get-atoms (-> hyperon::space::DynSpace Atom))",0)
eval_tag(metta_tag_std_lib,1117,"new-state",'../canary/stdlib_mettalog.metta',"(@doc new-state\n  (@desc \"Creates a new state atom wrapping its argument\")\n  (@params (\n    (@param \"Atom to be wrapped\")))\n  (@return \"Returns (State $value) where $value is an argument to a new-state\"))",0)
eval_tag(metta_tag_std_lib,1122,"new-state",'../canary/stdlib_mettalog.metta',"(: new-state (-> $tnso (StateMonad $tnso)))",0)
eval_tag(metta_tag_std_lib,1126,"change-state!",'../canary/stdlib_mettalog.metta',"(@doc change-state!\n  (@desc \"Changes input state's wrapped atom to another value (second argument). E.g. (change-state! (State 5) 6) -> (State 6)\")\n  (@params (\n    (@param \"State created by new-state function\")\n    (@param \"Atom which will replace wrapped atom in the input state\")))\n  (@return \"State with replaced wrapped atom\"))",0)
eval_tag(metta_tag_std_lib,1132,"change-state!",'../canary/stdlib_mettalog.metta',"(: change-state! (-> (StateMonad $tcso) $tcso (StateMonad $tcso)))",0)
eval_tag(metta_tag_std_lib,1136,"get-state",'../canary/stdlib_mettalog.metta',"(@doc get-state\n  (@desc \"Gets a state as an argument and returns its wrapped atom. E.g. (get-state (State 5)) -> 5\")\n  (@params (\n    (@param \"State\")))\n  (@return \"Atom wrapped by state\"))",0)
eval_tag(metta_tag_std_lib,1141,"get-state",'../canary/stdlib_mettalog.metta',"(: get-state (-> (StateMonad $tgso) $tgso))",0)
eval_tag(metta_tag_std_lib,1145,"get-type",'../canary/stdlib_mettalog.metta',"(@doc get-type\n  (@desc \"Returns type notation of input atom\")\n  (@params (\n    (@param \"Atom to get type for\")))\n  (@return \"Type notation or %Undefined% if there is no type for input Atom\"))",0)
eval_tag(metta_tag_std_lib,1150,"get-type",'../canary/stdlib_mettalog.metta',"(: get-type (-> Atom Atom))",0)
eval_tag(metta_tag_std_lib,1151,"get-type",'../canary/stdlib_mettalog.metta',"(: get-type (-> Atom Atom Atom))",0)
eval_tag(metta_tag_std_lib,1155,"get-type",'../canary/stdlib_mettalog.metta',"(@doc get-type-space\n  (@desc \"Returns type notation of input Atom (second argument) relative to a specified atomspace (first argument)\")\n  (@params (\n    (@param \"Atomspace where type notation for input atom will be searched\")\n    (@param \"Atom to get type for\")))\n  (@return \"Type notation or %Undefined% if there is no type for input Atom in provided atomspace\"))",0)
eval_tag(metta_tag_std_lib,1162,"get-type-space",'../canary/stdlib_mettalog.metta',"(: get-type-space (-> Atom Atom Atom))",0)
eval_tag(metta_tag_std_lib,1167,"get-metatype",'../canary/stdlib_mettalog.metta',"(@doc get-metatype\n  (@desc \"Returns metatype of the input atom\")\n  (@params (\n    (@param \"Atom to get metatype for\")))\n  (@return \"Metatype of input atom\"))",0)
eval_tag(metta_tag_std_lib,1172,"get-metatype",'../canary/stdlib_mettalog.metta',"(: get-metatype (-> Atom Atom))",0)
eval_tag(metta_tag_std_lib,1176,"unify",'../canary/stdlib_mettalog.metta',"(@doc unify\n  (@desc \"Like Match but allows any sort of container for the first argument. (Match only allows MeTTa spaces.)\")\n  (@params (\n\t(@param \"The collection or space to match\")\n\t(@param \"Second atom to unify with\")\n\t(@param \"Result if two atoms unified successfully\")\n\t(@param \"Result otherwise\")))\n  (@return \"Third argument when found or forth one otherwise\"))",0)
eval_tag(metta_tag_std_lib,1184,"unify",'../canary/stdlib_mettalog.metta',"(: unify (-> Atom Atom Atom Atom Atom))",0)
eval_tag(metta_tag_std_lib,1188,"match",'../canary/stdlib_mettalog.metta',"(@doc match\n  (@desc \"Searches for all declared atoms corresponding to the given pattern (second argument) and produces the output pattern (third argument)\")\n  (@params (\n    (@param \"A grounded atom referencing a Space\")\n    (@param \"Pattern atom to be matched\")\n    (@param \"Output pattern typically containing variables from the input pattern\")))\n  (@return \"If match was successfull it outputs pattern (third argument) with filled variables (if any were present in pattern) using matched pattern (second argument). Nothing - otherwise\"))",0)
eval_tag(metta_tag_std_lib,1195,"match",'../canary/stdlib_mettalog.metta',"(: match (-> Atom Atom Atom %Undefined%))",0)
eval_tag(metta_tag_std_lib,1201,"register-module!",'../canary/stdlib_mettalog.metta',"(@doc register-module!\n  (@desc \"Takes a file system path (first argument) and loads the module into the runner\")\n  (@params (\n    (@param \"File system path\")))\n  (@return \"Unit atom\"))",0)
eval_tag(metta_tag_std_lib,1206,"register-module!",'../canary/stdlib_mettalog.metta',"(: register-module! (-> Atom (->)))",0)
eval_tag(metta_tag_std_lib,1210,"mod-space!",'../canary/stdlib_mettalog.metta',"(@doc mod-space!\n  (@desc \"Returns the space of the module (first argument) and tries to load the module if it is not loaded into the module system\")\n  (@params (\n    (@param \"Module name\")))\n  (@return \"Space name\"))",0)
eval_tag(metta_tag_std_lib,1215,"mod-space!",'../canary/stdlib_mettalog.metta',"(: mod-space! (-> Atom hyperon::space::DynSpace))",0)
eval_tag(metta_tag_std_lib,1225,"print",'../canary/stdlib_mettalog.metta',"(@doc print-mods!\n  (@desc \"Prints all modules with their correspondent spaces\")\n  (@params ())\n  (@return \"Unit atom\"))",0)
eval_tag(metta_tag_std_lib,1229,"print-mods!",'../canary/stdlib_mettalog.metta',"(: print-mods! (-> (->)))",0)
eval_tag(metta_tag_std_lib,1253,"collapse",'../canary/stdlib_mettalog.metta',"(@doc collapse\n  (@desc \"Converts a nondeterministic result into a tuple\")\n  (@params (\n    (@param \"Atom which will be evaluated\")))\n  (@return \"Tuple\"))",0)
eval_tag(metta_tag_std_lib,1258,"collapse",'../canary/stdlib_mettalog.metta',"(: collapse (-> Atom Atom))",0)
eval_tag(metta_tag_std_lib,1262,"capture",'../canary/stdlib_mettalog.metta',"(@doc capture\n  (@desc \"Wraps an atom and capture the current space\")\n  (@params (\n    (@param \"Function name which space need to be captured\")))\n  (@return \"Function\"))",0)
eval_tag(metta_tag_std_lib,1267,"capture",'../canary/stdlib_mettalog.metta',"(: capture (-> Atom Atom))",0)
eval_tag(metta_tag_std_lib,1271,"case",'../canary/stdlib_mettalog.metta',"(@doc case\n  (@desc \"Subsequently tests multiple pattern-matching conditions (second argument) for the given value (first argument)\")\n  (@params (\n    (@param \"Atom (it will be evaluated)\")\n    (@param \"Tuple of pairs mapping condition patterns to results\")))\n  (@return \"Result of evaluating of Atom bound to met condition\"))",0)
eval_tag(metta_tag_std_lib,1277,"case",'../canary/stdlib_mettalog.metta',"(: case (-> Atom Expression Atom))",0)
eval_tag(metta_tag_std_lib,1290,"pragma!",'../canary/stdlib_mettalog.metta',"(@doc pragma!\n  (@desc \"Changes global key's (first argument) value to a new one (second argument)\")\n  (@params (\n    (@param \"Key's name\")\n    (@param \"New value\")))\n  (@return \"Unit atom\"))",0)
eval_tag(metta_tag_std_lib,1296,"pragma!",'../canary/stdlib_mettalog.metta',"(: pragma! (-> Symbol %Undefined% (->)))",0)
eval_tag(metta_tag_std_lib,1300,"import!",'../canary/stdlib_mettalog.metta',"(@doc import!\n  (@desc \"Imports module using its relative path (second argument) and binds it to the token (first argument) which will represent imported atomspace. If first argument is &self then everything will be imported to current atomspace\")\n  (@params (\n    (@param \"Symbol, which is turned into the token for accessing the imported module\")\n    (@param \"Module name\")))\n  (@return \"Unit atom\"))",0)
eval_tag(metta_tag_std_lib,1307,"import!",'../canary/stdlib_mettalog.metta',"(: import! (-> Atom Atom (->)))",0)
eval_tag(metta_tag_std_lib,1310,"include",'../canary/stdlib_mettalog.metta',"(@doc include\n  (@desc \"Works just like import! but with &self as a first argument. So everything from input file will be included in the current atomspace and evaluated\")\n  (@params (\n    (@param \"Name of metta script to import\")))\n  (@return \"Unit atom\"))",0)
eval_tag(metta_tag_std_lib,1315,"include",'../canary/stdlib_mettalog.metta',"(: include (-> Atom Atom))",0)
eval_tag(metta_tag_std_lib,1319,"bind!",'../canary/stdlib_mettalog.metta',"(@doc bind!\n  (@desc \"Registers a new token which is replaced with an atom during the parsing of the rest of the program\")\n  (@params (\n    (@param \"Token name\")\n    (@param \"Atom, which is associated with the token after reduction\")))\n  (@return \"Unit atom\"))",0)
eval_tag(metta_tag_std_lib,1325,"bind!",'../canary/stdlib_mettalog.metta',"(: bind! (-> Symbol %Undefined% (->)))",0)
eval_tag(metta_tag_std_lib,1329,"trace!",'../canary/stdlib_mettalog.metta',"(@doc trace!\n  (@desc \"Prints its first argument and returns second. Both arguments will be evaluated before processing\")\n  (@params (\n    (@param \"Atom to print\")\n    (@param \"Atom to return\")))\n  (@return \"Evaluated second input\"))",0)
eval_tag(metta_tag_std_lib,1335,"trace!",'../canary/stdlib_mettalog.metta',"(: trace! (-> %Undefined% $a $a))",0)
eval_tag(metta_tag_std_lib,1339,"print",'../canary/stdlib_mettalog.metta',"(@doc println!\n  (@desc \"Prints a line of text to the console\")\n  (@params (\n    (@param \"Expression/atom to be printed out\")))\n  (@return \"Unit atom\"))",0)
eval_tag(metta_tag_std_lib,1344,"println!",'../canary/stdlib_mettalog.metta',"(: println! (-> %Undefined% (->)))",0)
eval_tag(metta_tag_std_lib,1348,"format-args",'../canary/stdlib_mettalog.metta',"(@doc format-args\n  (@desc \"Fills {} symbols in the input expression with atoms from the second expression. E.g. (format-args (Probability of {} is {}%) (head 50)) gives [(Probability of head is 50%)]. Atoms in the second input value could be variables\")\n  (@params (\n    (@param \"Expression with {} symbols to be replaced\")\n    (@param \"Atoms to be placed inside expression instead of {}\")))\n  (@return \"Expression with replaced {} with atoms\"))",0)
eval_tag(metta_tag_std_lib,1354,"format-args",'../canary/stdlib_mettalog.metta',"(: format-args (-> String Atom String))",0)
eval_tag(metta_tag_std_lib,1358,"sealed",'../canary/stdlib_mettalog.metta',"(@doc sealed\n  (@desc \"Replaces all occurrences of any var from var list (first argument) inside atom (second argument) by unique variable. Can be used to create a locally scoped variables\")\n  (@params (\n\t(@param \"Variable list e.g. ($x $y)\")\n\t(@param \"Atom which uses those variables\")))\n  (@return \"Second argument but with variables being replaced with unique variables\"))",0)
eval_tag(metta_tag_std_lib,1364,"sealed",'../canary/stdlib_mettalog.metta',"(: sealed (-> Expression Atom Atom))",0)
eval_tag(metta_tag_std_lib,1373,"py-list",'../canary/stdlib_mettalog.metta',"(@doc py-list\n  (@desc \"Converts a MeTTa Expression into a Python list and returns it as a PyObject.\")\n  (@params (\n    (@param (@type Expression) (@desc \"A MeTTa List that will be converted into a Python list\"))\n  ))\n  (@return (@type PyObject) (@desc \"A Python list object that represents the given MeTTa Expression as a PyObject\"))\n)",0)
eval_tag(metta_tag_std_lib,1380,"py-list",'../canary/stdlib_mettalog.metta',"(: py-list (-> Expression PyObject))",0)
eval_tag(metta_tag_std_lib,1384,"py-eval",'../canary/stdlib_mettalog.metta',"(@doc py-eval\n  (@desc \"Evaluates a Python expression from a string and returns the result as a PyObject.\")\n  (@params (\n    (@param (@type String) (@desc \"A string representing a Python expression that will be evaluated\"))\n  ))\n  (@return (@type PyObject) (@desc \"The result of evaluating the Python expression as a PyObject\"))\n)",0)
eval_tag(metta_tag_std_lib,1391,"py-eval",'../canary/stdlib_mettalog.metta',"(: py-eval (-> String PyObject))",0)
eval_tag(metta_tag_std_lib,1397,"&self",'../canary/stdlib_mettalog.metta',";(@doc &self\n;  (@desc \"Returns reference to the current atomspace\")\n;  (@params ())\n;  (@return \"Reference to the current atomspace\"))",0)
eval_tag(metta_tag_std_lib,1505,"unique",'../canary/stdlib_mettalog.metta',"(@doc unique\n  (@desc \"Function takes non-deterministic input (first argument) and returns only unique entities. E.g. (unique (superpose (a b c d d))) -> [a, b, c, d]\")\n  (@params (\n    (@param \"Non-deterministic set of values\")))\n  (@return \"Unique non-deterministic values from input set\"))",0)
eval_tag(metta_tag_std_lib,1510,"unique",'../canary/stdlib_mettalog.metta',"(: unique (-> Atom Atom))",0)
eval_tag(metta_tag_std_lib,1514,"union",'../canary/stdlib_mettalog.metta',"(@doc union\n  (@desc \"Function takes two non-deterministic inputs (first and second argument) and returns their union. E.g. (union (superpose (a b b c)) (superpose (b c c d))) -> [a, b, b, c, b, c, c, d]\")\n  (@params (\n    (@param \"Non-deterministic set of values\")\n    (@param \"Another non-deterministic set of values\")))\n  (@return \"Non-deterministic Union of sets\"))",0)
eval_tag(metta_tag_std_lib,1520,"union",'../canary/stdlib_mettalog.metta',"(: union (-> Atom Atom Atom))",0)
eval_tag(metta_tag_std_lib,1524,"intersection",'../canary/stdlib_mettalog.metta',"(@doc intersection\n  (@desc \"Function takes two non-deterministic inputs (first and second argument) and returns their intersection. E.g. (intersection (superpose (a b c c)) (superpose (b c c c d))) -> [b, c, c]\")\n  (@params (\n    (@param \"Non-deterministic set of values\")\n    (@param \"Another non-deterministic set of values\")))\n  (@return \"Non-deterministic Intersection of sets\"))",0)
eval_tag(metta_tag_std_lib,1530,"intersection",'../canary/stdlib_mettalog.metta',"(: intersection (-> Atom Atom Atom))",0)
eval_tag(metta_tag_std_lib,1534,"subtraction",'../canary/stdlib_mettalog.metta',"(@doc subtraction\n  (@desc \"Function takes two non-deterministic inputs (first and second argument) and returns their subtraction. E.g. !(subtraction (superpose (a b b c)) (superpose (b c c d))) -> [a, b]\")\n  (@params (\n    (@param \"Non-deterministic set of values\")\n    (@param \"Another non-deterministic set of values\")))\n  (@return \"Non-deterministic Subtraction of sets\"))",0)
eval_tag(metta_tag_std_lib,1540,"subtraction",'../canary/stdlib_mettalog.metta',"(: subtraction (-> Atom Atom Atom))",0)
eval_tag(metta_tag_std_lib,1544,"git-module!",'../canary/stdlib_mettalog.metta',"(@doc git-module!\n  (@desc \"Provides access to module in a remote git repo, from within MeTTa code. Similar to `register-module!`, this op will bypass the catalog search\")\n  (@params (\n    (@param \"URL to github repo\")))\n  (@return \"Unit atom\"))",0)
eval_tag(metta_tag_std_lib,1549,"git-module!",'../canary/stdlib_mettalog.metta',"(: git-module! (-> Atom (->)))",0)
eval_tag(metta_tag_std_lib,1556,"findall!",'../canary/stdlib_mettalog.metta',"(@doc findall!\n  (@desc \"Takes a Template and a Goal. Returns the list resulting from substituting all bindings from solving Goal into Template.\n  See Prolog's built-in predicate findall/3.\")\n  (@params (\n    (@param \"Template\")\n    (@param \"Goal\")))\n  (@return \"Result list of all bindings for Goal substituted into Template\"))",0)
eval_tag(metta_tag_std_lib,1563,"findall!",'../canary/stdlib_mettalog.metta',"(: findall! (-> Expression Expression Expression))",0)
eval_tag(metta_tag_std_lib,1566,"maplist!",'../canary/stdlib_mettalog.metta',"(@doc maplist!\n  (@desc \"Takes a function F and one to three lists; Returns the result of applying F to each item in the list(s). \n The provided lists are not evaluated (this matches the behavior of e.g. cons-atom).\n F must have the number of lists provided as a valid arity (i.e. unary for one list, binary for two, ternary for three).\n Use concurrent-maplist! for a multi-threaded, nondeterministic version.\n See Prolog's built-in predicate maplist.\")\n  (@params (\n    (@param \"Function to be applied\")\n    (@param \"List\")))",0)
eval_tag(metta_tag_std_lib,1576,"maplist!",'../canary/stdlib_mettalog.metta',"(: maplist! (-> Function Expression Expression))",0)
eval_tag(metta_tag_std_lib,1577,"maplist!",'../canary/stdlib_mettalog.metta',"(: maplist! (-> Function Expression Expression Expression))",0)
eval_tag(metta_tag_std_lib,1578,"maplist!",'../canary/stdlib_mettalog.metta',"(: maplist! (-> Function Expression Expression Expression Expression))",0)
eval_tag(metta_tag_std_lib,1581,"concurrent-maplist!",'../canary/stdlib_mettalog.metta',"(@doc concurrent-maplist!\n  (@desc \"Takes a function F and one to three lists; Returns the result of applying F to each item in the list(s). \n The provided lists are not evaluated (this matches the behavior of e.g. cons-atom).\n F must have the number of lists provided as a valid arity (i.e. unary for one list, binary for two, ternary for three).\n The applications of F to the list items are processed in parallel. Because of the overhead of this approach, a speedup is only likely if F is expensive to evaluate.\n Use maplist! for a single-threaded, deterministic version.\n See Prolog's built-in predicate concurrent-maplist.\")\n  (@params (\n    (@param \"Function to be applied\")",0)
eval_tag(metta_tag_std_lib,1592,"concurrent-maplist!",'../canary/stdlib_mettalog.metta',"(: concurrent-maplist! (-> Function Expression Expression))",0)
eval_tag(metta_tag_std_lib,1593,"concurrent-maplist!",'../canary/stdlib_mettalog.metta',"(: concurrent-maplist! (-> Function Expression Expression Expression))",0)
eval_tag(metta_tag_std_lib,1594,"concurrent-maplist!",'../canary/stdlib_mettalog.metta',"(: concurrent-maplist! (-> Function Expression Expression Expression Expression))",0)
eval_tag(metta_tag_std_lib,1597,"throw",'../canary/stdlib_mettalog.metta',"(@doc throw\n  (@desc \"Raises an exception. See also `catch`; the system will look for the innermost catch such that Exception unifies with Catcher.\")\n  (@params (\n    (@param \"Exception\")))\n  (@return \"Does not return - raises an exception\"))",0)
eval_tag(metta_tag_std_lib,1602,"throw",'../canary/stdlib_mettalog.metta',"(: throw (-> Atom ErrorType))",0)
eval_tag(metta_tag_std_lib,1605,"catch",'../canary/stdlib_mettalog.metta',"(@doc catch\n  (@desc \"Executes Form. If an exception is raised with `throw` during execution of Form while this is the innermost catch such that Catcher unifies with Exception, the exception is caught. Recover is then executed with bindings from Catcher.\")\n  (@params (\n    (@param \"Form\")\n    (@param \"Catcher\")\n    (@param \"Recover\")))\n  (@return \"Result of Form if no exception is raised. Result of Recover (with bindings from Catcher) if an exception is caught.\"))",0)
eval_tag(metta_tag_std_lib,1612,"catch",'../canary/stdlib_mettalog.metta',"(: catch (-> Atom Atom Atom Atom))",0)
eval_tag(metta_example,51,"coerce",'../../../metta-examples-main/subtyping/rule-base.metta',";; `(coerce proof_S<:T t)` is of type `T`, where `proof_S<:T` is a",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(import! &self metta:synthesis:Synthesize)",0)
eval_tag(metta_example,7,"import!",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(import! &rb metta:subtyping:rule-base)",0)
eval_tag(metta_example,26,"match",'../../../metta-examples-main/subtyping/subtyping-test.metta',"(= (rb) (match &rb $x $x))",0)
eval_tag(metta_example,34,"coerce",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: (coerce $proof felix) Mammal) kb rb (fromNumber 1))",0)
eval_tag(metta_example,37,"fromnumber",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (: felix Mammal)) kb rb (fromNumber 1))",0)
eval_tag(metta_example,40,"fromnumber",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (<: Cat Animal)) kb rb (fromNumber 1))",0)
eval_tag(metta_example,43,"coerce",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: (coerce $proof felix) Animal) kb rb (fromNumber 2))",0)
eval_tag(metta_example,46,"fromnumber",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (: felix Animal)) kb rb (fromNumber 2))",0)
eval_tag(metta_example,49,"fromnumber",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (<: (-> Physical Weight) (-> Cat Weight))) kb rb (fromNumber 3))",0)
eval_tag(metta_example,52,"fromnumber",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $fun (-> Physical Weight)) kb rb (fromNumber 0))",0)
eval_tag(metta_example,56,"fromnumber",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (: $fun (-> Physical Weight))) kb rb (fromNumber 0))",0)
eval_tag(metta_example,59,"fromnumber",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $fun (-> Cat Weight)) kb rb (fromNumber 3))",0)
eval_tag(metta_example,63,"fromnumber",'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (: $fun (-> Cat Weight))) kb rb (fromNumber 3))",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/red-black-lambda/red-black.metta',"!(import! &LC lambda-theory.metta)",0)
eval_tag(metta_example,5,"match",'../../../metta-examples-main/red-black-lambda/red-black.metta',"(= (RedLambda $RV $BLC) (RTheory (match &LC (LambdaTheory ($RV $BLC) $rhs) $rhs)))",0)
eval_tag(metta_example,6,"match",'../../../metta-examples-main/red-black-lambda/red-black.metta',"(= (BlackLambda $BV $RLC) (BTheory (match &LC (LambdaTheory ($BV $RLC) $rhs) $rhs)))",0)
eval_tag(metta_example,16,"match",'../../../metta-examples-main/red-black-lambda/red-black.metta',"; (RedBlackLambda (rc (match &self (LambdaTheory ($RV $BLC) $rhs) $rhs)))",0)
eval_tag(metta_example,64,"&self",'../../../metta-examples-main/combinator-calculi/tree.metta',"; todo (but it's getting slow) star-abstraction and self-evaluation",0)
eval_tag(metta_example,8,"case",'../../../metta-examples-main/sumo/load-suo-kif.metta',"   (case (car-atom $x)",0)
eval_tag(metta_example,4,"bind!",'../../../metta-examples-main/python_from_metta/default.metta',"    (bind! $x (py-atom $y)))",0)
eval_tag(metta_example,1,"import!",'../../../metta-examples-main/python_from_metta/requests.metta',"; > this !(import! a b) doesn't work exactly.",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/python_from_metta/requests.metta',"!(import! &self default)",0)
eval_tag(metta_example,7,"bind!",'../../../metta-examples-main/python_from_metta/requests.metta',"    (bind! $x (py-atom $y)))",0)
eval_tag(metta_example,27,"py-atom",'../../../metta-examples-main/python_from_metta/requests.metta',"(= (::JSON $x) (py-atom (json.loads $x)))",0)
eval_tag(metta_example,35,"py-atom",'../../../metta-examples-main/python_from_metta/requests.metta',"    ((py-dot (py-atom $dict) get) $key))",0)
eval_tag(metta_example,39,"py-atom",'../../../metta-examples-main/python_from_metta/requests.metta',"    ((py-dot (py-atom $list) __getitem__) $index))",0)
eval_tag(metta_example,91,"py-list",'../../../metta-examples-main/python_from_metta/requests.metta',"(bash (py-list (",0)
eval_tag(metta_example,108,"py-dot",'../../../metta-examples-main/python_from_metta/requests.metta',"    (py-dot ",0)
eval_tag(metta_example,123,"py-dict",'../../../metta-examples-main/python_from_metta/requests.metta',"    (json (py-dict (",0)
eval_tag(metta_example,136,"py-dict",'../../../metta-examples-main/python_from_metta/requests.metta',"    (headers (py-dict (",0)
eval_tag(metta_example,12,"py-list",'../../../metta-examples-main/python_from_metta/fs.metta',"(= (shell-command) (py-list (",0)
eval_tag(metta_example,21,"bind!",'../../../metta-examples-main/python_from_metta/fs.metta',"    (bind! $x (py-atom $y)))",0)
eval_tag(metta_example,47,"py-atom",'../../../metta-examples-main/python_from_metta/fs.metta',"    (stdout (py-atom (PIPE)))",0)
eval_tag(metta_example,59,"bind!",'../../../metta-examples-main/python_from_metta/fs.metta',"    (bind! $name ",0)
eval_tag(metta_example,115,"print",'../../../metta-examples-main/python_from_metta/fs.metta',";;     (println! (hi))",0)
eval_tag(metta_example,116,"print",'../../../metta-examples-main/python_from_metta/fs.metta',";;     (!(println! ($do)) (untill $stop $do))",0)
eval_tag(metta_example,121,"print",'../../../metta-examples-main/python_from_metta/fs.metta',"    ;; (println! ($buf))",0)
eval_tag(metta_example,10,"sealed",'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let (quote ($v $b)) (sealed ($var) (quote ($var $body))) (let (quote $v) (quote $val) $b)) )",0)
eval_tag(metta_example,14,"sealed",'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let (quote ($v1 $v2 $b)) (sealed ($var1 $var2) (quote ($var1 $var2 $body))) (let (quote ($v1 $v2)) (quote ($val1 $val2)) $b)) )",0)
eval_tag(metta_example,20,"sealed",'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let (quote ($v1 $v2 $v3 $b)) (sealed ($var1 $var2 $var3) (quote ($var1 $var2 $var3 $body))) (let (quote ($v1 $v2 $v3)) (quote ($val1 $val2 $val3)) $b)) )",0)
eval_tag(metta_example,47,"&self",'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let $try (lambda2 $guess $self-try",0)
eval_tag(metta_example,86,"&self",'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let $try (lambda2 $guess $self-try",0)
eval_tag(metta_example,204,"&self",'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"  (let $iter (lambda3 $y $counter $self",0)
eval_tag(metta_example,255,"&self",'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let $iter (lambda2 $x $self",0)
eval_tag(metta_example,23,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))",0)
eval_tag(metta_example,37,"bind!",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(bind! &kb (new-space))",0)
eval_tag(metta_example,40,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: ab (â\u0086\u0092 A B)))",0)
eval_tag(metta_example,41,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: bc (â\u0086\u0092 B C)))",0)
eval_tag(metta_example,42,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: a A))",0)
eval_tag(metta_example,45,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: ModusPonens (-> (â\u0086\u0092 $p $q)  ; Premise 1",0)
eval_tag(metta_example,48,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: Deduction (-> (â\u0086\u0092 $q $r)         ; Premise 1",0)
eval_tag(metta_example,51,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: . (-> (-> $q $r)         ; Premise 1",0)
eval_tag(metta_example,58,"match",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"(= (syn (: $prf $ccln) $_) (match &kb (: $prf $ccln) (: $prf $ccln)))",0)
eval_tag(metta_example,61,"let*",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"   (let* (((: $prfabs (-> $prms $ccln)) (syn (: $prfabs (-> $prms $ccln)) $k))",0)
eval_tag(metta_example,80,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf (-> A B)) (fromNumber 1))",0)
eval_tag(metta_example,85,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf B) (fromNumber 2))",0)
eval_tag(metta_example,90,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf C) (fromNumber 3))",0)
eval_tag(metta_example,95,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf C) (fromNumber 4))",0)
eval_tag(metta_example,105,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf (-> (â\u0086\u0092 $q $r) (-> (â\u0086\u0092 $p $q) (-> $p $r)))) (fromNumber 4))",0)
eval_tag(metta_example,113,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf (-> (â\u0086\u0092 $r $s) (-> (â\u0086\u0092 $q $r) (-> (â\u0086\u0092 $p $q) (â\u0086\u0092 $p $s))))) (fromNumber 4))",0)
eval_tag(metta_example,124,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"(= (add-atom-nodup $space $atom)",0)
eval_tag(metta_example,131,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"(= (add-atoms-nodup $space $atoms)",0)
eval_tag(metta_example,143,"bind!",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(bind! &space-test (new-space))",0)
eval_tag(metta_example,144,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom-nodup &space-test A)",0)
eval_tag(metta_example,145,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom-nodup &space-test A)",0)
eval_tag(metta_example,147,"get-atoms",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (get-atoms &space-test)",0)
eval_tag(metta_example,151,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atoms-nodup &space-test (A B C A))",0)
eval_tag(metta_example,153,"get-atoms",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (get-atoms &space-test)",0)
eval_tag(metta_example,157,"collapse",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',";; Iterative Chainer Wrapped Around Backward DTL Curried (collapse) ;;",0)
eval_tag(metta_example,176,"let*",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"   (let* (($cres (collapse (syn $query $depth)))",0)
eval_tag(metta_example,188,"get-atoms",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (get-atoms &kb)",0)
eval_tag(metta_example,200,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (isyn (: $prf B) (fromNumber 2) (fromNumber 1))",0)
eval_tag(metta_example,203,"get-atoms",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (get-atoms &kb)",0)
eval_tag(metta_example,215,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (isyn (: $prf C) (fromNumber 2) (fromNumber 1))",0)
eval_tag(metta_example,218,"get-atoms",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (get-atoms &kb)",0)
eval_tag(metta_example,233,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"        (fromNumber 4) (fromNumber 1))",0)
eval_tag(metta_example,240,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: cd (â\u0086\u0092 C D)))",0)
eval_tag(metta_example,241,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: de (â\u0086\u0092 D E)))",0)
eval_tag(metta_example,242,"add-atom",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: ef (â\u0086\u0092 E F)))",0)
eval_tag(metta_example,250,"fromnumber",'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  !(isyn (: $prf F) (fromNumber 3) (fromNumber 1))",0)
eval_tag(metta_example,36,"new-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (new-state-value! $var_name $value)",0)
eval_tag(metta_example,42,"get-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (get-card-state-value $var_name)(match &self ((checked $var_name) $x)  (get-state $x) ))",0)
eval_tag(metta_example,44,"change-state!",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (set-card-state-value $var_name $value) (change-state! (match &self ((checked $var_name) $x)  $x) $value))",0)
eval_tag(metta_example,47,"new-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(match &self (character $t) (new-state-value! (character $t) False))",0)
eval_tag(metta_example,48,"new-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(match &self (weapon $t) (new-state-value! (weapon $t) False))",0)
eval_tag(metta_example,49,"new-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(match &self (room $t) (new-state-value! (room $t) False))",0)
eval_tag(metta_example,54,"new-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (new-state-value! $player $value)",0)
eval_tag(metta_example,60,"get-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (get-player-state-value $player)(match &self ((is_not_active $player)  $x)  (get-state $x) ))",0)
eval_tag(metta_example,62,"change-state!",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (set-player-state-value $player $value) (change-state! (match &self ((is_not_active $player)  $x)  $x) $value))",0)
eval_tag(metta_example,66,"new-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(match &self (player $t) (new-state-value! $t False))",0)
eval_tag(metta_example,71,"bind!",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',";!(bind! &target (character \"Colonel Mustard\") (weapon   \"dagger\") (room  \"The Ballroom\"))",0)
eval_tag(metta_example,106,"new-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(bind! &false (new-state False))",0)
eval_tag(metta_example,114,"case",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"         (case (match &self ($player left $next_player) $next_player)",0)
eval_tag(metta_example,123,"case",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"                                            (case (match &self ($next_player ($character_name $character)) $character_name)",0)
eval_tag(metta_example,152,"new-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(let $test (new-state ())",0)
eval_tag(metta_example,157,"change-state!",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"    (let() (change-state! (test-state) $val) (empty))",0)
eval_tag(metta_example,161,"get-state",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"   (get-state (test-state))",0)
eval_tag(metta_example,168,"match",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"    (let ($r $w $c) (match &self (,",0)
eval_tag(metta_example,178,"case",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"                                (case (match &self ($player ($weapon_name $w)) $weapon_name)",0)
eval_tag(metta_example,207,"match",'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"                                (let $x (match &self (,($player left $x) ((is_not_active $x) &false)) $x)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/traverser/basic.metta',"!(import! &self tinkerpop-modern.metta)",0)
eval_tag(metta_example,4,"match",'../../../metta-examples-main/traverser/basic.metta',"(= (transform_ $pattern $query) (match &self $pattern (let $_ (add-atom &self $query) $query)))",0)
eval_tag(metta_example,5,"match",'../../../metta-examples-main/traverser/basic.metta',"(= (transform $pattern $query) (match &self $pattern $query))",0)
eval_tag(metta_example,1,"add-atom",'../../../metta-examples-main/traverser/creation.metta',"(= (added-atom! $x) (let $_ (add-atom &self $x) $x))",0)
eval_tag(metta_example,3,"match",'../../../metta-examples-main/traverser/creation.metta',"(= (transform $pattern $query) (match &self $pattern $query))",0)
eval_tag(metta_example,4,"match",'../../../metta-examples-main/traverser/creation.metta',"(= (transform_ $pattern $query) (match &self $pattern (added-atom! $query)))",0)
eval_tag(metta_example,6,"unify",'../../../metta-examples-main/traverser/creation.metta',"(= (unifyTo $x $x) $x)",0)
eval_tag(metta_example,18,"new-state",'../../../metta-examples-main/traverser/creation.metta',"!(bind! node# (new-state 0))",0)
eval_tag(metta_example,20,"get-state",'../../../metta-examples-main/traverser/creation.metta',"(= (addV $label) (added-atom! (Node $label (get-state node#))))",0)
eval_tag(metta_example,21,"change-state!",'../../../metta-examples-main/traverser/creation.metta',"(= (addV $label) (let $_ (change-state! node# (+ (get-state node#) 1)) (empty)))",0)
eval_tag(metta_example,26,"bind!",'../../../metta-examples-main/traverser/creation.metta',"!(bind! v1 (property age 29 (property name marko (addV person))))",0)
eval_tag(metta_example,28,"bind!",'../../../metta-examples-main/traverser/creation.metta',"!(bind! v2 (property lang java (property name lop (addV software))))",0)
eval_tag(metta_example,3,"print",'../../../metta-examples-main/stack-based/interpreter.metta',"(= ((basic ($s $x)) say) (let $_ (println! $x) (basic $s)))",0)
eval_tag(metta_example,33,"print",'../../../metta-examples-main/stack-based/rewrites.metta',"(= (($s $x) say) (let  $_ (println! $x) $s))",0)
eval_tag(metta_example,39,"cons",'../../../metta-examples-main/stack-based/rewrites.metta',"(= (($s (Cons $f $r)) apply) ((($s $f) $r) apply))",0)
eval_tag(metta_example,41,"cons",'../../../metta-examples-main/stack-based/rewrites.metta',"!(((E 6) (Cons dup (Cons mul Nil))) apply)",0)
eval_tag(metta_example,23,"fromnumber",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))",0)
eval_tag(metta_example,36,"bind!",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"!(bind! &kb (new-space))",0)
eval_tag(metta_example,38,"add-atom",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"!(add-atom &kb (: a A))",0)
eval_tag(metta_example,39,"add-atom",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"!(add-atom &kb (: ab (â\u0086\u0092 A B)))",0)
eval_tag(metta_example,40,"add-atom",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"!(add-atom &kb (: bc (â\u0086\u0092 B C)))",0)
eval_tag(metta_example,41,"add-atom",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"!(add-atom &kb (: ModusPonens",0)
eval_tag(metta_example,73,"match",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"(= (bc $kb (: $prf $ccln) $_) (match $kb (: $prf $ccln) (: $prf $ccln)))",0)
eval_tag(metta_example,76,"let*",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"   (let* (((: $prfabs (-> $prms $ccln)) (bc $kb (: $prfabs (-> $prms $ccln)) $k))",0)
eval_tag(metta_example,82,"fromnumber",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (bc &kb (: $prf A) (fromNumber 0))",0)
eval_tag(metta_example,85,"fromnumber",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (bc &kb (: $prf B) (fromNumber 2))",0)
eval_tag(metta_example,88,"fromnumber",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (bc &kb (: $prf C) (fromNumber 3))",0)
eval_tag(metta_example,130,"fromnumber",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (fc &kb (: ab (â\u0086\u0092 A B)) (fromNumber 1))",0)
eval_tag(metta_example,134,"fromnumber",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (fc &kb (: ab (â\u0086\u0092 A B)) (fromNumber 2))",0)
eval_tag(metta_example,139,"fromnumber",'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (fc &kb (: a A) (fromNumber 3))",0)
eval_tag(metta_example,18,"fromnumber",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))",0)
eval_tag(metta_example,32,"bind!",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(bind! &kb (new-space))",0)
eval_tag(metta_example,33,"add-atom",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(add-atom &kb (: ab (â\u0086\u0092 A B)))",0)
eval_tag(metta_example,34,"add-atom",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(add-atom &kb (: bc (â\u0086\u0092 B C)))",0)
eval_tag(metta_example,35,"add-atom",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(add-atom &kb (: a A))",0)
eval_tag(metta_example,38,"bind!",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(bind! &rb (new-space))",0)
eval_tag(metta_example,39,"add-atom",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(add-atom &rb (: ModusPonens (->",0)
eval_tag(metta_example,45,"add-atom",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(add-atom &rb (: Deduction (->",0)
eval_tag(metta_example,59,"match",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"   (match &kb (: $prf $ccln) (: $prf $ccln)))",0)
eval_tag(metta_example,62,"match",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"   (match &rb (: $ctor (-> $prms1 $prms2 $ccln))",0)
eval_tag(metta_example,79,"fromnumber",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"  (bc (: $prf B) (fromNumber 1))",0)
eval_tag(metta_example,82,"fromnumber",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"  (bc (: $prf C) (fromNumber 2))",0)
eval_tag(metta_example,86,"fromnumber",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"  (bc (: $prf (â\u0086\u0092 A C)) (fromNumber 2))",0)
eval_tag(metta_example,97,"match",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"   (match &rb (: $ctor (-> $prms1 $prms2 $ccln))",0)
eval_tag(metta_example,101,"match",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"   (match &rb (: $ctor (-> $prms1 $prms2 $ccln))",0)
eval_tag(metta_example,110,"fromnumber",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"  (frc (: a A) (fromNumber 1))",0)
eval_tag(metta_example,115,"fromnumber",'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"  !(frc (: a A) (fromNumber 2))",0)
eval_tag(metta_example,10,"car-atom",'../../../metta-examples-main/perfect-numbers/basic.metta',"(= (sumh $xs) (if (== $xs ()) 0 (+ (sumh (cdr-atom $xs)) (car-atom $xs))))",0)
eval_tag(metta_example,13,"collapse",'../../../metta-examples-main/perfect-numbers/basic.metta',"(= (psum $x) (sumh (collapse (pcond (range 1 (- $x 1) 1) $x))))",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/hol/ListTest.metta',"!(import! &self metta:synthesis:Synthesize)",0)
eval_tag(metta_example,20,"cons",'../../../metta-examples-main/hol/ListTest.metta',"         (: Ind_app (=== (app (Cons $x $xs) $ys) (Cons $x (app $xs $ys))))",0)
eval_tag(metta_example,26,"cons",'../../../metta-examples-main/hol/ListTest.metta',"         (: Ind_rev (=== (rev (Cons $x $xs)) (app (rev $xs) (Cons $x Nil))))))",0)
eval_tag(metta_example,50,"cons",'../../../metta-examples-main/hol/ListTest.metta',"                              (-> ($p $xs) ($p (Cons $x $xs))) ; induction",0)
eval_tag(metta_example,52,"cons",'../../../metta-examples-main/hol/ListTest.metta',"                              ($p (Cons $x $xs))))))",0)
eval_tag(metta_example,12,"import!",'../../../metta-examples-main/hol/NatTest.metta',"!(import! &self metta:synthesis:Synthesize)",0)
eval_tag(metta_example,127,"fromnumber",'../../../metta-examples-main/hol/NatTest.metta',"  (synthesize (: $prf (=== (=== (plus Z Z) Z) (ZRID_plus Z))) kb rb (fromNumber 2))",0)
eval_tag(metta_example,146,"fromnumber",'../../../metta-examples-main/hol/NatTest.metta',"  (synthesize (: $prf (ZRID_plus Z)) kb rb (fromNumber 2))",0)
eval_tag(metta_example,171,"fromnumber",'../../../metta-examples-main/hol/NatTest.metta',"  !(synthesize (: $prf (ZRID_plus $x)) kb rb (fromNumber 3))",0)
eval_tag(metta_example,6,"import!",'../../../metta-examples-main/hol/NatSimpleTest.metta',"!(import! &self metta:synthesis:Synthesize)",0)
eval_tag(metta_example,98,"fromnumber",'../../../metta-examples-main/hol/NatSimpleTest.metta',"  (synthesize (: $proof (=== (plus (S Z) Z) (S Z))) kb rb (fromNumber 2))",0)
eval_tag(metta_example,129,"fromnumber",'../../../metta-examples-main/hol/NatSimpleTest.metta',"  (synthesize (: $proof (=== (plus (S Z) (S Z)) (S (S Z)))) kb rb (fromNumber 2))",0)
eval_tag(metta_example,139,"fromnumber",'../../../metta-examples-main/hol/NatSimpleTest.metta',"  (synthesize (: $proof (=== (plus (fromNumber 1) (fromNumber 5)) (fromNumber 6))) kb rb (fromNumber 2))",0)
eval_tag(metta_example,164,"fromnumber",'../../../metta-examples-main/hol/NatSimpleTest.metta',"  !(synthesize (: $proof (=== (plus (fromNumber 2) (fromNumber 2)) (fromNumber 4))) kb rb (fromNumber 3))",0)
eval_tag(metta_example,9,"unify",'../../../metta-examples-main/synthesis/Unify.metta',"(= (unify $lterm $rterm $rewrite)",0)
eval_tag(metta_example,16,"unify",'../../../metta-examples-main/synthesis/Unify.metta',"(= (unify* $pairs $rewrite)",0)
eval_tag(metta_example,28,"unify",'../../../metta-examples-main/synthesis/Unify.metta',"                    (unify $lterm $rterm",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/synthesis/UnifyTest.metta',"!(import! &self  metta:synthesis:Unify)",0)
eval_tag(metta_example,6,"unify",'../../../metta-examples-main/synthesis/UnifyTest.metta',"!(unify (Link $x B) (Link A $y) (Link $x $y))",0)
eval_tag(metta_example,11,"unify",'../../../metta-examples-main/synthesis/UnifyTest.metta',"!(unify* (((Link $x B $z) (Link A $y $z))",0)
eval_tag(metta_example,18,"unify",'../../../metta-examples-main/synthesis/UnifyTest.metta',"!(unify* (((: $ructor (-> $premise1 $premise2 $conclusion)) (: . (-> (-> $b $c) (-> $a $b) (-> $a $c))))",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/synthesis/Synthesize.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/synthesis/Synthesize.metta',";; !(import! &self metta:synthesis:Unify)",0)
eval_tag(metta_example,37,"let*",'../../../metta-examples-main/synthesis/Synthesize.metta',"   (let* (((: $ructor (-> $premise $conclusion)) ($rb))",0)
eval_tag(metta_example,43,"let*",'../../../metta-examples-main/synthesis/Synthesize.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))",0)
eval_tag(metta_example,50,"let*",'../../../metta-examples-main/synthesis/Synthesize.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $conclusion)) ($rb))",0)
eval_tag(metta_example,58,"let*",'../../../metta-examples-main/synthesis/Synthesize.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $conclusion)) ($rb))",0)
eval_tag(metta_example,67,"let*",'../../../metta-examples-main/synthesis/Synthesize.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $premise5 $conclusion)) ($rb))",0)
eval_tag(metta_example,15,"cons",'../../../metta-examples-main/logic/puzzle.metta',"; convert (a b c) to (Cons a (Cons b (Cons c Nil)))",0)
eval_tag(metta_example,18,"cdr-atom",'../../../metta-examples-main/logic/puzzle.metta',"    (if (== () $x) Nil (let $cdr (cdr-atom $x)",0)
eval_tag(metta_example,32,"cons",'../../../metta-examples-main/logic/puzzle.metta',"(= (memb $X (Cons $X $Tail)) True)",0)
eval_tag(metta_example,36,"cons",'../../../metta-examples-main/logic/puzzle.metta',"(= (memb $X (Cons $H $Tail))",0)
eval_tag(metta_example,46,"get-metatype",'../../../metta-examples-main/logic/puzzle.metta',"    (let $type (get-metatype $x) (if (== $type Variable) True False)))",0)
eval_tag(metta_example,50,"cons",'../../../metta-examples-main/logic/puzzle.metta',"(= (nth-var (Cons $H $Tail) $item $prev_head $N $base)",0)
eval_tag(metta_example,55,"cons",'../../../metta-examples-main/logic/puzzle.metta',"(= (nth $index (Cons $H $Tail) $item $base)",0)
eval_tag(metta_example,62,"cons",'../../../metta-examples-main/logic/puzzle.metta',"(= (nth-det $index (Cons $H $Tail) $item $base)",0)
eval_tag(metta_example,73,"cons",'../../../metta-examples-main/logic/puzzle.metta',"(= (nextto-impl $x $y (Cons $x (Cons $y $Tail))) True)",0)
eval_tag(metta_example,77,"cons",'../../../metta-examples-main/logic/puzzle.metta',"(= (nextto-impl $x $y (Cons $head $Tail))",0)
eval_tag(metta_example,4,"union",'../../../metta-examples-main/fizzbuzz/constructive.metta',"; !(union (range 1 13 1) (range 10 20 2))",0)
eval_tag(metta_example,5,"intersection",'../../../metta-examples-main/fizzbuzz/constructive.metta',"; !(intersection (range 1 13 1) (range 10 20 2))",0)
eval_tag(metta_example,6,"subtraction",'../../../metta-examples-main/fizzbuzz/constructive.metta',"; !(subtraction (range 10 20 2) (range 1 16 1))",0)
eval_tag(metta_example,9,"let*",'../../../metta-examples-main/fizzbuzz/constructive.metta',"  (let* (($m3 (collapse (range 3 $n 3)))",0)
eval_tag(metta_example,19,"unique",'../../../metta-examples-main/fizzbuzz/constructive.metta',"!(unique (fizzbuzz 50))",0)
eval_tag(metta_example,4,"case",'../../../metta-examples-main/fizzbuzz/simple.metta',"(= (fizzbuzz_ $fizz $buzz $n) (case ($fizz $buzz) (",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/common/EqualityTypeTest.metta',"!(import! &self metta:common:EqualityType)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/common/ListTest.metta',"!(import! &self metta:common:List)",0)
eval_tag(metta_example,9,"cons",'../../../metta-examples-main/common/ListTest.metta',"!(== (Cons 1 Nil) (Cons 1 Nil))",0)
eval_tag(metta_example,13,"cons",'../../../metta-examples-main/common/ListTest.metta',"!(sort (Cons 1 Nil))",0)
eval_tag(metta_example,14,"cons",'../../../metta-examples-main/common/ListTest.metta',"!(sort (Cons 2 (Cons 1 Nil)))",0)
eval_tag(metta_example,15,"cons",'../../../metta-examples-main/common/ListTest.metta',"!(sort (Cons 3 (Cons 1 (Cons 2 Nil))))",0)
eval_tag(metta_example,19,"cons",'../../../metta-examples-main/common/ListTest.metta',"!(elem 1 (Cons 3 (Cons 1 (Cons 2 Nil))))",0)
eval_tag(metta_example,20,"cons",'../../../metta-examples-main/common/ListTest.metta',"!(elem 5 (Cons 3 (Cons 1 (Cons 2 Nil))))",0)
eval_tag(metta_example,24,"cons",'../../../metta-examples-main/common/ListTest.metta',"!(uniq (Cons 2 (Cons 3 (Cons 1 (Cons 2 Nil)))))",0)
eval_tag(metta_example,25,"cons",'../../../metta-examples-main/common/ListTest.metta',"!(uniq (Cons 2 (Cons 3 (Cons 3 (Cons 2 Nil)))))",0)
eval_tag(metta_example,38,"fromnumber",'../../../metta-examples-main/common/Num.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))",0)
eval_tag(metta_example,58,"fromnumber",'../../../metta-examples-main/common/Num.metta',"(= (ceil $n) (fromNat (fromNumber $n)))",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/common/In.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,5,"import!",'../../../metta-examples-main/common/In.metta',"!(import! &self metta:common:OrderedSet)",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/common/InTest.metta',"!(import! &self metta:common:In)",0)
eval_tag(metta_example,5,"import!",'../../../metta-examples-main/common/InTest.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,6,"import!",'../../../metta-examples-main/common/InTest.metta',"!(import! &self metta:synthesis:Synthesize)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/common/OrderedSet.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/common/OrderedSetTest.metta',"!(import! &self metta:common:OrderedSet)",0)
eval_tag(metta_example,1,"import!",'../../../metta-examples-main/common/MaybeTest.metta',"!(import! &self metta:common:Maybe)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/common/NumTest.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/common/NumTest.metta',"!(import! &self metta:synthesis:Synthesize)",0)
eval_tag(metta_example,6,"fromnumber",'../../../metta-examples-main/common/NumTest.metta',"!(assertEqual (fromNumber 1) (S Z))",0)
eval_tag(metta_example,23,"fromnumber",'../../../metta-examples-main/common/NumTest.metta',"  (synthesize (: $proof (â\u008D\u0083 (fromNumber 1) (fromNumber 3))) kb rb (S Z))",0)
eval_tag(metta_example,24,"fromnumber",'../../../metta-examples-main/common/NumTest.metta',"  (: (SuccMonotonicity ZeroLTSucc) (â\u008D\u0083 (fromNumber 1) (fromNumber 3))))",0)
eval_tag(metta_example,26,"fromnumber",'../../../metta-examples-main/common/NumTest.metta',"  (synthesize (: $proof (â\u008D\u0083 (fromNumber 2) (fromNumber 7))) kb rb (fromNumber 5))",0)
eval_tag(metta_example,27,"fromnumber",'../../../metta-examples-main/common/NumTest.metta',"  (: (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)) (â\u008D\u0083 (fromNumber 2) (fromNumber 7))))",0)
eval_tag(metta_example,12,"cons",'../../../metta-examples-main/common/List.metta',"(= (insert $x Nil) (Cons $x Nil))",0)
eval_tag(metta_example,13,"cons",'../../../metta-examples-main/common/List.metta',"(= (insert $x (Cons $head $tail))",0)
eval_tag(metta_example,21,"cons",'../../../metta-examples-main/common/List.metta',"(= (sort (Cons $head $tail)) (insert $head (sort $tail)))",0)
eval_tag(metta_example,26,"cons",'../../../metta-examples-main/common/List.metta',"(= (elem $x (Cons $head $tail)) (if (== $x $head) True (elem $x $tail)))",0)
eval_tag(metta_example,31,"cons",'../../../metta-examples-main/common/List.metta',"(= (uniq_ $acc (Cons $head $tail))",0)
eval_tag(metta_example,42,"cons",'../../../metta-examples-main/common/List.metta',"(= (insert_uniq $x Nil) (Cons $x Nil))",0)
eval_tag(metta_example,43,"cons",'../../../metta-examples-main/common/List.metta',"(= (insert_uniq $x (Cons $head $tail))",0)
eval_tag(metta_example,3,"union",'../../../metta-examples-main/prob-dep-types/prob_dep_types.metta',"(= (Union $t1 $t2) $t1)",0)
eval_tag(metta_example,4,"union",'../../../metta-examples-main/prob-dep-types/prob_dep_types.metta',"(= (Union $t1 $t2) $t2)",0)
eval_tag(metta_example,5,"union",'../../../metta-examples-main/prob-dep-types/prob_dep_types.metta',"(: random (-> $t1 $t2 (Union $t1 $t2)))",0)
eval_tag(metta_example,45,"union",'../../../metta-examples-main/prob-dep-types/prob_dep_types.metta',"(= (Bool_U_Color) (Union Bool Color))",0)
eval_tag(metta_example,3,"union",'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"(= (Union $t1 $t2) $t1)",0)
eval_tag(metta_example,4,"union",'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"(= (Union $t1 $t2) $t2)",0)
eval_tag(metta_example,77,"match",'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"!(match &self (: A $t) ($t))",0)
eval_tag(metta_example,79,"match",'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"  (match &self (: A $t) ($t))",0)
eval_tag(metta_example,85,"match",'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"!(match &self (: a $t) ($t))",0)
eval_tag(metta_example,87,"match",'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"  (match &self (: a $t) ($t))",0)
eval_tag(metta_example,89,"match",'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"!(match &self (: a' $t) ($t))",0)
eval_tag(metta_example,91,"match",'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"  (match &self (: a' $t) ($t))",0)
eval_tag(metta_example,18,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))",0)
eval_tag(metta_example,35,"let*",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((â\u008A¢ $premise1 $premise2 $conclusion) ($rb))",0)
eval_tag(metta_example,39,"let*",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((â\u008A¢ $premise1 $premise2 $conclusion) ($rb))",0)
eval_tag(metta_example,60,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_entail (â\u008A¢ A) kb_entail rb_entail (fromNumber 2))",0)
eval_tag(metta_example,63,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_entail (â\u008A¢ (â\u0086\u0092 A B)) kb_entail rb_entail (fromNumber 2))",0)
eval_tag(metta_example,65,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',";; !(fc_entail (â\u008A¢ (â\u0086\u0092 $x $y)) kb_entail rb_entail (fromNumber 2))",0)
eval_tag(metta_example,68,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"       (fc_entail (â\u008A¢ (â\u0086\u0092 $x $y)) kb_entail rb_entail (fromNumber 2)))",0)
eval_tag(metta_example,85,"let*",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((â\u008A¢ $premise1 $premise2 $conclusion) ($rb))",0)
eval_tag(metta_example,89,"let*",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((â\u008A¢ $premise1 $premise2 $conclusion) ($rb))",0)
eval_tag(metta_example,110,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_bare A kb_bare rb_bare (fromNumber 2))",0)
eval_tag(metta_example,113,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_bare (â\u0086\u0092 A B) kb_bare rb_bare (fromNumber 2))",0)
eval_tag(metta_example,117,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"       (fc_bare (â\u0086\u0092 $x $y) kb_bare rb_bare (fromNumber 2)))",0)
eval_tag(metta_example,143,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_eq A kb_eq (fromNumber 2))",0)
eval_tag(metta_example,146,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_eq (â\u0086\u0092 A B) kb_eq (fromNumber 2))",0)
eval_tag(metta_example,150,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"       (fc_eq (â\u0086\u0092 $x $y) kb_eq (fromNumber 2)))",0)
eval_tag(metta_example,162,"bind!",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(bind! &kb_bem (new-space))",0)
eval_tag(metta_example,163,"add-atom",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_bem (â\u0086\u0092 A B))",0)
eval_tag(metta_example,164,"add-atom",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_bem (â\u0086\u0092 B C))",0)
eval_tag(metta_example,165,"add-atom",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_bem A)",0)
eval_tag(metta_example,168,"bind!",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(bind! &rb_bem (new-space))",0)
eval_tag(metta_example,169,"add-atom",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &rb_bem (â\u008A¢",0)
eval_tag(metta_example,182,"match",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (match &rb_bem (â\u008A¢ $premise1 $premise2 $conclusion)",0)
eval_tag(metta_example,185,"match",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (match &rb_bem (â\u008A¢ $premise1 $premise2 $conclusion)",0)
eval_tag(metta_example,190,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_bem A (fromNumber 2))",0)
eval_tag(metta_example,193,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_bem (â\u0086\u0092 A B) (fromNumber 2))",0)
eval_tag(metta_example,196,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (match &kb_bem (â\u0086\u0092 $x $y) (fc_bem (â\u0086\u0092 $x $y) (fromNumber 2)))",0)
eval_tag(metta_example,208,"bind!",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(bind! &kb_em (new-space))",0)
eval_tag(metta_example,209,"add-atom",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_em (â\u0086\u0092 A B))",0)
eval_tag(metta_example,210,"add-atom",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_em (â\u0086\u0092 B C))",0)
eval_tag(metta_example,211,"add-atom",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_em A)",0)
eval_tag(metta_example,219,"match",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"(= (fc_em (â\u0086\u0092 $p $q) (S $k)) (match &kb_em $p (fc_em $q $k)))",0)
eval_tag(metta_example,220,"match",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"(= (fc_em $p (S $k)) (match &kb_em (â\u0086\u0092 $p $q) (fc_em $q $k)))",0)
eval_tag(metta_example,224,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_em A (fromNumber 2))",0)
eval_tag(metta_example,227,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_em (â\u0086\u0092 A B) (fromNumber 2))",0)
eval_tag(metta_example,230,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (match &kb_em (â\u0086\u0092 $x $y) (fc_em (â\u0086\u0092 $x $y) (fromNumber 2)))",0)
eval_tag(metta_example,245,"let*",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))",0)
eval_tag(metta_example,249,"let*",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))",0)
eval_tag(metta_example,270,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_dtl (: a A) kb_dtl rb_dtl (fromNumber 2))",0)
eval_tag(metta_example,275,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_dtl (: ab (â\u0086\u0092 A B)) kb_dtl rb_dtl (fromNumber 2))",0)
eval_tag(metta_example,281,"fromnumber",'../../../metta-examples-main/forward-chaining/fc-xp.metta',"       (fc_dtl (: $prf (â\u0086\u0092 $x $y)) kb_dtl rb_dtl (fromNumber 2)))",0)
eval_tag(metta_example,18,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))",0)
eval_tag(metta_example,38,"let*",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((â\u008A¢ $premise1 $premise2 $conclusion) ($rb))",0)
eval_tag(metta_example,63,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bare B kb_bare rb_bare (fromNumber 1))",0)
eval_tag(metta_example,66,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bare C kb_bare rb_bare (fromNumber 2))",0)
eval_tag(metta_example,69,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bare D kb_bare rb_bare (fromNumber 4))",0)
eval_tag(metta_example,92,"let*",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((â\u0086\u0092 $p $q) (bc_eq (â\u0086\u0092 $p $q) $kb $k)) ; premise1",0)
eval_tag(metta_example,97,"let*",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((â\u0086\u0092 $p $q) (bc_eq (â\u0086\u0092 $p $q) $kb $k))  ; premise1",0)
eval_tag(metta_example,106,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_eq B kb_eq (fromNumber 1))",0)
eval_tag(metta_example,109,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_eq C kb_eq (fromNumber 2))",0)
eval_tag(metta_example,113,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_eq (â\u0086\u0092 A B) kb_eq (fromNumber 0))",0)
eval_tag(metta_example,116,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_eq (â\u0086\u0092 B C) kb_eq (fromNumber 0))",0)
eval_tag(metta_example,119,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_eq (â\u0086\u0092 A C) kb_eq (fromNumber 2))",0)
eval_tag(metta_example,131,"bind!",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(bind! &kb_bem (new-space))",0)
eval_tag(metta_example,132,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_bem (â\u0086\u0092 A B))",0)
eval_tag(metta_example,133,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_bem (â\u0086\u0092 B C))",0)
eval_tag(metta_example,134,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_bem A)",0)
eval_tag(metta_example,137,"bind!",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(bind! &rb_bem (new-space))",0)
eval_tag(metta_example,138,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &rb_bem (â\u008A¢",0)
eval_tag(metta_example,144,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &rb_bem (â\u008A¢",0)
eval_tag(metta_example,155,"match",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (match &kb_bem $conclusion $conclusion))",0)
eval_tag(metta_example,158,"match",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (match &rb_bem (â\u008A¢ $premise1 $premise2 $conclusion)",0)
eval_tag(metta_example,168,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bem B (fromNumber 1))",0)
eval_tag(metta_example,171,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bem C (fromNumber 2))",0)
eval_tag(metta_example,175,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bem (â\u0086\u0092 A B) (fromNumber 0))",0)
eval_tag(metta_example,178,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bem (â\u0086\u0092 B C) (fromNumber 0))",0)
eval_tag(metta_example,181,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bem (â\u0086\u0092 A C) (fromNumber 2))",0)
eval_tag(metta_example,193,"bind!",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(bind! &kb_em (new-space))",0)
eval_tag(metta_example,194,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_em (â\u0086\u0092 A B))",0)
eval_tag(metta_example,195,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_em (â\u0086\u0092 B C))",0)
eval_tag(metta_example,196,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_em A)",0)
eval_tag(metta_example,203,"match",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (match &kb_em $conclusion $conclusion))",0)
eval_tag(metta_example,206,"let*",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((â\u0086\u0092 $p $q) (bc_em (â\u0086\u0092 $p $q) $k)) ; premise1",0)
eval_tag(metta_example,211,"let*",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((â\u0086\u0092 $p $q) (bc_em (â\u0086\u0092 $p $q) $k))  ; premise1",0)
eval_tag(metta_example,220,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_em B (fromNumber 1))",0)
eval_tag(metta_example,223,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_em C (fromNumber 2))",0)
eval_tag(metta_example,227,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_em (â\u0086\u0092 A B) (fromNumber 0))",0)
eval_tag(metta_example,230,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_em (â\u0086\u0092 B C) (fromNumber 0))",0)
eval_tag(metta_example,233,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_em (â\u0086\u0092 A C) (fromNumber 2))",0)
eval_tag(metta_example,247,"bind!",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(bind! &kb_dem (new-space))",0)
eval_tag(metta_example,248,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_dem (: ab (â\u0086\u0092 A B)))",0)
eval_tag(metta_example,249,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_dem (: bc (â\u0086\u0092 B C)))",0)
eval_tag(metta_example,250,"add-atom",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_dem (: a A))",0)
eval_tag(metta_example,257,"match",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (match &kb_dem (: $prf $conclusion) (: $prf $conclusion)))",0)
eval_tag(metta_example,260,"let*",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((: $prf_pq (â\u0086\u0092 $p $q)) (bc_dem (: $prf_pq (â\u0086\u0092 $p $q)) $k)) ; premise1",0)
eval_tag(metta_example,266,"let*",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((: $prf_pq (â\u0086\u0092 $p $q)) (bc_dem (: $prf_pq (â\u0086\u0092 $p $q)) $k))          ; premise1",0)
eval_tag(metta_example,279,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_dem (: $prf B) (fromNumber 1))",0)
eval_tag(metta_example,282,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_dem (: $prf C) (fromNumber 2))",0)
eval_tag(metta_example,286,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_dem (: $prf (â\u0086\u0092 A B)) (fromNumber 0))",0)
eval_tag(metta_example,289,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_dem (: $prf (â\u0086\u0092 B C)) (fromNumber 0))",0)
eval_tag(metta_example,292,"fromnumber",'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_dem (: $prf (â\u0086\u0092 A C)) (fromNumber 2))",0)
eval_tag(metta_example,3,"transfer!",'../../../metta-examples-main/recursion-schemes/src/schemes.metta',"!(transfer! \"base.metta\")",0)
eval_tag(metta_example,1,"import!",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"; !(import! &self logistics-i-1)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"; !(import! &self blocks-i-1)",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(import! &self blocks-i-0)",0)
eval_tag(metta_example,9,"collapse",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (subset $subset $set) (if (== (collapse (subtraction (superpose $subset) (intersection (superpose $set) (superpose $subset)))) ()) True False))",0)
eval_tag(metta_example,15,"collapse",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (subset (collapse (pre (pick-up A))) (collapse (valuation (state 0))))",0)
eval_tag(metta_example,34,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (arity $prop) (match &self (arity $prop $n) $n))",0)
eval_tag(metta_example,43,"subtraction",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"  (union (subtraction (valuation (state $idx)) (eff-neg $action)) (eff-pos $action))",0)
eval_tag(metta_example,55,"new-state",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(bind! state# (new-state 1))",0)
eval_tag(metta_example,56,"get-state",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (idx) (- (get-state state#) 1))",0)
eval_tag(metta_example,60,"let*",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"   (let* (($current_id (get-state state#))",0)
eval_tag(metta_example,74,"collapse",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (seteq (collapse (valuation (state 0)))",0)
eval_tag(metta_example,78,"collapse",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (match &self (= (valuation (state $idx)) $props) (if (seteq (collapse $props) (collapse (valuation (state 0)))) $idx (empty)))",0)
eval_tag(metta_example,83,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (find_state $props) (match &self (= (valuation (state $idx)) $props2)",0)
eval_tag(metta_example,87,"collapse",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (find_state (collapse (valuation (state 0))))",0)
eval_tag(metta_example,101,"case",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"    (case (find_state $conditions)",0)
eval_tag(metta_example,108,"get-state",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',";               (- (get-state state#) 1))",0)
eval_tag(metta_example,120,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (match &self (= (valuation (state $n)) $r) $n)",0)
eval_tag(metta_example,127,"collapse",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (valuation (state (save (collapse (eval (state 0) (pick-up A))))))",0)
eval_tag(metta_example,130,"collapse",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (valuation (state (save (collapse (eval (state (idx)) (stack A B))))))",0)
eval_tag(metta_example,138,"collapse",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"  (save (collapse (eval (state $idx) $action)))",0)
eval_tag(metta_example,155,"collapse",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (can-apply (state $idx) $action) (subset (collapse (pre $action)) (collapse (valuation (state $idx)))))",0)
eval_tag(metta_example,168,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (all-actions) (match &self (action $name) $name))",0)
eval_tag(metta_example,175,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (oftype $type) (match &self (isa $name $type) $name))",0)
eval_tag(metta_example,184,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"; (= (ground $action) (fmap oftype (match &self (types $action ($x $y)) ($action $x $y))))",0)
eval_tag(metta_example,186,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ()) ($action)))",0)
eval_tag(metta_example,187,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x)) ($action (oftype $x))))",0)
eval_tag(metta_example,188,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x $y)) ($action (oftype $x) (oftype $y))))",0)
eval_tag(metta_example,189,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x $y $z)) ($action (oftype $x) (oftype $y) (oftype $z))))",0)
eval_tag(metta_example,221,"collapse",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (partial-apply-test $a) (if (can-apply (state 0) $a) ($a (collapse (eval (state 0) $a))) (empty)))",0)
eval_tag(metta_example,233,"let*",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"        (let* (($idx2 (save_if_new (collapse (eval (state $idx) $a))))",0)
eval_tag(metta_example,249,"new-state",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(bind! expand# (new-state 0))",0)
eval_tag(metta_example,250,"get-state",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (expand) (if (< (get-state expand#) (get-state state#))",0)
eval_tag(metta_example,263,"get-state",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(get-state expand#)",0)
eval_tag(metta_example,264,"get-state",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(get-state state#)",0)
eval_tag(metta_example,267,"match",'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(match &self (edge $x $y $z) (edge $x $y $z))",0)
eval_tag(metta_example,1,"import!",'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta',"; !(import! &self blocks-domain.metta)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta',"!(import! &self logistics-i-1_flat.metta)",0)
eval_tag(metta_example,6,"match",'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta'," (match &self (precondition $action $y) $y))",0)
eval_tag(metta_example,14,"match",'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (arity $prop $n) $n))",0)
eval_tag(metta_example,20,"match",'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (holds $state $p) $p))",0)
eval_tag(metta_example,28,"match",'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (holds $state $prop) $prop))",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/sumo/located/located-test.metta',"!(import! &self ../../synthesis/Synthesize.metta)",0)
eval_tag(metta_example,7,"import!",'../../../metta-examples-main/sumo/located/located-test.metta',"!(import! &kb located.kif.metta)",0)
eval_tag(metta_example,10,"import!",'../../../metta-examples-main/sumo/located/located-test.metta',"!(import! &rb ../rule-base.metta)",0)
eval_tag(metta_example,24,"bind!",'../../../metta-examples-main/sumo/located/located-test.metta',"!(bind! &labelled-kb (new-space))",0)
eval_tag(metta_example,25,"match",'../../../metta-examples-main/sumo/located/located-test.metta',"!(match &kb $x (add-atom &labelled-kb (: (WitnessOf $x) $x)))",0)
eval_tag(metta_example,29,"match",'../../../metta-examples-main/sumo/located/located-test.metta',"(= (kb) (match &labelled-kb $x $x))",0)
eval_tag(metta_example,33,"match",'../../../metta-examples-main/sumo/located/located-test.metta',"(= (rb) (match &rb $x $x))",0)
eval_tag(metta_example,57,"fromnumber",'../../../metta-examples-main/sumo/located/located-test.metta',"!(synthesize (: $proof (located John SanJose)) kb rb (fromNumber 3))",0)
eval_tag(metta_example,7,"import!",'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(import! &self ../../synthesis/Synthesize.metta)",0)
eval_tag(metta_example,10,"import!",'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(import! &kb orientation.kif.metta)",0)
eval_tag(metta_example,13,"import!",'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(import! &rb ../rule-base.metta)",0)
eval_tag(metta_example,27,"bind!",'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(bind! &labelled-kb (new-space))",0)
eval_tag(metta_example,28,"match",'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(match &kb $x (add-atom &labelled-kb (: (WitnessOf $x) $x)))",0)
eval_tag(metta_example,32,"match",'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"(= (kb) (match &labelled-kb $x $x))",0)
eval_tag(metta_example,36,"match",'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"(= (rb) (match &rb $x $x))",0)
eval_tag(metta_example,42,"fromnumber",'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(synthesize (: $proof (orientation A C Right)) kb rb (fromNumber 2))",0)
eval_tag(metta_example,18,"import!",'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatch.metta',"!(import! &self metta:common:OrderedSet)",0)
eval_tag(metta_example,19,"import!",'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatch.metta',"!(import! &self metta:common:truthvalue:EvidentialTruthValue)",0)
eval_tag(metta_example,20,"import!",'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatch.metta',"!(import! &self metta:common:formula:ImplicationDirectIntroductionFormula)",0)
eval_tag(metta_example,64,"match",'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatch.metta',"   (match $kb",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/pln/match/DeductionImplicationDirectIntroductionMatchTest.metta',"!(import! &self metta:pln:match:ImplicationDirectIntroductionMatch)",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/pln/match/DeductionImplicationDirectIntroductionMatchTest.metta',"!(import! &self metta:pln:match:DeductionMatch)",0)
eval_tag(metta_example,20,"match",'../../../metta-examples-main/pln/match/DeductionImplicationDirectIntroductionMatchTest.metta',"!(match &self",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/pln/match/DeductionMatchTest.metta',"!(import! &self metta:pln:match:DeductionMatch)",0)
eval_tag(metta_example,10,"&self",'../../../metta-examples-main/pln/match/DeductionMatchTest.metta',"!(deduction_match &self)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatchTest.metta',"!(import! &self metta:pln:match:ImplicationDirectIntroductionMatch)",0)
eval_tag(metta_example,9,"&self",'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatchTest.metta',"!(idi_induction_match &self)",0)
eval_tag(metta_example,17,"import!",'../../../metta-examples-main/pln/match/DeductionMatch.metta',"!(import! &self metta:common:formula:DeductionFormula)",0)
eval_tag(metta_example,42,"let*",'../../../metta-examples-main/pln/match/DeductionMatch.metta',"   (let* (($prem1 (â\u0089\u009E $p $ptv))",0)
eval_tag(metta_example,2,"pragma!",'../../../metta-examples-main/pln/dependent-types/DeductionDTLTest.metta',";; !(pragma! type-check auto)",0)
eval_tag(metta_example,8,"import!",'../../../metta-examples-main/pln/dependent-types/DeductionDTLTest.metta',"!(import! &self metta:pln:dependent-types:DeductionDTL)",0)
eval_tag(metta_example,9,"import!",'../../../metta-examples-main/pln/dependent-types/DeductionDTLTest.metta',"!(import! &self metta:synthesis:Synthesize)",0)
eval_tag(metta_example,10,"import!",'../../../metta-examples-main/pln/dependent-types/DeductionDTLTest.metta',"!(import! &self metta:common:Record)",0)
eval_tag(metta_example,43,"get-type",'../../../metta-examples-main/pln/dependent-types/DeductionDTLTest.metta',";; !(get-type deduction_prf)",0)
eval_tag(metta_example,31,"import!",'../../../metta-examples-main/pln/dependent-types/ModusPonensDTL.metta',"!(import! &self metta:common:truthvalue:MeasEq)",0)
eval_tag(metta_example,32,"import!",'../../../metta-examples-main/pln/dependent-types/ModusPonensDTL.metta',"!(import! &self metta:common:formula:ModusPonensFormula)",0)
eval_tag(metta_example,45,"import!",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTL.metta',"!(import! &self metta:common:truthvalue:EvidentialTruthValue)",0)
eval_tag(metta_example,46,"import!",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTL.metta',"!(import! &self metta:common:formula:ImplicationDirectIntroductionFormula)",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(import! &self metta:pln:dependent-types:ImplicationDirectIntroductionDTL)",0)
eval_tag(metta_example,5,"import!",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(import! &self metta:synthesis:Synthesize)",0)
eval_tag(metta_example,9,"fromnumber",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"(= (kb) (superpose ((: P2 (â\u008A· P (fromNumber 2) True))",0)
eval_tag(metta_example,35,"fromnumber",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"(: base_prf (â\u0089\u009E (â\u0086\u0092 P Q) (ETV (:: (fromNumber 2) â\u0088\u0085) (STV 0 (count->confidence 1)))))",0)
eval_tag(metta_example,38,"get-type",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(get-type base_prf)",0)
eval_tag(metta_example,63,"get-type",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(get-type recursive_prf)",0)
eval_tag(metta_example,67,"fromnumber",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u008D\u0083 (fromNumber 2) (fromNumber 7))) kb rb (fromNumber 2))",0)
eval_tag(metta_example,70,"fromnumber",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u008D\u0083 (fromNumber 2) (fromNumber 3))) kb rb (fromNumber 2))",0)
eval_tag(metta_example,73,"fromnumber",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u008D\u0083 (fromNumber 3) (fromNumber 7))) kb rb (fromNumber 3))",0)
eval_tag(metta_example,77,"fromnumber",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (â\u0086\u0092 P Q) $etv)) kb rb (fromNumber 1))",0)
eval_tag(metta_example,111,"fromnumber",'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (â\u0086\u0092 P Q) $etv)) kb rb (fromNumber 4))",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/pln/dependent-types/ModusPonensDTLTest.metta',"!(import! &self metta:pln:dependent-types:ModusPonensDTL)",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/pln/dependent-types/ModusPonensDTLTest.metta',"!(import! &self metta:synthesis:Synthesize)",0)
eval_tag(metta_example,44,"fromnumber",'../../../metta-examples-main/pln/dependent-types/ModusPonensDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (big cow) (STV $s $c))) kb rb (fromNumber 0))   ;; (: cow_is_big (â\u0089\u009E (big cow) (STV 0.99 0.99)))",0)
eval_tag(metta_example,45,"fromnumber",'../../../metta-examples-main/pln/dependent-types/ModusPonensDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (chase cow dog) (STV $s $c))) kb rb (fromNumber 1))   ;; (: (ModusPonens cow_is_big x_is_big_chases_dog) (â\u0089\u009E (chase cow dog) (STV 0.9821 0.99)))",0)
eval_tag(metta_example,46,"fromnumber",'../../../metta-examples-main/pln/dependent-types/ModusPonensDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (see cow rabbit) (STV $s $c))) kb rb (fromNumber 2))   ;; (: (ModusPonens (ModusPonens cow_is_big x_is_big_chases_dog) cow_chases_dog_sees_rabbit) (â\u0089\u009E (see cow rabbit) (STV 0.975859 0.99)))",0)
eval_tag(metta_example,17,"import!",'../../../metta-examples-main/pln/dependent-types/DeductionDTL.metta',"!(import! &self metta:common:truthvalue:MeasEq)",0)
eval_tag(metta_example,18,"import!",'../../../metta-examples-main/pln/dependent-types/DeductionDTL.metta',"!(import! &self metta:common:formula:DeductionFormula)",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(import! &self metta:pln:dependent-types:ImplicationDirectIntroductionDTL)",0)
eval_tag(metta_example,5,"import!",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(import! &self metta:pln:dependent-types:DeductionDTL)",0)
eval_tag(metta_example,6,"import!",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(import! &self metta:synthesis:Synthesize)",0)
eval_tag(metta_example,13,"fromnumber",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"                    (: P2 (â\u008A· P (fromNumber 2) True))",0)
eval_tag(metta_example,14,"fromnumber",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"                    (: Q2 (â\u008A· Q (fromNumber 2) False))",0)
eval_tag(metta_example,15,"fromnumber",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"                    (: P7 (â\u008A· P (fromNumber 7) True))",0)
eval_tag(metta_example,16,"fromnumber",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"                    (: Q7 (â\u008A· Q (fromNumber 7) True))",0)
eval_tag(metta_example,49,"get-type",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(get-type deduction_idi_prf)",0)
eval_tag(metta_example,52,"fromnumber",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (â\u0086\u0092 P Q) $etv)) kb rb (fromNumber 1))",0)
eval_tag(metta_example,58,"fromnumber",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (â\u0086\u0092 P Q) $etv)) kb rb (fromNumber 3))",0)
eval_tag(metta_example,67,"fromnumber",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (â\u0086\u0092 P R) $etv)) kb rb (fromNumber 3))",0)
eval_tag(metta_example,74,"fromnumber",'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',";; !(synthesize (: (Deduction Pm Qm Rm $PQ QRm) (â\u0089\u009E (â\u0086\u0092 P R) $etv)) kb rb (fromNumber 5))",0)
eval_tag(metta_example,17,"import!",'../../../metta-examples-main/pln/equal/DeductionEqual.metta',"!(import! &self metta:common:formula:DeductionFormula)",0)
eval_tag(metta_example,18,"import!",'../../../metta-examples-main/pln/equal/ImplicationDirectIntroductionEqual.metta',"!(import! &self  metta:common:OrderedSet)",0)
eval_tag(metta_example,19,"import!",'../../../metta-examples-main/pln/equal/ImplicationDirectIntroductionEqual.metta',"!(import! &self  metta:common:truthvalue:EvidentialTruthValue)",0)
eval_tag(metta_example,20,"import!",'../../../metta-examples-main/pln/equal/ImplicationDirectIntroductionEqual.metta',"!(import! &self metta:common:formula:ImplicationDirectIntroductionFormula)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/pln/equal/ImplicationDirectIntroductionEqualTest.metta',"!(import! &self metta:common:formula:ImplicationDirectIntroductionEqual.metta)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/pln/equal/DeductionEqualTest.metta',"!(import! &self  metta:pln:equal:DeductionEqual)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntailTest.metta',"!(import! &self  metta:pln:entail:ImplicationDirectIntroductionEntail)",0)
eval_tag(metta_example,10,"match",'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntailTest.metta',"!(match &self (â\u008A¢ (â\u0089\u009E (â\u0086\u0092 P Q) $tv)) $tv)",0)
eval_tag(metta_example,14,"let*",'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntailTest.metta',"!(let* (($pa (â\u0089\u009E (P 42) (Bl True)))",0)
eval_tag(metta_example,23,"match",'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntailTest.metta',";; !(match &self (â\u008A¢ $p1 $p2 $p3 $p4 (â\u0089\u009E (â\u0086\u0092 P Q) $tv))",0)
eval_tag(metta_example,18,"import!",'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntail.metta',"!(import! &self metta:common:OrderedSet)",0)
eval_tag(metta_example,19,"import!",'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntail.metta',"!(import! &self metta:common:truthvalue:EvidentialTruthValue)",0)
eval_tag(metta_example,20,"import!",'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntail.metta',"!(import! &self metta:common:formula:ImplicationDirectIntroductionFormula)",0)
eval_tag(metta_example,17,"import!",'../../../metta-examples-main/pln/entail/DeductionEntail.metta',"!(import! &self metta:common:formula:DeductionFormula)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/pln/entail/DeductionEntailTest.metta',"!(import! &self metta:pln:entail:DeductionEntail)",0)
eval_tag(metta_example,11,"let*",'../../../metta-examples-main/pln/entail/DeductionEntailTest.metta',"!(let* (($p (P))",0)
eval_tag(metta_example,19,"match",'../../../metta-examples-main/pln/entail/DeductionEntailTest.metta',";!(match &self (â\u008A¢ $p $q $r $pq $qr (â\u0089\u009E (â\u0086\u0092 P R) $tv)) (S $p $q $r $pq $qr $tv))",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(import! &self metta:synthesis:experiments:synthesize-via-case)",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(import! &self metta:common:Record)",0)
eval_tag(metta_example,12,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(record syn ((: (. (. g f) h) (-> $in Bool)) (fromNumber 2))) ; (: (. (. g f) h) (-> Bool Bool))",0)
eval_tag(metta_example,13,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(record syn ((: (. $g h) (-> $in String)) (fromNumber 3))) ; (: (. f h) (-> Bool String)), (: (. (. (. f h) (. g f)) h) (-> Bool String))",0)
eval_tag(metta_example,14,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(record syn ((: (. $g h) (-> Number $out)) (fromNumber 3)))   ; No answer",0)
eval_tag(metta_example,15,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(record syn ((: (. g $f) (-> $in String)) (fromNumber 3))) ; No answer",0)
eval_tag(metta_example,16,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(record syn ((: (. g $f) (-> $in Bool)) (fromNumber 3)))   ; (: (. g f) (-> Number Bool)), (: (. g (. f h)) (-> Bool Bool)), (: (. g (. f (. h g))) (-> String Bool)), (: (. g (. (. f h) g)) (-> String Bool)), (. g (. (. f h) (. g f))) (-> Number Bool))",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-case.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,18,"case",'../../../metta-examples-main/synthesis/experiments/synthesize-via-case.metta',"(= (syn $query $depth) (case (facts) (($query $query))))",0)
eval_tag(metta_example,21,"case",'../../../metta-examples-main/synthesis/experiments/synthesize-via-case.metta',"(= (syn $query (S $k)) (case (rules)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify.metta',"!(import! &self metta:synthesis:Unify)",0)
eval_tag(metta_example,40,"unify",'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify.metta',"   (unify $query ($axiom) $query))",0)
eval_tag(metta_example,43,"unify",'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify.metta',"   (unify* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rule))",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-let.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,23,"let*",'../../../metta-examples-main/synthesis/experiments/synthesize-via-let.metta',"(= (syn $query (S $k)) (let* (((: $rule (-> $premise1 $premise2 $conclusion)) (rules))",0)
eval_tag(metta_example,2,"case",'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (Link $x B) (((Link A $y) (Link $x $y))))  ; [(Link A B)]",0)
eval_tag(metta_example,5,"case",'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (-> $x B) (((-> A $y) (-> $x $y))))  ; [(-> A B)]",0)
eval_tag(metta_example,9,"case",'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (f $x) (((Link A $y) (Link $x $y))))  ; [(Link A B)]",0)
eval_tag(metta_example,14,"case",'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (Link $x B) (((g $y) (Link $x $y))))  ; []",0)
eval_tag(metta_example,17,"case",'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (superpose ((Link $x B) (Node A) (Link $x C))) (((Link A $y) (Link $x $y))))  ; [(Link A B), (Link A C)]",0)
eval_tag(metta_example,20,"case",'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (g $y) (($z (case (f $x) (($z $z))))))  ; [(Link A B)]",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify-test.metta',"!(import! &self metta:synthesis:experiments:synthesize-via-unify)",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify-test.metta',"!(import! &self metta:common:Record)",0)
eval_tag(metta_example,25,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify-test.metta',"!(record synthesize ((: (. (. g f) h) (-> $in Bool)) kb rb (fromNumber 2))) ; (: (. (. g f) h) (-> Bool Bool)) (fromNumber 3))",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(import! &self metta:synthesis:experiments:synthesize-via-let)",0)
eval_tag(metta_example,3,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(import! &self metta:common:Record)",0)
eval_tag(metta_example,12,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(record syn ((: (. (. g f) h) (-> $in Bool)) (fromNumber 2))) ; (: (. (. g f) h) (-> Bool Bool))",0)
eval_tag(metta_example,13,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(record syn ((: (. $g h) (-> $in String)) (fromNumber 3))) ; (: (. f h) (-> Bool String)), (: (. (. (. f h) (. g f)) h) (-> Bool String))",0)
eval_tag(metta_example,14,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(record syn ((: (. $g h) (-> Number $out)) (fromNumber 3)))   ; No answer",0)
eval_tag(metta_example,15,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(record syn ((: (. g $f) (-> $in String)) (fromNumber 3))) ; No answer",0)
eval_tag(metta_example,16,"fromnumber",'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(record syn ((: (. g $f) (-> $in Bool)) (fromNumber 3)))   ; (: (. g f) (-> Number Bool)), (: (. g (. f h)) (-> Bool Bool)), (: (. g (. f (. h g))) (-> String Bool)), (: (. g (. (. f h) g)) (-> String Bool)), (. g (. (. f h) (. g f))) (-> Number Bool))",0)
eval_tag(metta_example,19,"let*",'../../../metta-examples-main/synthesis/experiments/unify-via-let.metta',"!(let* (($gy (g $y))",0)
eval_tag(metta_example,27,"let*",'../../../metta-examples-main/synthesis/experiments/unify-via-let.metta',"!(let* (($z (g $y)) ($z (f $x))) $z)  ; [(Link A B)]",0)
eval_tag(metta_example,12,"fromnumber",'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))",0)
eval_tag(metta_example,60,"case",'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"(= (synthesize $query $axiom $rule $depth) (case ($axiom) (($query $query))))",0)
eval_tag(metta_example,63,"case",'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"   (case ($rule)",0)
eval_tag(metta_example,93,"fromnumber",'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: (. (. g f) h) (-> $in Bool)) kb rb (fromNumber 2))) ; (: (. (. g f) h) (-> Bool Bool))",0)
eval_tag(metta_example,94,"fromnumber",'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: (. $g h) $type) kb rb (fromNumber 3))) ; (: (. f h) (-> Bool String)), (: (. (. g f) h) (-> Bool Bool)), (: (. (. h (. g f)) h) (-> Bool Number)), (: (. (. (. f h) (. g f)) h) (-> Bool String)), (: (. (. (. h g) f) h) (-> Bool Number))",0)
eval_tag(metta_example,95,"fromnumber",'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: (. $g h) (-> Number $out)) kb rb (fromNumber 3)))   ; No answer",0)
eval_tag(metta_example,96,"fromnumber",'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: (. g $f) (-> $in String)) kb rb (fromNumber 3))) ; No answer",0)
eval_tag(metta_example,97,"fromnumber",'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: (. g $f) (-> $in Bool)) kb rb (fromNumber 3)))   ; (: (. g f) (-> Number Bool)), (: (. g (. f h)) (-> Bool Bool)), (: (. g (. f (. h g))) (-> String Bool)), (: (. g (. (. f h) g)) (-> String Bool)), (: (. g (. (. f h) (. g f))) (-> Number Bool))",0)
eval_tag(metta_example,98,"fromnumber",'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: $term $type) kb rb (fromNumber 4)))     ; Too long to list",0)
eval_tag(metta_example,99,"fromnumber",'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',";; !(record synthesize ((: $term (-> Number Number)) (fromNumber 6) kb rb)) ; Too long to run",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,5,"pragma!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',";; !(pragma! type-check auto)",0)
eval_tag(metta_example,18,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (map $fn (Cons $head $tail)) (Cons ($fn $head) (map $fn $tail)))",0)
eval_tag(metta_example,23,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (filter $prd (Cons $head $tail)) (if ($prd $head)",0)
eval_tag(metta_example,40,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (interleave (Cons $head $tail) $ys) (Cons $head (interleave $ys $tail)))",0)
eval_tag(metta_example,45,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (prodWith $op Nil (Cons $head $tail)) Nil)",0)
eval_tag(metta_example,46,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (prodWith $op (Cons $head $tail) Nil) Nil)",0)
eval_tag(metta_example,47,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (prodWith $op (Cons $xhd $xtl) (Cons $yhd $ytl))",0)
eval_tag(metta_example,57,"case",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (well-typed $x) (case $x",0)
eval_tag(metta_example,65,"trace!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (synthesize $fns Z) (trace! (synthesize= $fns Z Nil) Nil))",0)
eval_tag(metta_example,66,"trace!",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (synthesize $fns (S Z)) (trace! (synthesize= $fns (S Z) $fns) $fns))",0)
eval_tag(metta_example,67,"let*",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (synthesize $fns (S (S $k))) (let* (($prgs (synthesize $fns (S $k)))",0)
eval_tag(metta_example,83,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(map inc (Cons 2 (Cons 3 (Cons 1 Nil))))  ; (Cons 3 (Cons 4 (Cons 2 Nil)))",0)
eval_tag(metta_example,88,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(filter even (Cons 2 (Cons 3 (Cons 1 Nil))))  ; (Cons 2 Nil)",0)
eval_tag(metta_example,92,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(interleave (Cons 1 (Cons 2 Nil)) (Cons \"a\" (Cons \"b\" Nil)))  ; (Cons 1 (Cons \"a\" (Cons 2 (Cons \"b\" Nil))))",0)
eval_tag(metta_example,95,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith * Nil (Cons 2 Nil))  ; Nil",0)
eval_tag(metta_example,96,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith * (Cons 1 Nil) Nil)  ; Nil",0)
eval_tag(metta_example,97,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith * (Cons 1 Nil) (Cons 2 Nil))  ; (Cons 2 Nil)",0)
eval_tag(metta_example,98,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith * (Cons 1 (Cons 2 Nil)) (Cons 3 (Cons 4 Nil)))  ; (Cons 3 (Cons 4 (Cons 6 (Cons 8 Nil))))",0)
eval_tag(metta_example,113,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (functions) (Cons f (Cons g Nil)))",0)
eval_tag(metta_example,115,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',";; (= (functions) (Cons f (Cons g (Cons h Nil))))",0)
eval_tag(metta_example,117,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith . (Cons g Nil) (Cons f Nil))  ; (Cons (. g f) Nil)",0)
eval_tag(metta_example,118,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith . (Cons f Nil) (Cons g Nil))  ; (Cons (. f g) Nil)",0)
eval_tag(metta_example,119,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith . (Cons f (Cons g Nil)) (Cons f (Cons g Nil)))  ; (Cons (. f f) (Cons (. f g) (Cons (. g f) (Cons (. g g) Nil))))",0)
eval_tag(metta_example,120,"cons",'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(synthesize (functions) (fromNumber 2))  ; (Cons (. f f) (Cons (. f g) (Cons (. g f) (Cons (. g g) Nil))))",0)
eval_tag(metta_example,10,"case",'../../../metta-examples-main/synthesis/experiments/synthesize-via-superpose.metta',"(= (well-typed $x) (case $x",0)
eval_tag(metta_example,25,"collapse",'../../../metta-examples-main/synthesis/experiments/synthesize-via-superpose.metta',";; !(collapse (. (superpose (f g)) (superpose (f g))))",0)
eval_tag(metta_example,27,"get-type",'../../../metta-examples-main/synthesis/experiments/synthesize-via-superpose.metta',";; !(get-type (. (superpose (f g)) (superpose (f g))))",0)
eval_tag(metta_example,36,"get-type",'../../../metta-examples-main/synthesis/experiments/synthesize-via-superpose.metta',"!(get-type (. (fns) (fns)))",0)
eval_tag(metta_example,23,"match",'../../../metta-examples-main/metta_amr/metta_to_amr/instances.metta',"    (match &self",0)
eval_tag(metta_example,13,"match",'../../../metta-examples-main/metta_amr/metta_to_amr/amr-connect.metta',"   (match &self (ROLE $concept $role $v) $role))",0)
eval_tag(metta_example,16,"match",'../../../metta-examples-main/metta_amr/metta_to_amr/amr-connect.metta',"   (match &self (CONNECT ($pred $v0 $v1) $concept)",0)
eval_tag(metta_example,5,"match",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"(= (match-else $pattern $template $else)",0)
eval_tag(metta_example,11,"match",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',";!(match-else (likes-001 $x $y) (its $x $y) nothing)",0)
eval_tag(metta_example,12,"collapse",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',";!(== (collapse (match &self (likes-01 $x $y) (its $x $y))) ())",0)
eval_tag(metta_example,13,"match",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',";!(let $r (match &self (likes-01 $x $y) (its $x $y)) 1)",0)
eval_tag(metta_example,15,"match",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',";!(match &self (likes-001 $x $y) (its $x $y))",0)
eval_tag(metta_example,17,"bind!",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"!(bind! &bk (new-space))",0)
eval_tag(metta_example,29,"match",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',";!(match &self (: $fact (Father person-001 $father)) $father)",0)
eval_tag(metta_example,30,"&self",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"; it's wrong, because Father takes exeplar of (Person $x), not itself",0)
eval_tag(metta_example,35,"let*",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta'," (let* (($f (father person-001))",0)
eval_tag(metta_example,40,"get-type",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"(let (Father $x $y) (get-type (father person-001)) $y)",0)
eval_tag(metta_example,41,"get-type",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"(get-type father)",0)
eval_tag(metta_example,42,"get-type",'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"!(get-type (father person-001))",0)
eval_tag(metta_example,9,"match",'../../../metta-examples-main/metta_amr/metta_to_amr/user.metta',"   (match &self (, (is-a $x $Role)",0)
eval_tag(metta_example,23,"match",'../../../metta-examples-main/metta_amr/metta_to_amr/user.metta',"     (match &self ($prop $x $y) ($prop $y))))",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/common/truthvalue/TruthValue.metta',"!(import! &self  metta:common:Num)",0)
eval_tag(metta_example,69,"let*",'../../../metta-examples-main/common/truthvalue/TruthValue.metta',"(= (inc-neg-count (STV $s $c)) (let* (($tot_cnt (confidence->count $c))",0)
eval_tag(metta_example,78,"let*",'../../../metta-examples-main/common/truthvalue/TruthValue.metta',"(= (inc-pos-count (STV $s $c)) (let* (($tot_cnt (confidence->count $c))",0)
eval_tag(metta_example,140,"let*",'../../../metta-examples-main/common/truthvalue/TruthValue.metta',"   (let* (($a (post-alpha (STV $pr $conf)))",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/common/truthvalue/EvidentialTruthValueTest.metta',"!(import! &self metta:common:truthvalue:EvidentialTruthValue)",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/common/truthvalue/EvidentialTruthValue.metta',"!(import! &self metta:common:truthvalue:TruthValue)",0)
eval_tag(metta_example,5,"import!",'../../../metta-examples-main/common/truthvalue/EvidentialTruthValue.metta',"!(import! &self metta:common:OrderedSet)",0)
eval_tag(metta_example,2,"import!",'../../../metta-examples-main/common/truthvalue/TruthValueTest.metta',"!(import! &self metta:common:truthvalue:TruthValue)",0)
eval_tag(metta_example,8,"import!",'../../../metta-examples-main/common/truthvalue/TemporalTruthValue.metta',"!(import! &self metta:common:truthvalue:EvidentialTruthValue)",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/common/formula/ModusPonensFormula.metta',"!(import! &self metta:common:truthvalue:TruthValue)",0)
eval_tag(metta_example,5,"import!",'../../../metta-examples-main/common/formula/ModusPonensFormula.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,9,"let*",'../../../metta-examples-main/common/formula/ModusPonensFormula.metta',"   (let*",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/common/formula/DeductionFormula.metta',"!(import! &self metta:common:truthvalue:TruthValue)",0)
eval_tag(metta_example,5,"import!",'../../../metta-examples-main/common/formula/DeductionFormula.metta',"!(import! &self metta:common:Num)",0)
eval_tag(metta_example,1,"import!",'../../../metta-examples-main/common/formula/DeductionFormulaTest.metta',"!(import! &self metta:common:formula:DeductionFormula)",0)
eval_tag(metta_example,4,"import!",'../../../metta-examples-main/common/formula/ImplicationDirectIntroductionFormula.metta',"!(import! &self metta:common:truthvalue:TruthValue)",0)
eval_tag(metta_example,1,"transfer!",'../../../metta-examples-main/recursion-schemes/src/examples/benchmark.metta',"!(transfer! \"schemes.metta\")",0)
eval_tag(metta_example,5,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/benchmark.metta',"(= (mapExpr $f (Const $x)) (Const $x))",0)
eval_tag(metta_example,12,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/benchmark.metta',"(= (evalExpr (Const $x)) $x)",0)
eval_tag(metta_example,16,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/benchmark.metta',"(= (nTimes (, $x (S Z))) (Const $x))",0)
eval_tag(metta_example,17,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/benchmark.metta',"(= (nTimes (, $_ Z)) (Const 0))",0)
eval_tag(metta_example,1,"transfer!",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"!(transfer! \"schemes.metta\")",0)
eval_tag(metta_example,5,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (mapExpr $f (Const $x)) (Const $x))",0)
eval_tag(metta_example,10,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (evalExpr (Const $x)) $x)",0)
eval_tag(metta_example,16,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"!((cata mapExpr evalExpr) (Fix (Plus (Fix (Plus (Fix (Var X)) (Fix (Const 2)))) (Fix (Const 40)))))",0)
eval_tag(metta_example,20,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (nTimes (, $x (S Z))) (Const $x))",0)
eval_tag(metta_example,21,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (nTimes (, $_ Z)) (Const 0))",0)
eval_tag(metta_example,30,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (diff (Const $_)) (Fix (Const 0)))",0)
eval_tag(metta_example,31,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (diff (Var $_)) (Fix (Const 1)))",0)
eval_tag(metta_example,35,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"!((para mapExpr diff) (Fix (Plus (Fix (Var X)) (Fix (Const 1)))))",0)
eval_tag(metta_example,38,"cons",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (expand (1p $x)) (Plus (Bind (Const 1)) (Pure $x)))",0)
eval_tag(metta_example,43,"match",'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"!(match &self (= (expand $X) $Y) $X)",0)
eval_tag(metta_tag_extra,3,"import!",'../../tests/extended_compat/metta-examples/red-black-lambda/red-black.metta',"!(import! &LC lambda-theory)",0)
eval_tag(metta_tag_extra,5,"match",'../../tests/extended_compat/metta-examples/red-black-lambda/red-black.metta',"(= (RedLambda $RV $BLC) (RTheory (match &LC (LambdaTheory ($RV $BLC) $rhs) $rhs)))",0)
eval_tag(metta_tag_extra,6,"match",'../../tests/extended_compat/metta-examples/red-black-lambda/red-black.metta',"(= (BlackLambda $BV $RLC) (BTheory (match &LC (LambdaTheory ($BV $RLC) $rhs) $rhs)))",0)
eval_tag(metta_tag_extra,51,"match",'../../tests/extended_compat/metta-examples/red-black-lambda/red-black.metta',"; (RedBlackLambda (rc (match &self (LambdaTheory ($RV $BLC) $rhs) $rhs)))",0)
eval_tag(metta_tag_extra,4,"bind!",'../../tests/extended_compat/metta-examples/python_from_metta/default.metta',"    (bind! $x (py-atom $y))) \n<br>\n (= (import $x)  \n<br>\n     (import $x as $x))",0)
eval_tag(metta_tag_extra,1,"import!",'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"; > this !(import! a b) doesn't work exactly.",0)
eval_tag(metta_tag_extra,3,"import!",'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"!(import! &self default)",0)
eval_tag(metta_tag_extra,7,"bind!",'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"    (bind! $x (py-atom $y))) \n<br>\n (= (import $x)  \n<br>\n     (import $x as $x)) \n<br>\n  \n<br>\n ; > Python imports",0)
eval_tag(metta_tag_extra,27,"py-atom",'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"(= (::JSON $x) (py-atom (json.loads $x)))",0)
eval_tag(metta_tag_extra,35,"py-atom",'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"    ((py-dot (py-atom $dict) get) $key)) \n<br>\n  \n<br>\n (: get_index (-> JsonAtom Number JsonAtom)) \n<br>\n (= (get_index $list $index) \n<br>\n     ((py-dot (py-atom $list) __getitem__) $index))",0)
eval_tag(metta_tag_extra,91,"py-list",'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"(bash (py-list ( \n<br>\n     \"echo\" \"Hello this is a bash shell\" \n<br>\n     ))) \n<br>\n  \n<br>\n ; > string concatenation",0)
eval_tag(metta_tag_extra,108,"py-dot",'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"    (py-dot  \n<br>\n         (py-atom (::str ('\\x20')) join)  \n<br>\n         ($x $y))) \n<br>\n  \n<br>\n ; ---------------------------------------",0)
eval_tag(metta_tag_extra,123,"py-dict",'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"    (json (py-dict ( \n<br>\n         (\"model\" \"gpt-4o\") \n<br>\n         (\"messages\" (py-list ( \n<br>\n             (py-dict ( \n<br>\n                 (\"role\" \"system\")",0)
eval_tag(metta_tag_extra,130,"py-dict",'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"            (py-dict ( \n<br>\n                 (\"role\" \"user\") \n<br>\n                 (\"content\" $userPrompt) \n<br>\n             )) \n<br>\n         )))",0)
eval_tag(metta_tag_extra,136,"py-dict",'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"    (headers (py-dict ( \n<br>\n         (\"Authorization\" (Bearer)) \n<br>\n     ))) \n<br>\n ))) \n<br>\n ",0)
eval_tag(metta_tag_extra,12,"py-list",'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',"(= (shell-command) (py-list ( \n<br>\n     \"echo\"  \n<br>\n     \"Hello this is a shell\" \n<br>\n     ))) \n<br>\n ",0)
eval_tag(metta_tag_extra,21,"bind!",'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',"    (bind! $x (py-atom $y))) \n<br>\n (= (import $x)  \n<br>\n     (import $x as $x)) \n<br>\n  \n<br>\n ; > Python imports",0)
eval_tag(metta_tag_extra,47,"py-atom",'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',"    (stdout (py-atom (PIPE)))",0)
eval_tag(metta_tag_extra,59,"bind!",'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',"    (bind! $name  \n<br>\n         (getattr $buffer $var) \n<br>\n         )) \n<br>\n (= (extract $buffer to $name ) \n<br>\n     (extract $buffer from (Literal $name) to $name))",0)
eval_tag(metta_tag_extra,115,"println!",'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',";;     (println! (hi))",0)
eval_tag(metta_tag_extra,116,"println!",'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',";;     (!(println! ($do)) (untill $stop $do))",0)
eval_tag(metta_tag_extra,121,"println!",'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',"    ;; (println! ($buf))",0)
eval_tag(metta_tag_extra,10,"sealed",'../../tests/extended_compat/metta-examples/SICP_book/chapter_1_3_2.metta',"    (let (quote ($v $b)) (sealed ($var) (quote ($var $body))) (let (quote $v) (quote $val) $b)) ) \n<br>\n  \n<br>\n ; For lambda with two inputs \n<br>\n (= ((lambda2 $var1 $var2 $body) $val1 $val2) \n<br>\n     (let (quote ($v1 $v2 $b)) (sealed ($var1 $var2) (quote ($var1 $var2 $body))) (let (quote ($v1 $v2)) (quote ($val1 $val2)) $b)) )",0)
eval_tag(metta_tag_extra,20,"sealed",'../../tests/extended_compat/metta-examples/SICP_book/chapter_1_3_2.metta',"    (let (quote ($v1 $v2 $v3 $b)) (sealed ($var1 $var2 $var3) (quote ($var1 $var2 $var3 $body))) (let (quote ($v1 $v2 $v3)) (quote ($val1 $val2 $val3)) $b)) ) \n<br>\n  \n<br>\n (= (sqr $x) (* $x $x)) \n<br>\n  \n<br>\n ; Cube can't be defined as (* $x $x $x) as in Scheme",0)
eval_tag(metta_tag_extra,93,"println!",'../../tests/extended_compat/metta-examples/SICP_book/chapter_1_3_2.metta',"                            (() (println! $next))",0)
eval_tag(metta_tag_extra,207,"&self",'../../tests/extended_compat/metta-examples/SICP_book/chapter_1_3_2.metta',"        ($self (/ $y 2) (inc $counter) $self))) \n<br>\n   ($iter $x 0 $iter))) \n<br>\n  \n<br>\n !(assertEqual \n<br>\n     (closest_pow2 12)",0)
eval_tag(metta_tag_extra,259,"&self",'../../tests/extended_compat/metta-examples/SICP_book/chapter_1_3_2.metta',"                ($self $next $self)))) \n<br>\n     (lambda1 $guess ($iter $guess $iter)))) \n<br>\n  \n<br>\n (= (ii_sqrt $x) \n<br>\n   ((iterative-improve close-enough? (lambda1 $y (average $y (/ $x $y)))) 1))",0)
eval_tag(metta_tag_extra,37,"new-state",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"                        (let $new-state (new-state $value) \n<br>\n                         (add-atom &self ((checked $var_name)  $new-state)) \n<br>\n  \n<br>\n                         )) \n<br>\n ;functions to get and set card state",0)
eval_tag(metta_tag_extra,42,"get-state",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"(= (get-card-state-value $var_name)(match &self ((checked $var_name) $x)  (get-state $x) ))",0)
eval_tag(metta_tag_extra,44,"change-state!",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"(= (set-card-state-value $var_name $value) (change-state! (match &self ((checked $var_name) $x)  $x) $value))",0)
eval_tag(metta_tag_extra,47,"match",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(match &self (character $t) (new-state-value! (character $t) False))",0)
eval_tag(metta_tag_extra,48,"match",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(match &self (weapon $t) (new-state-value! (weapon $t) False))",0)
eval_tag(metta_tag_extra,49,"match",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(match &self (room $t) (new-state-value! (room $t) False))",0)
eval_tag(metta_tag_extra,55,"new-state",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"                        (let $new-state (new-state $value) \n<br>\n                         (add-atom &self ((is_not_active $player)  $new-state)) \n<br>\n  \n<br>\n                         )) \n<br>\n ;functions to get and set player's state",0)
eval_tag(metta_tag_extra,60,"get-state",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"(= (get-player-state-value $player)(match &self ((is_not_active $player)  $x)  (get-state $x) ))",0)
eval_tag(metta_tag_extra,62,"change-state!",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"(= (set-player-state-value $player $value) (change-state! (match &self ((is_not_active $player)  $x)  $x) $value))",0)
eval_tag(metta_tag_extra,66,"match",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(match &self (player $t) (new-state-value! $t False))",0)
eval_tag(metta_tag_extra,71,"bind!",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',";!(bind! &target (character \"Colonel Mustard\") (weapon   \"dagger\") (room  \"The Ballroom\"))",0)
eval_tag(metta_tag_extra,106,"new-state",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(bind! &false (new-state False))",0)
eval_tag(metta_tag_extra,114,"case",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"         (case (match &self ($player left $next_player) $next_player) \n<br>\n             ( \n<br>\n                 ($next_player \n<br>\n                     (case (match &self ($next_player ($room_name $room)) $room_name) \n<br>\n                         (",0)
eval_tag(metta_tag_extra,120,"case",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"                                (case (match &self ($next_player ($weapon_name $weapon)) $weapon_name) \n<br>\n                                     ( \n<br>\n                                         (%void% \n<br>\n                                             (case (match &self ($next_player ($character_name $character)) $character_name) \n<br>\n                                                 (",0)
eval_tag(metta_tag_extra,152,"new-state",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(let $test (new-state ()) \n<br>\n     (add-atom &self ( = (test-state) $test) ) \n<br>\n ) \n<br>\n  \n<br>\n (= (set-test-state $val)",0)
eval_tag(metta_tag_extra,157,"change-state!",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"    (let() (change-state! (test-state) $val) (empty))",0)
eval_tag(metta_tag_extra,161,"get-state",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"   (get-state (test-state))",0)
eval_tag(metta_tag_extra,168,"match",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"    (let ($r $w $c) (match &self (, \n<br>\n                     (character $c) ((checked (character $c)) &false) \n<br>\n                     (room $r) ((checked (room $r)) &false) \n<br>\n                     (weapon $w) ((checked (weapon $w)) &false)) ($r $w $c) ) \n<br>\n         (case  (match &self ($player ($room_name $r)) $room_name)",0)
eval_tag(metta_tag_extra,175,"case",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"                     (case (match &self ($player ($character_name $c)) $character_name) \n<br>\n                         ( \n<br>\n                             (%void% \n<br>\n                                 (case (match &self ($player ($weapon_name $w)) $weapon_name) \n<br>\n                                     (",0)
eval_tag(metta_tag_extra,207,"match",'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"                                (let $x (match &self (,($player left $x) ((is_not_active $x) &false)) $x) \n<br>\n                                      (process-game $x) \n<br>\n                                 ) \n<br>\n                             ) \n<br>\n                         )",0)
eval_tag(metta_tag_extra,2,"import!",'../../tests/extended_compat/metta-examples/traverser/basic.metta',"!(import! &self tinkerpop-modern.metta)",0)
eval_tag(metta_tag_extra,4,"match",'../../tests/extended_compat/metta-examples/traverser/basic.metta',"(= (transform_ $pattern $query) (match &self $pattern (let $_ (add-atom &self $query) $query)))",0)
eval_tag(metta_tag_extra,5,"match",'../../tests/extended_compat/metta-examples/traverser/basic.metta',"(= (transform $pattern $query) (match &self $pattern $query))",0)
eval_tag(metta_tag_extra,1,"add-atom",'../../tests/extended_compat/metta-examples/traverser/creation.metta',"(= (added-atom! $x) (let $_ (add-atom &self $x) $x))",0)
eval_tag(metta_tag_extra,3,"match",'../../tests/extended_compat/metta-examples/traverser/creation.metta',"(= (transform $pattern $query) (match &self $pattern $query))",0)
eval_tag(metta_tag_extra,4,"match",'../../tests/extended_compat/metta-examples/traverser/creation.metta',"(= (transform_ $pattern $query) (match &self $pattern (added-atom! $query)))",0)
eval_tag(metta_tag_extra,18,"new-state",'../../tests/extended_compat/metta-examples/traverser/creation.metta',"!(bind! node# (new-state 0))",0)
eval_tag(metta_tag_extra,20,"get-state",'../../tests/extended_compat/metta-examples/traverser/creation.metta',"(= (addV $label) (added-atom! (Node $label (get-state node#))))",0)
eval_tag(metta_tag_extra,21,"change-state!",'../../tests/extended_compat/metta-examples/traverser/creation.metta',"(= (addV $label) (let $_ (change-state! node# (+ (get-state node#) 1)) (empty)))",0)
eval_tag(metta_tag_extra,26,"bind!",'../../tests/extended_compat/metta-examples/traverser/creation.metta',"!(bind! v1 (property age 29 (property name marko (addV person))))",0)
eval_tag(metta_tag_extra,28,"bind!",'../../tests/extended_compat/metta-examples/traverser/creation.metta',"!(bind! v2 (property lang java (property name lop (addV software))))",0)
eval_tag(metta_tag_extra,3,"println!",'../../tests/extended_compat/metta-examples/stack-based/interpreter.metta',"(= ((basic ($s $x)) say) (let $_ (println! $x) (basic $s)))",0)
eval_tag(metta_tag_extra,33,"println!",'../../tests/extended_compat/metta-examples/stack-based/rewrites.metta',"(= (($s $x) say) (let  $_ (println! $x) $s))",0)
eval_tag(metta_tag_extra,39,"cons",'../../tests/extended_compat/metta-examples/stack-based/rewrites.metta',"(= (($s (Cons $f $r)) apply) ((($s $f) $r) apply))",0)
eval_tag(metta_tag_extra,41,"cons",'../../tests/extended_compat/metta-examples/stack-based/rewrites.metta',"!(((E 6) (Cons dup (Cons mul Nil))) apply)",0)
eval_tag(metta_tag_extra,10,"car-atom",'../../tests/extended_compat/metta-examples/perfect-numbers/basic.metta',"(= (sumh $xs) (if (== $xs ()) 0 (+ (sumh (cdr-atom $xs)) (car-atom $xs))))",0)
eval_tag(metta_tag_extra,13,"collapse",'../../tests/extended_compat/metta-examples/perfect-numbers/basic.metta',"(= (psum $x) (sumh (collapse (pcond (range 1 (- $x 1) 1) $x))))",0)
eval_tag(metta_tag_extra,8,"cons",'../../tests/extended_compat/metta-examples/logic/memb.metta'," (= (memb $X (Cons $H $Tail)) \n<br>\n     (or (eq $X $H) (memb $X $Tail))) \n<br>\n  \n<br>\n ; find X that is member of both lists \n<br>\n !(let $res (and (memb $X (Cons 0 (Cons 2 Nil))) (memb $X (Cons 2 (Cons 3 Nil))))   (if $res $X None))",0)
eval_tag(metta_tag_extra,4,"let*",'../../tests/extended_compat/metta-examples/logic/all_any.metta',"       (let* (($head (car-atom $list)) \n<br>\n               ($tail (cdr-atom $list))) \n<br>\n               ($op $head (foldl $tail $init $op))) \n<br>\n    ) \n<br>\n )",0)
eval_tag(metta_tag_extra,17,"let*",'../../tests/extended_compat/metta-examples/logic/all_any.metta',"        (let* ( ($tail (cdr-atom $A)) \n<br>\n                 ($head (car-atom $A)) \n<br>\n                ) \n<br>\n             (if $head True (any $tail)))) \n<br>\n )",0)
eval_tag(metta_tag_extra,15,"cons",'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"; convert (a b c) to (Cons a (Cons b (Cons c Nil)))",0)
eval_tag(metta_tag_extra,18,"cdr-atom",'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"    (if (== () $x) Nil (let $cdr (cdr-atom $x) \n<br>\n                                 (Cons (car-atom $x) (makelist $cdr))) \n<br>\n     ) \n<br>\n ) \n<br>\n ",0)
eval_tag(metta_tag_extra,32,"cons",'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (memb $X (Cons $X $Tail)) True)",0)
eval_tag(metta_tag_extra,36,"cons",'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (memb $X (Cons $H $Tail)) \n<br>\n     (memb $X $Tail)) \n<br>\n  \n<br>\n  \n<br>\n (= (same $X $X) True)",0)
eval_tag(metta_tag_extra,46,"get-metatype",'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"    (let $type (get-metatype $x) (if (== $type Variable) True False))) \n<br>\n (= (nth-var-iter $index (Cons $H $Tail) $item $base) \n<br>\n         (nth-var $Tail $item $H $base $index)) \n<br>\n (= (nth-var $List $item $item $base $base) True) \n<br>\n (= (nth-var (Cons $H $Tail) $item $prev_head $N $base)",0)
eval_tag(metta_tag_extra,55,"cons",'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (nth $index (Cons $H $Tail) $item $base) \n<br>\n     (if (is-variable $index) \n<br>\n             (nth-var-iter $index (Cons $H $Tail) $item $base) \n<br>\n             (nth-det $index (Cons $H $Tail) $item $base)) ) \n<br>\n ",0)
eval_tag(metta_tag_extra,62,"cons",'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (nth-det $index (Cons $H $Tail) $item $base) \n<br>\n         (if (eq $index $base) (eq $H $item) (nth-det (- $index 1) $Tail $item 1))) \n<br>\n  \n<br>\n  \n<br>\n (= (nth1 $index $list $item) (nth $index $list $item 1))",0)
eval_tag(metta_tag_extra,73,"cons",'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (nextto-impl $x $y (Cons $x (Cons $y $Tail))) True)",0)
eval_tag(metta_tag_extra,77,"cons",'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (nextto-impl $x $y (Cons $head $Tail)) \n<br>\n     (nextto-impl $x $y $Tail)) \n<br>\n  \n<br>\n  \n<br>\n ",0)
eval_tag(metta_tag_extra,4,"union",'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"; !(union (range 1 13 1) (range 10 20 2))",0)
eval_tag(metta_tag_extra,5,"intersection",'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"; !(intersection (range 1 13 1) (range 10 20 2))",0)
eval_tag(metta_tag_extra,6,"subtraction",'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"; !(subtraction (range 10 20 2) (range 1 16 1))",0)
eval_tag(metta_tag_extra,9,"let*",'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"  (let* (($m3 (collapse (range 3 $n 3))) \n<br>\n          ($m5 (collapse (range 5 $n 5))) \n<br>\n          ($r (collapse (range 1 $n 1))) \n<br>\n          ($m35 (collapse (intersection (superpose $m3) (superpose $m5)))) \n<br>\n          ($m3n5 (collapse (subtraction (superpose $m3) (superpose $m5))))",0)
eval_tag(metta_tag_extra,14,"collapse",'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"         ($m5n3 (collapse (subtraction (superpose $m5) (superpose $m3))))",0)
eval_tag(metta_tag_extra,15,"collapse",'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"         ($m3m5 (collapse (union (superpose $m3) (superpose $m5))))",0)
eval_tag(metta_tag_extra,16,"collapse",'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"         ($n3n5 (collapse (subtraction (superpose $r) (superpose $m3m5))))) \n<br>\n         (union (union (FizzBuzz (superpose $m35)) (Nothing (superpose $n3n5))) (union (Fizz (superpose $m3n5)) (Buzz (superpose $m5n3)))))) \n<br>\n  \n<br>\n !(unique (fizzbuzz 50))",0)
eval_tag(metta_tag_extra,4,"case",'../../tests/extended_compat/metta-examples/fizzbuzz/simple.metta',"(= (fizzbuzz_ $fizz $buzz $n) (case ($fizz $buzz) ( \n<br>\n     ((0 0) (FizzBuzz $n)) \n<br>\n     ((0 $_1) (Fizz $n)) \n<br>\n     (($_2 0) (Buzz $n)) \n<br>\n     ($_3 (Nothing $n))",0)
eval_tag(metta_tag_extra,3,"union",'../../tests/extended_compat/metta-examples/prob-dep-types/prob_dep_types.metta',"(= (Union $t1 $t2) $t1)",0)
eval_tag(metta_tag_extra,4,"union",'../../tests/extended_compat/metta-examples/prob-dep-types/prob_dep_types.metta',"(= (Union $t1 $t2) $t2)",0)
eval_tag(metta_tag_extra,5,"union",'../../tests/extended_compat/metta-examples/prob-dep-types/prob_dep_types.metta',"(: random (-> $t1 $t2 (Union $t1 $t2)))",0)
eval_tag(metta_tag_extra,45,"union",'../../tests/extended_compat/metta-examples/prob-dep-types/prob_dep_types.metta',"(= (Bool_U_Color) (Union Bool Color))",0)
eval_tag(metta_tag_extra,3,"union",'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"(= (Union $t1 $t2) $t1)",0)
eval_tag(metta_tag_extra,4,"union",'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"(= (Union $t1 $t2) $t2)",0)
eval_tag(metta_tag_extra,77,"match",'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"!(match &self (: A $t) ($t))",0)
eval_tag(metta_tag_extra,79,"match",'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"  (match &self (: A $t) ($t))",0)
eval_tag(metta_tag_extra,85,"match",'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"!(match &self (: a $t) ($t))",0)
eval_tag(metta_tag_extra,87,"match",'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"  (match &self (: a $t) ($t))",0)
eval_tag(metta_tag_extra,89,"match",'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"!(match &self (: a' $t) ($t))",0)
eval_tag(metta_tag_extra,91,"match",'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"  (match &self (: a' $t) ($t))",0)
eval_tag(metta_tag_extra,3,"transfer!",'../../tests/extended_compat/metta-examples/recursion-schemes/src/schemes.metta',"!(transfer! \"base.metta\")",0)
eval_tag(metta_tag_extra,1,"import!",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"; !(import! &self logistics-i-1)",0)
eval_tag(metta_tag_extra,2,"import!",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"; !(import! &self blocks-i-1)",0)
eval_tag(metta_tag_extra,3,"import!",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(import! &self blocks-i-0)",0)
eval_tag(metta_tag_extra,9,"collapse",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (subset $subset $set) (if (== (collapse (subtraction (superpose $subset) (intersection (superpose $set) (superpose $subset)))) ()) True False))",0)
eval_tag(metta_tag_extra,15,"collapse",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (subset (collapse (pre (pick-up A))) (collapse (valuation (state 0)))) \n<br>\n               True) \n<br>\n  \n<br>\n ; equality of two sets, returns True iff s1 == s2 \n<br>\n (= (seteq $set1 $set2) (and (subset $set1 $set2) (subset $set2 $set1)))",0)
eval_tag(metta_tag_extra,34,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (arity $prop) (match &self (arity $prop $n) $n))",0)
eval_tag(metta_tag_extra,43,"subtraction",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"  (union (subtraction (valuation (state $idx)) (eff-neg $action)) (eff-pos $action))",0)
eval_tag(metta_tag_extra,55,"new-state",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(bind! state# (new-state 1))",0)
eval_tag(metta_tag_extra,56,"get-state",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (idx) (- (get-state state#) 1))",0)
eval_tag(metta_tag_extra,60,"let*",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"   (let* (($current_id (get-state state#)) \n<br>\n           ($_1 (add-atom &self (= (valuation (state $current_id)) \n<br>\n                                (superpose $conditions)))) \n<br>\n           ($_2 (change-state! state# (+ (get-state state#) 1)))) \n<br>\n     $current_id))",0)
eval_tag(metta_tag_extra,74,"collapse",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (seteq (collapse (valuation (state 0))) \n<br>\n                      ((ontable A) (ontable B) (ontable C) (clear A) (clear B) (clear C) (handempty))) \n<br>\n                True) \n<br>\n  \n<br>\n !(assertEqual (match &self (= (valuation (state $idx)) $props) (if (seteq (collapse $props) (collapse (valuation (state 0)))) $idx (empty)))",0)
eval_tag(metta_tag_extra,83,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (find_state $props) (match &self (= (valuation (state $idx)) $props2) \n<br>\n                        (if (seteq $props (collapse $props2)) $idx (empty)))) \n<br>\n  \n<br>\n  \n<br>\n !(assertEqual (find_state (collapse (valuation (state 0))))",0)
eval_tag(metta_tag_extra,101,"case",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"    (case (find_state $conditions) \n<br>\n          ((Empty (save $conditions)) \n<br>\n           ($idx $idx)) \n<br>\n     ) \n<br>\n )",0)
eval_tag(metta_tag_extra,108,"get-state",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',";               (- (get-state state#) 1)) \n<br>\n  \n<br>\n ; !(assertEqual (valuation (state (- (get-state state#) 1))) \n<br>\n ;               (superpose ((test s3)))) \n<br>\n ",0)
eval_tag(metta_tag_extra,120,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (match &self (= (valuation (state $n)) $r) $n) \n<br>\n               (superpose (0 1))) \n<br>\n  \n<br>\n  \n<br>\n ; EXAMPLE: STACK BLOCKS A AND B",0)
eval_tag(metta_tag_extra,127,"collapse",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (valuation (state (save (collapse (eval (state 0) (pick-up A)))))) \n<br>\n               (superpose ((holding A) (ontable B) (ontable C) (clear B) (clear C)))) \n<br>\n ; stack A on B \n<br>\n !(assertEqual (valuation (state (save (collapse (eval (state (idx)) (stack A B)))))) \n<br>\n               (superpose ((on A B) (handempty)",0)
eval_tag(metta_tag_extra,138,"collapse",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"  (save (collapse (eval (state $idx) $action)))",0)
eval_tag(metta_tag_extra,155,"collapse",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (can-apply (state $idx) $action) (subset (collapse (pre $action)) (collapse (valuation (state $idx)))))",0)
eval_tag(metta_tag_extra,168,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (all-actions) (match &self (action $name) $name))",0)
eval_tag(metta_tag_extra,175,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (oftype $type) (match &self (isa $name $type) $name))",0)
eval_tag(metta_tag_extra,184,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"; (= (ground $action) (fmap oftype (match &self (types $action ($x $y)) ($action $x $y))))",0)
eval_tag(metta_tag_extra,186,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ()) ($action)))",0)
eval_tag(metta_tag_extra,187,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x)) ($action (oftype $x))))",0)
eval_tag(metta_tag_extra,188,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x $y)) ($action (oftype $x) (oftype $y))))",0)
eval_tag(metta_tag_extra,189,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x $y $z)) ($action (oftype $x) (oftype $y) (oftype $z))))",0)
eval_tag(metta_tag_extra,221,"collapse",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (partial-apply-test $a) (if (can-apply (state 0) $a) ($a (collapse (eval (state 0) $a))) (empty)))",0)
eval_tag(metta_tag_extra,233,"let*",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"        (let* (($idx2 (save_if_new (collapse (eval (state $idx) $a)))) \n<br>\n               ($_1 (add-atom &self (edge (state $idx) (state $idx2) $a)))) \n<br>\n               (edge (state $idx) (state $idx2) $a)) \n<br>\n         (empty) \n<br>\n     )",0)
eval_tag(metta_tag_extra,249,"new-state",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(bind! expand# (new-state 0))",0)
eval_tag(metta_tag_extra,250,"get-state",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (expand) (if (< (get-state expand#) (get-state state#)) \n<br>\n                 (let* (($_1 (add-edge (state (get-state expand#))(ground (all-actions)))) \n<br>\n                       ($_2 (change-state! expand# (+ (get-state expand#) 1))) \n<br>\n                       ($_3 (expand))) \n<br>\n                       (get-state expand#)",0)
eval_tag(metta_tag_extra,263,"get-state",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(get-state expand#)",0)
eval_tag(metta_tag_extra,264,"get-state",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(get-state state#)",0)
eval_tag(metta_tag_extra,267,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(match &self (edge $x $y $z) (edge $x $y $z))",0)
eval_tag(metta_tag_extra,1,"import!",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta',"; !(import! &self blocks-domain.metta)",0)
eval_tag(metta_tag_extra,2,"import!",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta',"!(import! &self logistics-i-1_flat.metta)",0)
eval_tag(metta_tag_extra,6,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta'," (match &self (precondition $action $y) $y)) \n<br>\n  \n<br>\n ; !(preconditions pick-up) \n<br>\n !(preconditions FLY-AIRPLANE)       ; > (at airplane loc-from) \n<br>\n ",0)
eval_tag(metta_tag_extra,14,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (arity $prop $n) $n)) \n<br>\n !(arity at)                         ; > 2 \n<br>\n  \n<br>\n  \n<br>\n ; GET ALL PROPOSITIONS THAT HOLD IN A STATE",0)
eval_tag(metta_tag_extra,20,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (holds $state $p) $p)) \n<br>\n  \n<br>\n  !(holds init)                  ; >[(in-city pos2 cit2), (at obj23 pos2), (in-city pos1 cit1), (at tru1 pos1), (at obj11 pos1), (in-city apt1 cit1), (at obj21 pos2), (at tru2 pos2), (at apn1 apt2), (at obj13 pos1), (at obj22 pos2), (in-city apt2 cit2), (at obj12 pos1)] \n<br>\n  \n<br>\n ",0)
eval_tag(metta_tag_extra,28,"match",'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (holds $state $prop) $prop)) \n<br>\n  \n<br>\n !(holds init (at obj13 pos1))           ; > [(at obj13 pos1)] \n<br>\n !(holds init (at smt pos1))             ; > []",0)
eval_tag(metta_tag_extra,23,"match",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/instances.metta',"    (match &self \n<br>\n             (, (is-a $r $rel) \n<br>\n                (is-a $s $subj) \n<br>\n                ($r :ARG0 $s) \n<br>\n                (Fact $r $tv))",0)
eval_tag(metta_tag_extra,28,"match",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/instances.metta',"            (, (match &self ($r $role $res) \n<br>\n                      ($r $role $res)) \n<br>\n                 $tv) \n<br>\n     ) \n<br>\n )",0)
eval_tag(metta_tag_extra,13,"match",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/amr-connect.metta',"   (match &self (ROLE $concept $role $v) $role)) \n<br>\n  \n<br>\n (= (tell ($pred $arg0 $arg1)) \n<br>\n    (match &self (CONNECT ($pred $v0 $v1) $concept) \n<br>\n           ($concept ((get-role $concept $v0) $arg0)",0)
eval_tag(metta_tag_extra,6,"match",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',"   (let $r (match &self $pattern $template) \n<br>\n         (if (== $r (superpose ())) \n<br>\n             $else \n<br>\n             $r))) \n<br>\n ",0)
eval_tag(metta_tag_extra,12,"collapse",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',";!(== (collapse (match &self (likes-01 $x $y) (its $x $y))) ())",0)
eval_tag(metta_tag_extra,13,"match",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',";!(let $r (match &self (likes-01 $x $y) (its $x $y)) 1)",0)
eval_tag(metta_tag_extra,15,"match",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',";!(match &self (likes-001 $x $y) (its $x $y))",0)
eval_tag(metta_tag_extra,17,"bind!",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',"!(bind! &bk (new-space))",0)
eval_tag(metta_tag_extra,29,"match",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',";!(match &self (: $fact (Father person-001 $father)) $father)",0)
eval_tag(metta_tag_extra,35,"let*",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta'," (let* (($f (father person-001)) \n<br>\n         ($t (get-type $f)) \n<br>\n         ((Father $p1 $p2) $t)) \n<br>\n        $p2) \n<br>\n ",0)
eval_tag(metta_tag_extra,40,"get-type",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',"(let (Father $x $y) (get-type (father person-001)) $y)",0)
eval_tag(metta_tag_extra,41,"get-type",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',"(get-type father)",0)
eval_tag(metta_tag_extra,42,"get-type",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',"!(get-type (father person-001))",0)
eval_tag(metta_tag_extra,9,"match",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/user.metta',"   (match &self (, (is-a $x $Role) \n<br>\n                    (Has $Role $Prop)) \n<br>\n                 $Prop)) \n<br>\n  \n<br>\n (find-prop user)",0)
eval_tag(metta_tag_extra,23,"match",'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/user.metta',"     (match &self ($prop $x $y) ($prop $y)))) \n<br>\n  \n<br>\n (= (get-prop-value $prop $x) \n<br>\n    (match &self ($prop $x $y) $y)) \n<br>\n ",0)
eval_tag(metta_tag_extra,1,"transfer!",'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/benchmark.metta',"; !(transfer! \"../schemes.metta\")",0)
eval_tag(metta_tag_extra,2,"transfer!",'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/benchmark.metta',"!(transfer! \"schemes.metta\")",0)
eval_tag(metta_tag_extra,1,"import!",'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/expression.metta',"; !(import! &self \"../schemes.metta\")",0)
eval_tag(metta_tag_extra,2,"import!",'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/expression.metta',"; !(import! &self ../schemes.metta)",0)
eval_tag(metta_tag_extra,3,"transfer!",'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/expression.metta',"!(transfer! \"schemes.metta\")",0)
eval_tag(metta_tag_extra,45,"match",'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/expression.metta',"!(match &self (= (expand $X) $Y) $X)",0)
eval_tag_found(rust,"match","","","",0)
eval_tag_found(rust,"get-type","","","",0)
eval_tag_found(rust,"get-metatype","","","",0)
eval_tag_found(rust,"add-atom","","","",0)
eval_tag_found(rust,"get-atoms","","","",0)
eval_tag_found(rust,"get-state","","","",0)
eval_tag_found(rust,"collapse","","","",0)
eval_tag_found(rust,"union","","","",0)
eval_tag_found(rust,"case","","","",0)
eval_tag_found(rust,"pragma!","","","",0)
eval_tag_found(rust,"bind!","","","",0)
eval_tag_found(rust,"println!","","","",0)
eval_tag_found(rust,"sealed","","","",0)
eval_tag_found(rust,"&self","","","",0)
eval_tag_found(rust,"register-module!","","","",0)
eval_tag_found(rust,"new-space","","","",0)
eval_tag_found(rust,"cdr-atom","","","",0)
eval_tag_found(rust,"format-args","","","",0)
eval_tag_found(rust,"let*","","","",0)
eval_tag_found(rust,"change-state!","","","",0)
eval_tag_found(rust,"mod-space!","","","",0)
eval_tag_found(rust,"capture","","","",0)
eval_tag_found(rust,"unique","","","",0)
eval_tag_found(rust,"subtraction","","","",0)
eval_tag_found(rust,"get-type-space","","","",0)
eval_tag_found(rust,"flip","","","",0)
eval_tag_found(rust,"remove-atom","","","",0)
eval_tag_found(rust,"car-atom","","","",0)
eval_tag_found(rust,"cons-atom","","","",0)
eval_tag_found(rust,"intersection","","","",0)
eval_tag_found(rust,"trace!","","","",0)
eval_tag_found(metta_ontol_pl,"case","flow_control","case selection."," conditional_execution",0)
eval_tag_found(metta_ontol_pl,"let*","variable_assignment","sequential variable assignment."," sequential",0)
eval_tag_found(metta_ontol_pl,"sealed","variable_scoping","variable scoping.","",0)
eval_tag_found(metta_ontol_pl,"function","function_definition","function block.","",0)
eval_tag_found(metta_ontol_pl,"return","function_definition","return value of a function block."," return_value",0)
eval_tag_found(metta_ontol_pl,"catch","error_handling","catches exceptions."," exception_handling",0)
eval_tag_found(metta_ontol_pl,"throw","error_handling","throws exceptions."," exception_handling",0)
eval_tag_found(metta_ontol_pl,"collapse","data_structures","collapses a structure."," manipulation",0)
eval_tag_found(metta_ontol_pl,"sequential","data_structures","sequentially applies operations."," sequential_operations",0)
eval_tag_found(metta_ontol_pl,"repr","data_structures","represent an expression as string."," repr ",0)
eval_tag_found(metta_ontol_pl,"parse","data_structures","parse a string to an expression."," parse ",0)
eval_tag_found(metta_ontol_pl,"limit!","iteration_control","limits the number of iterations.","",0)
eval_tag_found(metta_ontol_pl,"offset!","iteration_control","adjusts the starting point of iteration.","",0)
eval_tag_found(metta_ontol_pl,"number-of","iteration_control","returns iteration count.","",0)
eval_tag_found(metta_ontol_pl,"pragma!","compiler_directive","compiler directive for optimizations/settings."," optimization",0)
eval_tag_found(metta_ontol_pl,"include!","code_inclusion","includes code from another file or context.","",0)
eval_tag_found(metta_ontol_pl,"load-ascii","file_handling","loads ascii file content.","",0)
eval_tag_found(metta_ontol_pl,"extend-py!","integration","extends integration with python."," python",0)
eval_tag_found(metta_ontol_pl,"import!","module_import","imports an external module or file.","",0)
eval_tag_found(metta_ontol_pl,"eval-for","evaluation","evaluates assuming a return type."," type_assumption",0)
eval_tag_found(metta_ontol_pl,"call!","dynamic_call","tries to dynamically guess if predicate or function.","",0)
eval_tag_found(metta_ontol_pl,"predicate-arity","function_definition","defines the arity of predicates/functions."," arity",0)
eval_tag_found(metta_ontol_pl,"call-fn!","dynamic_call","calls a function dynamically."," function",0)
eval_tag_found(metta_ontol_pl,"call-string!","evaluation","evaluates a string of prolog code."," prolog_code",0)
eval_tag_found(metta_ontol_pl,"match","pattern_matching","matches patterns within structures or data.","",0)
eval_tag_found(metta_ontol_pl,"get-atoms","data_retrieval","retrieves atoms from a structure.","",0)
eval_tag_found(metta_ontol_pl,"new-space","memory_allocation","allocates new space or memory region.","",0)
eval_tag_found(metta_ontol_pl,"remove-atom","manipulation","removes an atom from a structure.","",0)
eval_tag_found(metta_ontol_pl,"add-atom","manipulation","replaces an atom within a structure.","",0)
eval_tag_found(metta_ontol_pl,"transfer!","memory_management","transfers space content to another space.","",0)
eval_tag_found(metta_ontol_pl,"fromnumber","type_conversion","converts from a numeric type to another type.","",0)
eval_tag_found(metta_ontol_pl,"coerce","type_conversion","forces argument types for compatibility."," compatibility",0)
eval_tag_found(metta_ontol_pl,"=","logic","equality/unification operator."," equality",0)
eval_tag_found(metta_ontol_pl,"time!","execution_timing","execution timing.","",0)
eval_tag_found(metta_ontol_pl,"trace!","debugging","prints some debug information."," information_printing",0)
eval_tag_found(metta_ontol_pl,"no-rtrace!","debugging","disables tracing for debugging."," trace_control",0)
eval_tag_found(metta_ontol_pl,"rtrace!","debugging","enables tracing for debugging."," trace_control",0)
eval_tag_found(metta_ontol_pl,"println!","output","prints text with newline to output."," text_printing",0)
eval_tag_found(metta_ontol_pl,"with-output-to!","output","redirects output to a specified target."," redirection",0)
eval_tag_found(metta_ontol_pl,"print","output","prints text to output."," text_printing",0)
eval_tag_found(metta_ontol_pl,"change-state!","state_management","changes the state of a system component."," system_integration",0)
eval_tag_found(metta_ontol_pl,"get-state","state_management","gets the state of a component or system."," data_retrieval",0)
eval_tag_found(metta_ontol_pl,"car-atom","list_operations","retrieves the head of a list."," head_retrieval",0)
eval_tag_found(metta_ontol_pl,"cdr-atom","list_operations","retrieves the tail of a list."," tail_retrieval",0)
eval_tag_found(metta_ontol_pl,"make_list","list_operations","creates a list with specified elements."," creation",0)
eval_tag_found(metta_ontol_pl,"cons","list_operations","constructs a list."," construction",0)
eval_tag_found(metta_ontol_pl,"length","list_operations","determines the length of a list."," length_determination",0)
eval_tag_found(metta_ontol_pl,"countelement","list_operations","counts occurrences of an element."," element_counting",0)
eval_tag_found(metta_ontol_pl,"unique","nondet_sets","makes nondet results unique."," no_repeats_var",0)
eval_tag_found(metta_ontol_pl,"subtraction","nondet_sets","it subtracts elements generated by call2 from those generated by call1."," lazy_subtraction",0)
eval_tag_found(metta_ontol_pl,"intersection","nondet_sets","it gives the intersection duplicates are not removed ."," lazy_intersection",0)
eval_tag_found(metta_ontol_pl,"union","nondet_sets","it gives the union of 2 list ."," lazy_union ",0)
eval_tag_found(metta_ontol_pl,"stringtochars","string_operations","convert a string to a list of chars."," string_to_chars",0)
eval_tag_found(metta_ontol_pl,"charstostring","string_operations","convert a list of chars to a string."," chars_to_string",0)
eval_tag_found(metta_ontol_pl,"format-args","string_operations","generate a formatted string using a format specifier."," format_args",0)
eval_tag_found(metta_ontol_pl,"flip","random","return a random boolean."," random_boolean",0)
found_search_result(pl_tag,"length",0,2092,'../canary/metta_eval.pl',"eval_40(Eq,RetType,Depth,Self,['length',L],Res):- !, eval_args(Depth,Self,L,LL),")
found_search_result(pl_tag,"py-eval",0,2089,'../canary/metta_eval.pl',"eval_70(_Eq,_RetType,_Depth,_Self,['py-eval',Arg],Res):- !,")
found_search_result(pl_tag,"py-dot",0,2087,'../canary/metta_eval.pl',"eval_40(_Eq,_RetType,_Depth,_Self,['py-dot',Arg1,Arg2],Res):- !,")
found_search_result(pl_tag,"py-atom",0,2085,'../canary/metta_eval.pl',"eval_40(_Eq,_RetType,_Depth,_Self,['py-atom',Arg,Type],Res):- !,")
found_search_result(pl_tag,"py-atom",0,2083,'../canary/metta_eval.pl',"eval_40(_Eq,_RetType,_D7epth,_Self,['py-atom',Arg],Res):- !,")
found_search_result(pl_tag,"py-tuple",0,2081,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['py-tuple',Arg],Res):- !,")
found_search_result(pl_tag,"py-dict",0,2079,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['py-dict',Arg],Res):- !,")
found_search_result(pl_tag,"py-list",0,2077,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['py-list',Arg],Res):- !,")
found_search_result(pl_tag,"rust!",0,2074,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['rust!',PredDecl],Res):- !,")
found_search_result(pl_tag,"rust",0,2072,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['rust',PredDecl],Res):- !,")
found_search_result(pl_tag,"rust",0,2070,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['rust',Bang,PredDecl],Res):- Bang == '!', !,")
found_search_result(pl_tag,"call-string!",0,2028,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['call-string!',Str],NoResult):- !,'call-string!'(Str,NoResult).")
found_search_result(pl_tag,"make_list",0,2021,'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Dpth,_Slf,['make_list',List],MettaList):- !, into_metta_cons(List,MettaList),check_returnval(Eq,RetType,MettaList).")
found_search_result(pl_tag,"CountElement",0,2019,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['CountElement',L],Res):- !, eval_args(Eq,RetType,Depth,Self,L,LL), !, (is_list(LL)->length(LL,Res);Res=1),check_returnval(Eq,RetType,Res).")
found_search_result(pl_tag,"pred-intersection",0,1943,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['pred-intersection',P2,Eval1,Eval2],RetVal):- !,")
found_search_result(pl_tag,"intersection",0,1938,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['intersection',Eval1,Eval2],RetVal):- !,")
found_search_result(pl_tag,"pred-union",0,1930,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['pred-union',P2,Eval1,Eval2],RetVal):- !,")
found_search_result(pl_tag,"union",0,1925,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['union',Eval1,Eval2],RetVal):- !,")
found_search_result(pl_tag,"pred-subtraction",0,1920,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['pred-subtraction',P2,Eval1,Eval2],RetVal):- !,")
found_search_result(pl_tag,"subtraction",0,1915,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['subtraction',Eval1,Eval2],RetVal):- !,")
found_search_result(pl_tag,"pred-unique",0,1910,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['pred-unique',P2,Eval],RetVal):- !,")
found_search_result(pl_tag,"unique",0,1905,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['unique',Eval],RetVal):- !,")
found_search_result(pl_tag,"fromNumber",0,1876,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['fromNumber',NE],RetVal):- !,")
found_search_result(pl_tag,"compile!",0,1787,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['compile!',Space],Res):- !,")
found_search_result(pl_tag,"compile-space!",0,1768,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['compile-space!',Space],Res):- !,")
found_search_result(pl_tag,"function-arity",0,1759,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Dpth,_Slf,['function-arity',F],A):- !,")
found_search_result(pl_tag,"predicate-arity",0,1756,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Dpth,_Slf,['predicate-arity',F],A):- !,")
found_search_result(pl_tag,"hyperpose",0,1744,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['hyperpose',ArgL],Res):- !, metta_hyperpose(Eq,RetType,Depth,Self,ArgL,Res).")
found_search_result(pl_tag,"concurrent-forall!",0,1736,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['concurrent-forall!',Gen,Test|Options],NoResult):- !,")
found_search_result(pl_tag,"concurrent-maplist!",0,1732,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['concurrent-maplist!',Pred,ArgL1,ArgL2,ArgL3,ArgL4,ArgL5],ResL):- !,")
found_search_result(pl_tag,"concurrent-maplist!",0,1730,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['concurrent-maplist!',Pred,ArgL1,ArgL2,ArgL3,ArgL4],ResL):- !,")
found_search_result(pl_tag,"concurrent-maplist!",0,1728,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['concurrent-maplist!',Pred,ArgL1,ArgL2,ArgL3],ResL):- !,")
found_search_result(pl_tag,"concurrent-maplist!",0,1726,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['concurrent-maplist!',Pred,ArgL1,ArgL2],ResL):- !,")
found_search_result(pl_tag,"concurrent-maplist!",0,1724,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['concurrent-maplist!',Pred,ArgL1],ResL):- !,")
found_search_result(pl_tag,"maplist!",0,1709,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['maplist!',Pred,ArgL1,ArgL2,ArgL3,ArgL4,ArgL5],ResL):- !,")
found_search_result(pl_tag,"maplist!",0,1707,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['maplist!',Pred,ArgL1,ArgL2,ArgL3,ArgL4],ResL):- !,")
found_search_result(pl_tag,"maplist!",0,1705,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['maplist!',Pred,ArgL1,ArgL2,ArgL3],ResL):- !,")
found_search_result(pl_tag,"maplist!",0,1703,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['maplist!',Pred,ArgL1,ArgL2],ResL):- !,")
found_search_result(pl_tag,"maplist!",0,1701,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['maplist!',Pred,ArgL1],ResL):- !,")
found_search_result(pl_tag,"with-output-to!",0,1634,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['with-output-to!',S,NE],R):-  !,")
found_search_result(pl_tag,"setup-call-cleanup!",0,1628,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['setup-call-cleanup!',S,NE,E],R):-  !,")
found_search_result(pl_tag,"call-cleanup!",0,1624,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['call-cleanup!',NE,E],R):-  !,")
found_search_result(pl_tag,"max-time",0,1619,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['max-time',NE,E],R):-  !,")
found_search_result(pl_tag,"max-time!",0,1618,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['max-time!',N,E],R):- !, eval_20(Eq,RetType,Depth,Self,['max-time',N,E],R).")
found_search_result(pl_tag,"offset",0,1614,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['offset',NE,E],R):-  !,")
found_search_result(pl_tag,"offset!",0,1613,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['offset!',N,E],R):- !, eval_20(Eq,RetType,Depth,Self,['offset',N,E],R).")
found_search_result(pl_tag,"limit",0,1609,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['limit',NE,E],R):-  !,")
found_search_result(pl_tag,"limit!",0,1608,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['limit!',N,E],R):- !, eval_20(Eq,RetType,Depth,Self,['limit',N,E],R).")
found_search_result(pl_tag,"findall!",0,1603,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['findall!',Template,X],ResL):- !,")
found_search_result(pl_tag,"number-of",0,1599,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['number-of',X,N],TF):- !,")
found_search_result(pl_tag,"number-of",0,1595,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['number-of',X],N):- !,")
found_search_result(pl_tag,"throw",0,1591,'../canary/metta_eval.pl',"eval_20(Eq,_TRetType,Depth,Self,['throw',X],_):- !,")
found_search_result(pl_tag,"catch",0,1588,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['catch',X,EX,Handler],Res):- !,")
found_search_result(pl_tag,"return",0,1581,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['return',X],_):- !,")
found_search_result(pl_tag,"function",0,1576,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['function',X],Res):- !, gensym(return_,RetF),")
found_search_result(pl_tag,"save-space!",0,1522,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['save-space!',Other,File],RetVal):- !,")
found_search_result(pl_tag,"transfer!",0,1518,'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Dpth,Self,['transfer!',File],RetVal):- !, must_det_ll((include_metta(Self,File),")
found_search_result(pl_tag,"pragma!",0,1514,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['pragma!',Other,Expr],RetVal):- !,")
found_search_result(pl_tag,"bind!",0,1510,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['bind!',Other,Expr],RetVal):- !,")
found_search_result(pl_tag,"bind!",0,1507,'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Depth,_Slf,['bind!',Other,['new-space']],RetVal):- atom(Other),!,")
found_search_result(pl_tag,"load-file!",0,1498,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['load-file!',Other,File],RetVal):- !,")
found_search_result(pl_tag,"import!",0,1495,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['import!',Other,File],RetVal):- !,")
found_search_result(pl_tag,"load-ascii",0,1492,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['load-ascii',Other,File],RetVal):- !,")
found_search_result(pl_tag,"include",0,1489,'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Depth,Self,['include',File],RetVal):- !,")
found_search_result(pl_tag,"include!",0,1485,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['include!',Other,File],RetVal):- !,")
found_search_result(pl_tag,"register-module!",0,1477,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['register-module!',Name,Dir],RetVal):- !,")
found_search_result(pl_tag,"register-module!",0,1472,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['register-module!',Dir],RetVal):- !,")
found_search_result(pl_tag,"extend-py!",0,1471,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Dpth,_Slf,['extend-py!',Module],Res):-  !, 'extend-py!'(Module,Res).")
found_search_result(pl_tag,"output-to-string",0,1459,'../canary/metta_eval.pl',"eval_20( Eq, RetType, Depth, Self, [ 'output-to-string' , L ] , Sxx ):- !,")
found_search_result(pl_tag,"repr",0,1455,'../canary/metta_eval.pl',"eval_20( _Eq, _RetType, _Depth, _Self, [ 'repr' , L ] , Sxx ):- !,")
found_search_result(pl_tag,"parse",0,1451,'../canary/metta_eval.pl',"eval_20( Eq, RetType, Depth, Self, [ 'parse' , L ] , Exp ):- !,")
found_search_result(pl_tag,"format-args",0,1443,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['format-args',_Fmt,Args],_Result) :-")
found_search_result(pl_tag,"format-args",0,1437,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['format-args',Format,Args],Result):-")
found_search_result(pl_tag,"charsToString",0,1398,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['charsToString',Chars],String):- !, eval_args(Eq,RetType,Depth,Self,Chars,CC), maplist(as_metta_char,CC0,CC), string_chars(String,CC0).")
found_search_result(pl_tag,"stringToChars",0,1397,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['stringToChars',String],Chars):- !, eval_args(Eq,RetType,Depth,Self,String,SS), string_chars(SS,Chars0), maplist(as_metta_char,Chars0,Chars).")
found_search_result(pl_tag,"get-metatype",0,1372,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['get-metatype',Val],TypeO):- !,")
found_search_result(pl_tag,"CountElement",0,1370,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['CountElement',L],Res):- !, eval_args(Eq,RetType,Depth,Self,L,LL), !, (is_list(LL)->length(LL,Res);Res=1).")
found_search_result(pl_tag,"length",0,1369,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['length',L],Res):- !, eval_args(Eq,RetType,Depth,Self,L,LL), !, (is_list(LL)->length(LL,Res);Res=1).")
found_search_result(pl_tag,"get-type-space",0,1365,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['get-type-space',Other,Val],Type):- !,")
found_search_result(pl_tag,"get-type",0,1359,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['get-type',Val],TypeO):- !,")
found_search_result(pl_tag,"get-type",0,1355,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,Depth,Self,['get-type',Val],Type):- is_list(Val), !,")
found_search_result(pl_tag,"get-type",0,1351,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['get-type',Val,Other],Type):- !,")
found_search_result(pl_tag,"get-type",0,1347,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['get-type',Val,Self],Type):- current_self(Self), !,")
found_search_result(pl_tag,"get-types",0,1343,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,Depth,Self,['get-types',Val],TypeO):- !,")
found_search_result(pl_tag,"type-cast",0,1336,'../canary/metta_eval.pl',"eval_20(Eq,RetCasted,Depth,Self,['type-cast',Val,Into],CastedO):-!,")
found_search_result(pl_tag,"type-cast",0,1332,'../canary/metta_eval.pl',"eval_20(_Eq,_RetCasted,Depth,Self,['type-cast',Val,Into],Casted):-is_list(Val),!,")
found_search_result(pl_tag,"type-cast",0,1328,'../canary/metta_eval.pl',"eval_20(Eq,RetCasted,Depth,Self,['type-cast',Val,Into,Other],Casted):-!,")
found_search_result(pl_tag,"type-cast",0,1324,'../canary/metta_eval.pl',"eval_20(Eq,RetCasted,Depth,Self,['type-cast',Val,Into,Self],Casted):-current_self(Self),!,")
found_search_result(pl_tag,"get-state",0,1219,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['get-state',StateExpr],Value):- !,")
found_search_result(pl_tag,"new-state",0,1217,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['new-state',UpdatedValue],StateMonad):- !,")
found_search_result(pl_tag,"change-state!",0,1213,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['change-state!',StateExpr, UpdatedValue], Ret):- !,")
found_search_result(pl_tag,"Cons",0,1200,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['Cons', A, B ],[AA|BB]):- \\+ no_cons_reduce, !,")
found_search_result(pl_tag,"Cons",0,1194,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['Cons', A, B ],['Cons', AA, BB]):- no_cons_reduce, !,")
found_search_result(pl_tag,"cdr-atom",0,1192,'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Dpth,_Slf,['cdr-atom',Atom],CDR_Y):- !, Atom=[_|CDR],!,do_expander(Eq,RetType,CDR,CDR_Y).")
found_search_result(pl_tag,"car-atom",0,1191,'../canary/metta_eval.pl',"eval_20(Eq,RetType,_Dpth,_Slf,['car-atom',Atom],CAR_Y):- !, Atom=[CAR|_],!,do_expander(Eq,RetType,CAR,CAR_Y).")
found_search_result(pl_tag,"if-equal",0,1122,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['if-equal',X,Y,Then,Else],Res):- !,")
found_search_result(pl_tag,"if-unify",0,1115,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['if-unify',X,Y,Then,Else],Res):- !,")
found_search_result(pl_tag,"decons",0,1096,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['decons',OneArg],[H,T]):- !, must_unify(OneArg,[H|T]).")
found_search_result(pl_tag,"decons-atom",0,1093,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType,_Depth,_Self,['decons-atom',OneArg],[H,T]):- !, must_unify(OneArg,[H|T]).")
found_search_result(pl_tag,"call-fn-nth!",0,1071,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType1,_Depth,_Self,['call-fn-nth!',Nth,S], R):-")
found_search_result(pl_tag,"call-fn!",0,1070,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType1,_Depth,_Self,['call-fn!',S], R):- !, eval_call_fn(S,R).")
found_search_result(pl_tag,"call!",0,1069,'../canary/metta_eval.pl',"eval_20(_Eq,_RetType1,_Depth,_Self,['call!',S], TF):- !, eval_call(S,TF).")
found_search_result(pl_tag,"sequential",0,1017,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['sequential',List],Res):- !,")
found_search_result(pl_tag,"collapse",0,997,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['collapse',List],Res):-!,")
found_search_result(pl_tag,"superpose-bind",0,989,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['superpose-bind',List],Res):- !,")
found_search_result(pl_tag,"collapse-bind",0,979,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['collapse-bind',List],Res):-!,")
found_search_result(pl_tag,"case",0,932,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['case',A,CL|T],Res):- !,")
found_search_result(pl_tag,"case",0,918,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['case',A,[]],NoResult):- !,")
found_search_result(pl_tag,"case",0,913,'../canary/metta_eval.pl',"eval_20(Eq,_RetType,Depth,Self,['case',A,[[Void,_]]],Res):-")
found_search_result(pl_tag,"switch",0,907,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['switch',A,CL|T],Res):- !,")
found_search_result(pl_tag,"unify",0,805,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['unify',Space|Args],Res):- !,")
found_search_result(pl_tag,"sealed",0,736,'../canary/metta_eval.pl',"eval_20(_Eq, _RetType, _Depth, _Self, ['sealed', InputVarList, Expr], Result) :- !,")
found_search_result(pl_tag,"print",0,564,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['print',Cond],Res):- !, eval_args(Eq,RetType,Depth,Self,Cond,Res),format('~N'),print(Res),format('~N').")
found_search_result(pl_tag,"time!",0,563,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['time!',Cond],Res):- !, time_eval(eval_args(Cond),eval_args(Eq,RetType,Depth,Self,Cond,Res)).")
found_search_result(pl_tag,"profile!",0,562,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['profile!',Cond],Res):- !, time_eval(profile(Cond),profile(eval_args(Eq,RetType,Depth,Self,Cond,Res))).")
found_search_result(pl_tag,"trace",0,561,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['trace',Cond],Res):- !, with_debug(eval_args,eval_args(Eq,RetType,Depth,Self,Cond,Res)).")
found_search_result(pl_tag,"trace!",0,556,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['trace!',A,B],C):- !, % writeln(trace(A)),")
found_search_result(pl_tag,"no-rtrace!",0,555,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['no-rtrace!',Cond],Res):- !, quietly(eval_args(Eq,RetType,Depth,Self,Cond,Res)).")
found_search_result(pl_tag,"rtrace!",0,554,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['rtrace!',Cond],Res):- !, rtrace(eval_args(Eq,RetType,Depth,Self,Cond,Res)).")
found_search_result(pl_tag,"let*",0,540,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['let*',[[Var,Val]|LetRest],Body],RetVal):- !,")
found_search_result(pl_tag,"let*",0,536,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['let*',[],Body],RetVal):- !, eval_args(Eq,RetType,Depth,Self,Body,RetVal).")
found_search_result(pl_tag,"foldl-atom",0,430,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['foldl-atom',List,Init,A,B,Eval],Res):- !,")
found_search_result(pl_tag,"map-atom",0,415,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['map-atom',List,V,Eval],Res):- !,")
found_search_result(pl_tag,"filter-atom",0,406,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['filter-atom',List,Var,Pred],Res):- !,")
found_search_result(pl_tag,"eval-for",0,397,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['eval-for',_Why,Type,X],Res):- !,")
found_search_result(pl_tag,"eval-for",0,393,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['eval-for',Type,X],Res):- !,")
found_search_result(pl_tag,"chain",0,383,'../canary/metta_eval.pl',"eval_20(Eq,RetType,Depth,Self,['chain',Atom,Var|Y],Res):-  !,  eval_args(Eq,_RetType,Depth,Self,Atom,R),")
found_search_result(pl_tag,"coerce",0,329,'../canary/metta_eval.pl',"eval_20(=,Type,_,_,['coerce',Type,Value],Result):- !, coerce(Type,Value,Result).")
found_search_result(pl_tag,"echo",0,328,'../canary/metta_eval.pl',"eval_20(_,_,_,_,['echo',Value],Value):- !.")
found_search_result(rust,"flip",0,1907,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"flip\"), move |_| { flip_op.clone() });")
found_search_result(rust,"&self",0,1859,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"&self\"), move |_| { self_atom.clone() });")
found_search_result(rust,"pragma!",0,1849,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"pragma!\"), move |_| { pragma_op.clone() });")
found_search_result(rust,"include",0,1847,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"include\"), move |_| { include_op.clone() });")
found_search_result(rust,"import!",0,1845,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"import!\"), move |_| { import_op.clone() });")
found_search_result(rust,"get-type-space",0,1843,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-type-space\"), move |_| { get_type_space_op.clone() });")
found_search_result(rust,"get-type",0,1841,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-type\"), move |_| { get_type_op.clone() });")
found_search_result(rust,"subtraction",0,1839,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"subtraction\"), move |_| { subtraction_op.clone() });")
found_search_result(rust,"intersection",0,1837,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"intersection\"), move |_| { intersection_op.clone() });")
found_search_result(rust,"union",0,1835,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"union\"), move |_| { union_op.clone() });")
found_search_result(rust,"unique",0,1833,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"unique\"), move |_| { unique_op.clone() });")
found_search_result(rust,"collapse",0,1829,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"collapse\"), move |_| { collapse_op.clone() });")
found_search_result(rust,"case",0,1823,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"case\"), move |_| { case_op.clone() });")
found_search_result(rust,"capture",0,1821,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"capture\"), move |_| { capture_op.clone() });")
found_search_result(rust,"sealed",0,1809,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"sealed\"), move |_| { sealed_op.clone() });")
found_search_result(rust,"print-mods!",0,1807,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"print-mods!\"), move |_| { print_mods_op.clone() });")
found_search_result(rust,"mod-space!",0,1805,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"mod-space!\"), move |_| { mod_space_op.clone() });")
found_search_result(rust,"get-metatype",0,1803,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-metatype\"), move |_| { get_meta_type_op.clone() });")
found_search_result(rust,"get-state",0,1801,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-state\"), move |_| { get_state_op.clone() });")
found_search_result(rust,"change-state!",0,1799,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"change-state!\"), move |_| { change_state_op.clone() });")
found_search_result(rust,"new-state",0,1797,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"new-state\"), move |_| { new_state_op.clone() });")
found_search_result(rust,"let*",0,1795,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"let\\*\"), move |_| { let_var_op.clone() });")
found_search_result(rust,"trace!",0,1789,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"trace!\"), move |_| { trace_op.clone() });")
found_search_result(rust,"format-args",0,1787,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"format-args\"), move |_| { format_args_op.clone() });")
found_search_result(rust,"println!",0,1785,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"println!\"), move |_| { println_op.clone() });")
found_search_result(rust,"cons-atom",0,1783,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"cons-atom\"), move |_| { cons_atom_op.clone() });")
found_search_result(rust,"cdr-atom",0,1781,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"cdr-atom\"), move |_| { cdr_atom_op.clone() });")
found_search_result(rust,"car-atom",0,1779,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"car-atom\"), move |_| { car_atom_op.clone() });")
found_search_result(rust,"get-atoms",0,1777,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-atoms\"), move |_| { get_atoms_op.clone() });")
found_search_result(rust,"remove-atom",0,1775,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"remove-atom\"), move |_| { remove_atom_op.clone() });")
found_search_result(rust,"add-atom",0,1773,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"add-atom\"), move |_| { add_atom_op.clone() });")
found_search_result(rust,"new-space",0,1771,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"new-space\"), move |_| { new_space_op.clone() });")
found_search_result(rust,"bind!",0,1769,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"bind!\"), move |_| { bind_op.clone() });")
found_search_result(rust,"match",0,1767,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"match\"), move |_| { match_op.clone() });")
found_search_result(rust,"git-module!",0,1033,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"git-module!\"), move |_| { git_module_op.clone() });")
found_search_result(rust,"register-module!",0,1031,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"register-module!\"), move |_| { register_module_op.clone() });")
found_search_result(rust,"match",1,627,'../../../hyperon-experimental/lib/src/metta/old_interpreter.rs',"    OperatorPlan::new(|_| match_op(context, input), descr) \n<br>\n } \n<br>\n  \n<br>\n fn match_op<'a, T: SpaceRef<'a>>(context: InterpreterContextRef<'a, T>, input: InterpretedAtom) -> StepResult<'a, Results, InterpreterError> { \n<br>\n     log::debug!(\"match_op: {}\", input);")
found_search_result(rust,"get-type",2,409,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    let get_type_op = Atom::gnd(GetTypeOp::new(space.clone())); \n<br>\n     tref.register_token(regex(r\"get-type\"), move |_| { get_type_op.clone() }); \n<br>\n     let get_type_space_op = Atom::gnd(stdlib::GetTypeSpaceOp{}); \n<br>\n     tref.register_token(regex(r\"get-type-space\"), move |_| { get_type_space_op.clone() }); \n<br>\n     let get_meta_type_op = Atom::gnd(stdlib::GetMetaTypeOp{});")
found_search_result(rust,"get-metatype",2,414,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    tref.register_token(regex(r\"get-metatype\"), move |_| { get_meta_type_op.clone() }); \n<br>\n     let is_equivalent = Atom::gnd(IfEqualOp{}); \n<br>\n     tref.register_token(regex(r\"if-equal\"), move |_| { is_equivalent.clone() }); \n<br>\n     let new_space_op = Atom::gnd(stdlib::NewSpaceOp{}); \n<br>\n     tref.register_token(regex(r\"new-space\"), move |_| { new_space_op.clone() });")
found_search_result(rust,"add-atom",2,419,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    let add_atom_op = Atom::gnd(stdlib::AddAtomOp{}); \n<br>\n     tref.register_token(regex(r\"add-atom\"), move |_| { add_atom_op.clone() }); \n<br>\n     let remove_atom_op = Atom::gnd(stdlib::RemoveAtomOp{}); \n<br>\n     tref.register_token(regex(r\"remove-atom\"), move |_| { remove_atom_op.clone() }); \n<br>\n     let get_atoms_op = Atom::gnd(stdlib::GetAtomsOp{});")
found_search_result(rust,"get-atoms",2,424,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    tref.register_token(regex(r\"get-atoms\"), move |_| { get_atoms_op.clone() }); \n<br>\n     let new_state_op = Atom::gnd(stdlib::NewStateOp{}); \n<br>\n     tref.register_token(regex(r\"new-state\"), move |_| { new_state_op.clone() }); \n<br>\n     let change_state_op = Atom::gnd(stdlib::ChangeStateOp{}); \n<br>\n     tref.register_token(regex(r\"change-state!\"), move |_| { change_state_op.clone() });")
found_search_result(rust,"get-state",2,429,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    let get_state_op = Atom::gnd(stdlib::GetStateOp{}); \n<br>\n     tref.register_token(regex(r\"get-state\"), move |_| { get_state_op.clone() }); \n<br>\n     let nop_op = Atom::gnd(stdlib::NopOp{}); \n<br>\n     tref.register_token(regex(r\"nop\"), move |_| { nop_op.clone() }); \n<br>\n     let match_op = Atom::gnd(stdlib::MatchOp{});")
found_search_result(rust,"match",2,434,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    tref.register_token(regex(r\"match\"), move |_| { match_op.clone() }); \n<br>\n     let mod_space_op = Atom::gnd(stdlib::ModSpaceOp::new(metta.clone())); \n<br>\n     tref.register_token(regex(r\"mod-space!\"), move |_| { mod_space_op.clone() }); \n<br>\n     let print_mods_op = Atom::gnd(stdlib::PrintModsOp::new(metta.clone())); \n<br>\n     tref.register_token(regex(r\"print-mods!\"), move |_| { print_mods_op.clone() });")
found_search_result(rust,"collapse",2,454,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    let collapse_op = Atom::gnd(CollapseOp::new(space.clone())); \n<br>\n     tref.register_token(regex(r\"collapse\"), move |_| { collapse_op.clone() }); \n<br>\n     let unique_op = Atom::gnd(stdlib::UniqueOp::new(space.clone())); \n<br>\n     tref.register_token(regex(r\"unique\"), move |_| { unique_op.clone() }); \n<br>\n     let union_op = Atom::gnd(stdlib::UnionOp::new(space.clone()));")
found_search_result(rust,"union",2,459,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    tref.register_token(regex(r\"union\"), move |_| { union_op.clone() }); \n<br>\n     let intersection_op = Atom::gnd(stdlib::IntersectionOp::new(space.clone())); \n<br>\n     tref.register_token(regex(r\"intersection\"), move |_| { intersection_op.clone() }); \n<br>\n     let subtraction_op = Atom::gnd(stdlib::SubtractionOp::new(space.clone())); \n<br>\n     tref.register_token(regex(r\"subtraction\"), move |_| { subtraction_op.clone() });")
found_search_result(rust,"case",2,464,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    let case_op = Atom::gnd(CaseOp::new(space.clone())); \n<br>\n     tref.register_token(regex(r\"case\"), move |_| { case_op.clone() }); \n<br>\n     let capture_op = Atom::gnd(CaptureOp::new(space.clone())); \n<br>\n     tref.register_token(regex(r\"capture\"), move |_| { capture_op.clone() }); \n<br>\n     let pragma_op = Atom::gnd(stdlib::PragmaOp::new(metta.settings().clone()));")
found_search_result(rust,"pragma!",2,469,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    tref.register_token(regex(r\"pragma!\"), move |_| { pragma_op.clone() }); \n<br>\n     let import_op = Atom::gnd(stdlib::ImportOp::new(metta.clone())); \n<br>\n     tref.register_token(regex(r\"import!\"), move |_| { import_op.clone() }); \n<br>\n     let include_op = Atom::gnd(stdlib::IncludeOp::new(metta.clone())); \n<br>\n     tref.register_token(regex(r\"include\"), move |_| { include_op.clone() });")
found_search_result(rust,"bind!",2,474,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    let bind_op = Atom::gnd(stdlib::BindOp::new(tokenizer.clone())); \n<br>\n     tref.register_token(regex(r\"bind!\"), move |_| { bind_op.clone() }); \n<br>\n     let trace_op = Atom::gnd(stdlib::TraceOp{}); \n<br>\n     tref.register_token(regex(r\"trace!\"), move |_| { trace_op.clone() }); \n<br>\n     let println_op = Atom::gnd(stdlib::PrintlnOp{});")
found_search_result(rust,"println!",2,479,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    tref.register_token(regex(r\"println!\"), move |_| { println_op.clone() }); \n<br>\n     let format_args_op = Atom::gnd(stdlib::FormatArgsOp{}); \n<br>\n     tref.register_token(regex(r\"format-args\"), move |_| { format_args_op.clone() }); \n<br>\n     let print_alternatives_op = Atom::gnd(PrintAlternativesOp{}); \n<br>\n     tref.register_token(regex(r\"print-alternatives!\"), move |_| { print_alternatives_op.clone() });")
found_search_result(rust,"sealed",2,484,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    let sealed_op = Atom::gnd(stdlib::SealedOp{}); \n<br>\n     tref.register_token(regex(r\"sealed\"), move |_| { sealed_op.clone() }); \n<br>\n     // &self should be updated \n<br>\n     // TODO: adding &self might be done not by stdlib, but by MeTTa itself. \n<br>\n     // TODO: adding &self introduces self referencing and thus prevents space")
found_search_result(rust,"&self",2,493,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    let self_atom = Atom::gnd(space.clone()); \n<br>\n     tref.register_token(regex(r\"&self\"), move |_| { self_atom.clone() }); \n<br>\n } \n<br>\n  \n<br>\n pub fn register_rust_stdlib_tokens(target: &mut Tokenizer) {")
found_search_result(rust,"get-type",2,556,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    fn get_type_op() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (: B Type) \n<br>\n             (: C Type) \n<br>\n             (: A B)")
found_search_result(rust,"get-type",2,564,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"        let get_type_op = GetTypeOp::new(space.clone()); \n<br>\n         assert_eq_no_order!(get_type_op.execute(&mut vec![sym!(\"A\"), expr!({space.clone()})]).unwrap(), \n<br>\n             vec![sym!(\"B\"), sym!(\"C\")]); \n<br>\n     } \n<br>\n ")
found_search_result(rust,"get-type",2,570,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"    fn get_type_op_non_valid_atom() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (: f (-> Number String)) \n<br>\n             (: 42 Number) \n<br>\n             (: \\\"test\\\" String)")
found_search_result(rust,"get-type",2,577,'../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs',"        let get_type_op = GetTypeOp::new(space.clone()); \n<br>\n         assert_eq_no_order!(get_type_op.execute(&mut vec![expr!(\"f\" \"42\"), expr!({space.clone()})]).unwrap(), \n<br>\n             vec![sym!(\"String\")]); \n<br>\n         assert_eq_no_order!(get_type_op.execute(&mut vec![expr!(\"f\" \"\\\"test\\\"\"), expr!({space.clone()})]).unwrap(), \n<br>\n             vec![EMPTY_SYMBOL]);")
found_search_result(rust,"register-module!",2,1030,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let register_module_op = Atom::gnd(RegisterModuleOp::new(metta.clone())); \n<br>\n         tref.register_token(regex(r\"register-module!\"), move |_| { register_module_op.clone() }); \n<br>\n         let git_module_op = Atom::gnd(GitModuleOp::new(metta.clone())); \n<br>\n         tref.register_token(regex(r\"git-module!\"), move |_| { git_module_op.clone() }); \n<br>\n     }")
found_search_result(rust,"match",2,1766,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let match_op = Atom::gnd(MatchOp{}); \n<br>\n         tref.register_token(regex(r\"match\"), move |_| { match_op.clone() }); \n<br>\n         let bind_op = Atom::gnd(BindOp::new(tokenizer)); \n<br>\n         tref.register_token(regex(r\"bind!\"), move |_| { bind_op.clone() }); \n<br>\n         let new_space_op = Atom::gnd(NewSpaceOp{});")
found_search_result(rust,"new-space",2,1771,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"new-space\"), move |_| { new_space_op.clone() }); \n<br>\n         let add_atom_op = Atom::gnd(AddAtomOp{}); \n<br>\n         tref.register_token(regex(r\"add-atom\"), move |_| { add_atom_op.clone() }); \n<br>\n         let remove_atom_op = Atom::gnd(RemoveAtomOp{}); \n<br>\n         tref.register_token(regex(r\"remove-atom\"), move |_| { remove_atom_op.clone() });")
found_search_result(rust,"get-atoms",2,1776,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let get_atoms_op = Atom::gnd(GetAtomsOp{}); \n<br>\n         tref.register_token(regex(r\"get-atoms\"), move |_| { get_atoms_op.clone() }); \n<br>\n         let car_atom_op = Atom::gnd(CarAtomOp{}); \n<br>\n         tref.register_token(regex(r\"car-atom\"), move |_| { car_atom_op.clone() }); \n<br>\n         let cdr_atom_op = Atom::gnd(CdrAtomOp{});")
found_search_result(rust,"cdr-atom",2,1781,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"cdr-atom\"), move |_| { cdr_atom_op.clone() }); \n<br>\n         let cons_atom_op = Atom::gnd(ConsAtomOp{}); \n<br>\n         tref.register_token(regex(r\"cons-atom\"), move |_| { cons_atom_op.clone() }); \n<br>\n         let println_op = Atom::gnd(PrintlnOp{}); \n<br>\n         tref.register_token(regex(r\"println!\"), move |_| { println_op.clone() });")
found_search_result(rust,"format-args",2,1786,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let format_args_op = Atom::gnd(FormatArgsOp{}); \n<br>\n         tref.register_token(regex(r\"format-args\"), move |_| { format_args_op.clone() }); \n<br>\n         let trace_op = Atom::gnd(TraceOp{}); \n<br>\n         tref.register_token(regex(r\"trace!\"), move |_| { trace_op.clone() }); \n<br>\n         let nop_op = Atom::gnd(NopOp{});")
found_search_result(rust,"let*",2,1794,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let let_var_op = Atom::gnd(LetVarOp{}); \n<br>\n         tref.register_token(regex(r\"let\\*\"), move |_| { let_var_op.clone() }); \n<br>\n         let new_state_op = Atom::gnd(NewStateOp{}); \n<br>\n         tref.register_token(regex(r\"new-state\"), move |_| { new_state_op.clone() }); \n<br>\n         let change_state_op = Atom::gnd(ChangeStateOp{});")
found_search_result(rust,"change-state!",2,1799,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"change-state!\"), move |_| { change_state_op.clone() }); \n<br>\n         let get_state_op = Atom::gnd(GetStateOp{}); \n<br>\n         tref.register_token(regex(r\"get-state\"), move |_| { get_state_op.clone() }); \n<br>\n         let get_meta_type_op = Atom::gnd(GetMetaTypeOp{}); \n<br>\n         tref.register_token(regex(r\"get-metatype\"), move |_| { get_meta_type_op.clone() });")
found_search_result(rust,"mod-space!",2,1804,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let mod_space_op = Atom::gnd(ModSpaceOp::new(metta.clone())); \n<br>\n         tref.register_token(regex(r\"mod-space!\"), move |_| { mod_space_op.clone() }); \n<br>\n         let print_mods_op = Atom::gnd(PrintModsOp::new(metta.clone())); \n<br>\n         tref.register_token(regex(r\"print-mods!\"), move |_| { print_mods_op.clone() }); \n<br>\n         let sealed_op = Atom::gnd(SealedOp{});")
found_search_result(rust,"sealed",2,1809,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"sealed\"), move |_| { sealed_op.clone() }); \n<br>\n  \n<br>\n         #[cfg(feature = \"pkg_mgmt\")] \n<br>\n         pkg_mgmt_ops::register_pkg_mgmt_tokens(tref, metta); \n<br>\n     }")
found_search_result(rust,"capture",2,1820,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let capture_op = Atom::gnd(CaptureOp::new(space.clone())); \n<br>\n         tref.register_token(regex(r\"capture\"), move |_| { capture_op.clone() }); \n<br>\n         let case_op = Atom::gnd(CaseOp::new(space.clone())); \n<br>\n         tref.register_token(regex(r\"case\"), move |_| { case_op.clone() }); \n<br>\n         let assert_equal_op = Atom::gnd(AssertEqualOp::new(space.clone()));")
found_search_result(rust,"collapse",2,1828,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let collapse_op = Atom::gnd(CollapseOp::new(space.clone())); \n<br>\n         tref.register_token(regex(r\"collapse\"), move |_| { collapse_op.clone() }); \n<br>\n         let superpose_op = Atom::gnd(SuperposeOp::new(space.clone())); \n<br>\n         tref.register_token(regex(r\"superpose\"), move |_| { superpose_op.clone() }); \n<br>\n         let unique_op = Atom::gnd(UniqueOp::new(space.clone()));")
found_search_result(rust,"unique",2,1833,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"unique\"), move |_| { unique_op.clone() }); \n<br>\n         let union_op = Atom::gnd(UnionOp::new(space.clone())); \n<br>\n         tref.register_token(regex(r\"union\"), move |_| { union_op.clone() }); \n<br>\n         let intersection_op = Atom::gnd(IntersectionOp::new(space.clone())); \n<br>\n         tref.register_token(regex(r\"intersection\"), move |_| { intersection_op.clone() });")
found_search_result(rust,"subtraction",2,1838,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let subtraction_op = Atom::gnd(SubtractionOp::new(space.clone())); \n<br>\n         tref.register_token(regex(r\"subtraction\"), move |_| { subtraction_op.clone() }); \n<br>\n         let get_type_op = Atom::gnd(GetTypeOp::new(space.clone())); \n<br>\n         tref.register_token(regex(r\"get-type\"), move |_| { get_type_op.clone() }); \n<br>\n         let get_type_space_op = Atom::gnd(GetTypeSpaceOp{});")
found_search_result(rust,"get-type-space",2,1843,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        tref.register_token(regex(r\"get-type-space\"), move |_| { get_type_space_op.clone() }); \n<br>\n         let import_op = Atom::gnd(ImportOp::new(metta.clone())); \n<br>\n         tref.register_token(regex(r\"import!\"), move |_| { import_op.clone() }); \n<br>\n         let include_op = Atom::gnd(IncludeOp::new(metta.clone())); \n<br>\n         tref.register_token(regex(r\"include\"), move |_| { include_op.clone() });")
found_search_result(rust,"pragma!",2,1848,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let pragma_op = Atom::gnd(PragmaOp::new(metta.settings().clone())); \n<br>\n         tref.register_token(regex(r\"pragma!\"), move |_| { pragma_op.clone() }); \n<br>\n  \n<br>\n         // &self should be updated \n<br>\n         // TODO: adding &self might be done not by stdlib, but by MeTTa itself.")
found_search_result(rust,"&self",2,1858,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let self_atom = Atom::gnd(space.clone()); \n<br>\n         tref.register_token(regex(r\"&self\"), move |_| { self_atom.clone() }); \n<br>\n     } \n<br>\n  \n<br>\n     #[cfg(feature = \"old_interpreter\")]")
found_search_result(rust,"flip",2,1906,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let flip_op = Atom::gnd(FlipOp{}); \n<br>\n         tref.register_token(regex(r\"flip\"), move |_| { flip_op.clone() }); \n<br>\n  \n<br>\n         target.move_front(&mut rust_tokens); \n<br>\n     }")
found_search_result(rust,"mod-space!",2,1953,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"fn mod_space_op() { \n<br>\n     let program = r#\" \n<br>\n         !(bind! &new_space (new-space)) \n<br>\n         !(add-atom &new_space (mod-space! stdlib)) \n<br>\n         !(get-atoms &new_space)")
found_search_result(rust,"match",2,1982,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn match_op() { \n<br>\n         let space = DynSpace::new(metta_space(\"(A B)\")); \n<br>\n         let match_op = MatchOp{}; \n<br>\n         assert_eq!(match_op.execute(&mut vec![expr!({space}), expr!(\"A\" \"B\"), expr!(\"B\" \"A\")]), \n<br>\n             Ok(vec![expr!(\"B\" \"A\")]));")
found_search_result(rust,"match",2,1990,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn match_op_issue_530() { \n<br>\n         let space = DynSpace::new(metta_space(\"(A $a $a)\")); \n<br>\n         let match_op = MatchOp{}; \n<br>\n         let result = match_op.execute(&mut vec![expr!({space}), expr!(\"A\" x y), expr!(\"A\" x y)]).unwrap(); \n<br>\n         assert_eq!(result.len(), 1);")
found_search_result(rust,"new-space",2,2001,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn new_space_op() { \n<br>\n         let res = NewSpaceOp{}.execute(&mut vec![]).expect(\"No result returned\"); \n<br>\n         let space = res.get(0).expect(\"Result is empty\"); \n<br>\n         let space = space.as_gnd::<DynSpace>().expect(\"Result is not space\"); \n<br>\n         let space_atoms: Vec<Atom> = space.borrow().as_space().atom_iter().unwrap().cloned().collect();")
found_search_result(rust,"add-atom",2,2010,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn add_atom_op() { \n<br>\n         let space = DynSpace::new(GroundingSpace::new()); \n<br>\n         let satom = Atom::gnd(space.clone()); \n<br>\n         let res = AddAtomOp{}.execute(&mut vec![satom, expr!((\"foo\" \"bar\"))]).expect(\"No result returned\"); \n<br>\n         assert_eq!(res, vec![UNIT_ATOM()]);")
found_search_result(rust,"remove-atom",2,2020,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn remove_atom_op() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (foo bar) \n<br>\n             (bar foo) \n<br>\n         \"));")
found_search_result(rust,"get-atoms",2,2034,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn get_atoms_op() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (foo bar) \n<br>\n             (bar foo) \n<br>\n         \"));")
found_search_result(rust,"car-atom",2,2047,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn car_atom_op() { \n<br>\n         let res = CarAtomOp{}.execute(&mut vec![expr!((\"A\" \"C\") \"B\")]).expect(\"No result returned\"); \n<br>\n         assert_eq!(res, vec![expr!(\"A\" \"C\")]); \n<br>\n     } \n<br>\n ")
found_search_result(rust,"cdr-atom",2,2053,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn cdr_atom_op() { \n<br>\n         let res = CdrAtomOp{}.execute(&mut vec![expr!((\"A\"))]).expect(\"No result returned\"); \n<br>\n         assert_eq!(res, vec![expr!()]); \n<br>\n         let res = CdrAtomOp{}.execute(&mut vec![expr!((\"A\" \"C\") (\"D\" \"E\") \"B\")]).expect(\"No result returned\"); \n<br>\n         assert_eq!(res, vec![expr!((\"D\" \"E\") \"B\")]);")
found_search_result(rust,"cons-atom",2,2063,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn cons_atom_op() { \n<br>\n         let res = ConsAtomOp{}.execute(&mut vec![expr!(\"A\"), expr!()]).expect(\"No result returned\"); \n<br>\n         assert_eq!(res, vec![expr!((\"A\"))]); \n<br>\n         let res = ConsAtomOp{}.execute(&mut vec![expr!(\"A\" \"F\"), expr!((\"B\" \"C\") \"D\")]).expect(\"No result returned\"); \n<br>\n         assert_eq!(res, vec![expr!((\"A\" \"F\") (\"B\" \"C\") \"D\")]);")
found_search_result(rust,"bind!",2,2074,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let bind_op = BindOp::new(tokenizer.clone()); \n<br>\n  \n<br>\n         assert_eq!(bind_op.execute(&mut vec![sym!(\"&my\"), sym!(\"definition\")]), unit_result()); \n<br>\n         let borrowed = tokenizer.borrow(); \n<br>\n         let constr = borrowed.find_token(\"&my\");")
found_search_result(rust,"case",2,2084,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn case_op() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (= (foo) (A B)) \n<br>\n         \")); \n<br>\n ")
found_search_result(rust,"case",2,2089,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let case_op = CaseOp::new(space.clone()); \n<br>\n  \n<br>\n         assert_eq!(case_op.execute(&mut vec![expr!((\"foo\")), \n<br>\n                 expr!(((n \"B\") n) (\"Empty\" \"D\"))]), \n<br>\n             Ok(vec![Atom::sym(\"A\")]));")
found_search_result(rust,"case",2,2100,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn case_op_external_vars_at_right_are_kept_untouched() { \n<br>\n         let space = DynSpace::new(GroundingSpace::new()); \n<br>\n         let case_op = CaseOp::new(space.clone()); \n<br>\n  \n<br>\n         assert_eq!(case_op.execute(&mut vec![expr!(ext), expr!(((t t)))]),")
found_search_result(rust,"case",2,2111,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn case_op_internal_variables_has_priority_in_template() { \n<br>\n         let space = DynSpace::new(GroundingSpace::new()); \n<br>\n         let case_op = CaseOp::new(space.clone()); \n<br>\n  \n<br>\n         assert_eq!(case_op.execute(&mut vec![expr!(x \"A\"), expr!(((x x)))]),")
found_search_result(rust,"collapse",2,2164,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn collapse_op() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (= (foo) (A B)) \n<br>\n             (= (foo) (B C)) \n<br>\n         \"));")
found_search_result(rust,"collapse",2,2169,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let collapse_op = CollapseOp::new(space); \n<br>\n  \n<br>\n         let actual = collapse_op.execute(&mut vec![expr!((\"foo\"))]).unwrap(); \n<br>\n         assert_eq!(actual.len(), 1); \n<br>\n         assert_eq_no_order!(")
found_search_result(rust,"unique",2,2187,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn unique_op() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (= (foo) (A (B C))) \n<br>\n             (= (foo) (A (B C))) \n<br>\n             (= (foo) (f g))")
found_search_result(rust,"unique",2,2196,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let unique_op = UniqueOp::new(space); \n<br>\n         let actual = unique_op.execute(&mut vec![expr!((\"foo\"))]).unwrap(); \n<br>\n         assert_eq_no_order!(actual, \n<br>\n                    vec![expr!(\"A\" (\"B\" \"C\")), expr!(\"f\" \"g\"), expr!(\"Z\")]); \n<br>\n     }")
found_search_result(rust,"union",2,2203,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn union_op() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (= (foo) (A (B C))) \n<br>\n             (= (foo) (A (B C))) \n<br>\n             (= (foo) (f g))")
found_search_result(rust,"union",2,2216,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let union_op = UnionOp::new(space); \n<br>\n         let actual = union_op.execute(&mut vec![expr!((\"foo\")), expr!((\"bar\"))]).unwrap(); \n<br>\n         assert_eq_no_order!(actual, \n<br>\n                    vec![expr!(\"A\" (\"B\" \"C\")), expr!(\"A\" (\"B\" \"C\")), expr!(\"f\" \"g\"), expr!(\"f\" \"g\"), expr!(\"f\" \"g\"), expr!(\"Z\"), \n<br>\n                         expr!(\"A\" (\"B\" \"C\")), expr!(\"p\"), expr!(\"p\"), expr!(\"Q\" \"a\")]);")
found_search_result(rust,"intersection",2,2224,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn intersection_op() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (= (foo) Z) \n<br>\n             (= (foo) (A (B C))) \n<br>\n             (= (foo) (A (B C)))")
found_search_result(rust,"intersection",2,2248,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let intersection_op = IntersectionOp::new(space); \n<br>\n         let actual = intersection_op.execute(&mut vec![expr!((\"foo\")), expr!((\"bar\"))]).unwrap(); \n<br>\n         assert_eq_no_order!(actual, \n<br>\n                    vec![expr!(\"A\" (\"B\" \"C\")), expr!(\"f\" \"g\"), expr!(\"f\" \"g\"), expr!(\"Z\")]); \n<br>\n ")
found_search_result(rust,"subtraction",2,2258,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn subtraction_op() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (= (foo) Z) \n<br>\n             (= (foo) S) \n<br>\n             (= (foo) S)")
found_search_result(rust,"subtraction",2,2279,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let subtraction_op = SubtractionOp::new(space); \n<br>\n         let actual = subtraction_op.execute(&mut vec![expr!((\"foo\")), expr!((\"bar\"))]).unwrap(); \n<br>\n         assert_eq_no_order!(actual, \n<br>\n                    vec![expr!(\"A\" (\"B\" \"C\")), expr!(\"f\" \"g\"), expr!(\"f\" \"g\"), expr!(\"P\" \"b\")]); \n<br>\n     }")
found_search_result(rust,"get-type",2,2342,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn get_type_op() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (: B Type) \n<br>\n             (: C Type) \n<br>\n             (: A B)")
found_search_result(rust,"get-type",2,2350,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let get_type_op = GetTypeOp::new(space); \n<br>\n         assert_eq_no_order!(get_type_op.execute(&mut vec![sym!(\"A\")]).unwrap(), \n<br>\n             vec![sym!(\"B\"), sym!(\"C\")]); \n<br>\n     } \n<br>\n ")
found_search_result(rust,"get-type",2,2356,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn get_type_op_non_valid_atom() { \n<br>\n         let space = DynSpace::new(metta_space(\" \n<br>\n             (: f (-> Number String)) \n<br>\n             (: 42 Number) \n<br>\n             (: \\\"test\\\" String)")
found_search_result(rust,"get-type",2,2363,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"        let get_type_op = GetTypeOp::new(space); \n<br>\n         assert_eq_no_order!(get_type_op.execute(&mut vec![expr!(\"f\" \"42\")]).unwrap(), \n<br>\n             vec![sym!(\"String\")]); \n<br>\n         assert_eq_no_order!(get_type_op.execute(&mut vec![expr!(\"f\" \"\\\"test\\\"\")]).unwrap(), \n<br>\n             Vec::<Atom>::new());")
found_search_result(rust,"println!",2,2371,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn println_op() { \n<br>\n         assert_eq!(PrintlnOp{}.execute(&mut vec![sym!(\"A\")]), unit_result()); \n<br>\n     } \n<br>\n  \n<br>\n     #[test]")
found_search_result(rust,"trace!",2,2376,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn trace_op() { \n<br>\n         assert_eq!(TraceOp{}.execute(&mut vec![sym!(\"\\\"Here?\\\"\"), sym!(\"42\")]), \n<br>\n                    Ok(vec![sym!(\"42\")])); \n<br>\n     } \n<br>\n ")
found_search_result(rust,"let*",2,2442,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn let_var_op() { \n<br>\n         assert_eq!(LetVarOp{}.execute(&mut vec![expr!(), sym!(\"B\")]), \n<br>\n             Ok(vec![sym!(\"B\")])); \n<br>\n         assert_eq!(LetVarOp{}.execute(&mut vec![expr!(((a \"A\"))), expr!(a)]), \n<br>\n             Ok(vec![expr!({LetOp{}} a \"A\" a)]));")
found_search_result(rust,"sealed",2,2526,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn sealed_op_runner() { \n<br>\n         let nested = run_program(\"!(sealed ($x) (sealed ($a $b) (quote (= ($a $x $c) ($b)))))\"); \n<br>\n         let simple_replace = run_program(\"!(sealed ($x $y) (quote (= ($y $z))))\"); \n<br>\n  \n<br>\n         assert!(crate::atom::matcher::atoms_are_equivalent(&nested.unwrap()[0][0], &expr!(\"quote\" (\"=\" (a b c) (z)))));")
found_search_result(rust,"sealed",2,2535,'../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs',"    fn sealed_op_execute() { \n<br>\n         let val = SealedOp{}.execute(&mut vec![expr!(x y), expr!(\"=\"(y z))]); \n<br>\n         assert!(crate::atom::matcher::atoms_are_equivalent(&val.unwrap()[0], &expr!(\"=\"(y z)))); \n<br>\n     } \n<br>\n ")
found_search_result(metta_ontol_pl,"case",0,346,'../canary/metta_ontology.pfc.pl',"properties('&corelib','case', [flow_control, qhelp(\"Case selection.\"), conditional_execution]).")
found_search_result(metta_ontol_pl,"let*",0,348,'../canary/metta_ontology.pfc.pl',"properties('&corelib','let*', [variable_assignment, qhelp(\"Sequential variable assignment.\"), sequential]).")
found_search_result(metta_ontol_pl,"sealed",0,349,'../canary/metta_ontology.pfc.pl',"properties('&corelib','sealed', [variable_scoping, qhelp(\"Variable scoping.\")]).")
found_search_result(metta_ontol_pl,"function",0,350,'../canary/metta_ontology.pfc.pl',"properties('&corelib','function', [function_definition, qhelp(\"Function block.\")]).")
found_search_result(metta_ontol_pl,"return",0,351,'../canary/metta_ontology.pfc.pl',"properties('&corelib','return', [function_definition, qhelp(\"Return value of a function block.\"), return_value]).")
found_search_result(metta_ontol_pl,"catch",0,355,'../canary/metta_ontology.pfc.pl',"properties('&corelib','catch', [error_handling, qhelp(\"Catches exceptions.\"), exception_handling]).")
found_search_result(metta_ontol_pl,"throw",0,356,'../canary/metta_ontology.pfc.pl',"properties('&corelib','throw', [error_handling, qhelp(\"Throws exceptions.\"), exception_handling]).")
found_search_result(metta_ontol_pl,"collapse",0,359,'../canary/metta_ontology.pfc.pl',"properties('&corelib','collapse', [data_structures, qhelp(\"Collapses a structure.\"), manipulation]).")
found_search_result(metta_ontol_pl,"sequential",0,360,'../canary/metta_ontology.pfc.pl',"properties('&corelib','sequential', [data_structures, qhelp(\"Sequentially applies operations.\"), sequential_operations]).")
found_search_result(metta_ontol_pl,"repr",0,363,'../canary/metta_ontology.pfc.pl',"properties('&corelib','repr', [data_structures, qhelp(\"Represent an expression as string.\"), repr ]).")
found_search_result(metta_ontol_pl,"parse",0,364,'../canary/metta_ontology.pfc.pl',"properties('&corelib','parse', [data_structures, qhelp(\"Parse a string to an expression.\"), parse ]).")
found_search_result(metta_ontol_pl,"limit!",0,370,'../canary/metta_ontology.pfc.pl',"properties('&corelib','limit!', [iteration_control, qhelp(\"Limits the number of iterations.\")]).")
found_search_result(metta_ontol_pl,"offset!",0,372,'../canary/metta_ontology.pfc.pl',"properties('&corelib','offset!', [iteration_control, qhelp(\"Adjusts the starting point of iteration.\")]).")
found_search_result(metta_ontol_pl,"number-of",0,373,'../canary/metta_ontology.pfc.pl',"properties('&corelib','number-of', [iteration_control, qhelp(\"Returns iteration count.\")]).")
found_search_result(metta_ontol_pl,"pragma!",0,378,'../canary/metta_ontology.pfc.pl',"properties('&corelib','pragma!', [compiler_directive, qhelp(\"Compiler directive for optimizations/settings.\"), optimization]).")
found_search_result(metta_ontol_pl,"include!",0,379,'../canary/metta_ontology.pfc.pl',"properties('&corelib','include!', [code_inclusion, qhelp(\"Includes code from another file or context.\")]).")
found_search_result(metta_ontol_pl,"load-ascii",0,380,'../canary/metta_ontology.pfc.pl',"properties('&corelib','load-ascii', [file_handling, qhelp(\"Loads ASCII file content.\")]).")
found_search_result(metta_ontol_pl,"extend-py!",0,381,'../canary/metta_ontology.pfc.pl',"properties('&corelib','extend-py!', [integration, qhelp(\"Extends integration with Python.\"), python]).")
found_search_result(metta_ontol_pl,"import!",0,383,'../canary/metta_ontology.pfc.pl',"properties('&corelib','import!', [module_import, qhelp(\"Imports an external module or file.\")]).")
found_search_result(metta_ontol_pl,"eval-for",0,387,'../canary/metta_ontology.pfc.pl',"properties('&corelib','eval-for', [evaluation, qhelp(\"Evaluates assuming a return type.\"), type_assumption]).")
found_search_result(metta_ontol_pl,"call!",0,388,'../canary/metta_ontology.pfc.pl',"properties('&corelib','call!', [dynamic_call, qhelp(\"Tries to dynamically guess if predicate or function.\")]).")
found_search_result(metta_ontol_pl,"predicate-arity",0,390,'../canary/metta_ontology.pfc.pl',"properties('&corelib','predicate-arity', [function_definition, qhelp(\"Defines the arity of predicates/functions.\"), arity]).")
found_search_result(metta_ontol_pl,"call-fn!",0,391,'../canary/metta_ontology.pfc.pl',"properties('&corelib','call-fn!', [dynamic_call, qhelp(\"Calls a function dynamically.\"), function]).")
found_search_result(metta_ontol_pl,"call-string!",0,393,'../canary/metta_ontology.pfc.pl',"properties('&corelib','call-string!', [evaluation, qhelp(\"Evaluates a string of Prolog code.\"), prolog_code]).")
found_search_result(metta_ontol_pl,"match",0,396,'../canary/metta_ontology.pfc.pl',"properties('&corelib','match', [pattern_matching, qhelp(\"Matches patterns within structures or data.\")]).")
found_search_result(metta_ontol_pl,"get-atoms",0,397,'../canary/metta_ontology.pfc.pl',"properties('&corelib','get-atoms', [data_retrieval, qhelp(\"Retrieves atoms from a structure.\")]).")
found_search_result(metta_ontol_pl,"new-space",0,398,'../canary/metta_ontology.pfc.pl',"properties('&corelib','new-space', [memory_allocation, qhelp(\"Allocates new space or memory region.\")]).")
found_search_result(metta_ontol_pl,"remove-atom",0,399,'../canary/metta_ontology.pfc.pl',"properties('&corelib','remove-atom', [manipulation, qhelp(\"Removes an atom from a structure.\")]).")
found_search_result(metta_ontol_pl,"add-atom",0,400,'../canary/metta_ontology.pfc.pl',"properties('&corelib','add-atom', [manipulation, qhelp(\"Replaces an atom within a structure.\")]).")
found_search_result(metta_ontol_pl,"transfer!",0,404,'../canary/metta_ontology.pfc.pl',"properties('&corelib','transfer!', [memory_management, qhelp(\"Transfers space content to another space.\")]).")
found_search_result(metta_ontol_pl,"fromnumber",0,409,'../canary/metta_ontology.pfc.pl',"properties('&corelib','fromNumber', [type_conversion, qhelp(\"Converts from a numeric type to another type.\")]).")
found_search_result(metta_ontol_pl,"coerce",0,410,'../canary/metta_ontology.pfc.pl',"properties('&corelib','coerce', [type_conversion, qhelp(\"Forces argument types for compatibility.\"), compatibility]).")
found_search_result(metta_ontol_pl,"=",0,425,'../canary/metta_ontology.pfc.pl',"properties('&corelib','=', [logic, qhelp(\"Equality/unification operator.\"), equality]).")
found_search_result(metta_ontol_pl,"time!",0,437,'../canary/metta_ontology.pfc.pl',"properties('&corelib','time!', [execution_timing, qhelp(\"Execution timing.\")]).")
found_search_result(metta_ontol_pl,"trace!",0,438,'../canary/metta_ontology.pfc.pl',"properties('&corelib','trace!', [debugging, qhelp(\"Prints some debug information.\"), information_printing]).")
found_search_result(metta_ontol_pl,"no-rtrace!",0,439,'../canary/metta_ontology.pfc.pl',"properties('&corelib','no-rtrace!', [debugging, qhelp(\"Disables tracing for debugging.\"), trace_control]).")
found_search_result(metta_ontol_pl,"rtrace!",0,440,'../canary/metta_ontology.pfc.pl',"properties('&corelib','rtrace!', [debugging, qhelp(\"Enables tracing for debugging.\"), trace_control]).")
found_search_result(metta_ontol_pl,"println!",0,441,'../canary/metta_ontology.pfc.pl',"properties('&corelib','println!', [output, qhelp(\"Prints text with newline to output.\"), text_printing]).")
found_search_result(metta_ontol_pl,"with-output-to!",0,442,'../canary/metta_ontology.pfc.pl',"properties('&corelib','with-output-to!', [output, qhelp(\"Redirects output to a specified target.\"), redirection]).")
found_search_result(metta_ontol_pl,"print",0,443,'../canary/metta_ontology.pfc.pl',"properties('&corelib','print', [output, qhelp(\"Prints text to output.\"), text_printing]).")
found_search_result(metta_ontol_pl,"change-state!",0,451,'../canary/metta_ontology.pfc.pl',"properties('&corelib','change-state!', [state_management, qhelp(\"Changes the state of a system component.\"), system_integration]).")
found_search_result(metta_ontol_pl,"get-state",0,453,'../canary/metta_ontology.pfc.pl',"properties('&corelib','get-state', [state_management, qhelp(\"Gets the state of a component or system.\"), data_retrieval]).")
found_search_result(metta_ontol_pl,"car-atom",0,456,'../canary/metta_ontology.pfc.pl',"properties('&corelib','car-atom', [list_operations, qhelp(\"Retrieves the head of a list.\"), head_retrieval]).")
found_search_result(metta_ontol_pl,"cdr-atom",0,457,'../canary/metta_ontology.pfc.pl',"properties('&corelib','cdr-atom', [list_operations, qhelp(\"Retrieves the tail of a list.\"), tail_retrieval]).")
found_search_result(metta_ontol_pl,"make_list",0,459,'../canary/metta_ontology.pfc.pl',"properties('&corelib','make_list', [list_operations, qhelp(\"Creates a list with specified elements.\"), creation]).")
found_search_result(metta_ontol_pl,"cons",0,460,'../canary/metta_ontology.pfc.pl',"properties('&corelib','Cons', [list_operations, qhelp(\"Constructs a list.\"), construction]).")
found_search_result(metta_ontol_pl,"length",0,461,'../canary/metta_ontology.pfc.pl',"properties('&corelib','length', [list_operations, qhelp(\"Determines the length of a list.\"), length_determination]).")
found_search_result(metta_ontol_pl,"countelement",0,462,'../canary/metta_ontology.pfc.pl',"properties('&corelib','countElement', [list_operations, qhelp(\"Counts occurrences of an element.\"), element_counting]).")
found_search_result(metta_ontol_pl,"unique",0,468,'../canary/metta_ontology.pfc.pl',"properties('&corelib','unique', [nondet_sets, qhelp(\"Makes nondet results unique.\"), no_repeats_var]).")
found_search_result(metta_ontol_pl,"subtraction",0,469,'../canary/metta_ontology.pfc.pl',"properties('&corelib','subtraction', [nondet_sets, qhelp(\"It subtracts elements generated by Call2 from those generated by Call1.\"), lazy_subtraction]).")
found_search_result(metta_ontol_pl,"intersection",0,470,'../canary/metta_ontology.pfc.pl',"properties('&corelib','intersection', [nondet_sets, qhelp(\"It gives the intersection duplicates are not removed .\"), lazy_intersection]).")
found_search_result(metta_ontol_pl,"union",0,471,'../canary/metta_ontology.pfc.pl',"properties('&corelib','union', [nondet_sets, qhelp(\"It gives the union of 2 list .\"), lazy_union ]).")
found_search_result(metta_ontol_pl,"stringtochars",0,475,'../canary/metta_ontology.pfc.pl',"properties('&corelib','stringToChars', [string_operations, qhelp(\"Convert a string to a list of chars.\"), string_to_chars]).")
found_search_result(metta_ontol_pl,"charstostring",0,476,'../canary/metta_ontology.pfc.pl',"properties('&corelib','charsToString', [string_operations, qhelp(\"Convert a list of chars to a string.\"), chars_to_string]).")
found_search_result(metta_ontol_pl,"format-args",0,477,'../canary/metta_ontology.pfc.pl',"properties('&corelib','format-args', [string_operations, qhelp(\"Generate a formatted string using a format specifier.\"), format_args]).")
found_search_result(metta_ontol_pl,"flip",0,478,'../canary/metta_ontology.pfc.pl',"properties('&corelib','flip', [random, qhelp(\"Return a random boolean.\"), random_boolean]).")
found_search_result(metta_example,"match",1,3,'../../tests/baseline_compat/metta-morph_tests/match_feval.metta',"!(match &self (= (f $x) $y) $y)")
found_search_result(metta_example,"collapse",1,10,'../../tests/baseline_compat/metta-morph_tests/supercollapse.metta',"\t\t (collapse (superpose ((superpose $V1) (superpose $V2))))))\n\n!(TupleConcat (a b c) (e f g))\n!(TupleConcat () (e f g))\n!(TupleConcat (a b c) ())\n\n(= (range $K $N)\n   (If (< $K $N)")
found_search_result(metta_example,"pragma!",1,24,'../../tests/baseline_compat/metta-morph_tests/supercollapse.metta',"\t(pragma! trace-on-exec False)")
found_search_result(metta_example,"pragma!",1,25,'../../tests/baseline_compat/metta-morph_tests/supercollapse.metta',"\t(pragma! trace-on-eval False)")
found_search_result(metta_example,"pragma!",1,26,'../../tests/baseline_compat/metta-morph_tests/supercollapse.metta',"\t(pragma! trace-length 1090)")
found_search_result(metta_example,"pragma!",1,27,'../../tests/baseline_compat/metta-morph_tests/supercollapse.metta',"\t(pragma! stack-max 100))\n\n\n!(range 1 1)\n\n!(range 1 3)\n\n!(range 2 6)\n")
found_search_result(metta_example,"bind!",1,1,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(bind! &belief_events (new-space))")
found_search_result(metta_example,"bind!",1,2,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(bind! &goal_events (new-space))")
found_search_result(metta_example,"match",1,3,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(match &belief_events $1 $1)")
found_search_result(metta_example,"add-atom",1,4,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(add-atom &belief_events belief1)")
found_search_result(metta_example,"match",1,5,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(match &belief_events $1 $1)")
found_search_result(metta_example,"case",1,6,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(case belief1\n    ((%void% 42\n      )))")
found_search_result(metta_example,"case",1,9,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(case (match &belief_events $1 $1)\n    ((%void% 42\n      )))")
found_search_result(metta_example,"case",1,12,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(assertEqualToResult (case (match &belief_events $1 $1)\n    ((belief1 yes) (%void% 42\n     ))) (yes))")
found_search_result(metta_example,"case",1,15,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(assertEqualToResult (case (match &goal_events $1 $1)\n   ((%void% 42\n   ))) (42))")
found_search_result(metta_example,"case",1,18,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(assertEqualToResult (case (match &goal_events $1 $1)\n  ((goal1 yes)\n    (%void%\n      42))) (42))")
found_search_result(metta_example,"add-atom",1,22,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(add-atom &goal_events goal1)")
found_search_result(metta_example,"case",1,23,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(assertEqualToResult (case (match &goal_events $1 $1)\n   ((goal1 yes) (%void%\n     42))) (yes))")
found_search_result(metta_example,"case",1,26,'../../tests/baseline_compat/metta-morph_tests/match_void.metta',"!(assertEqualToResult (case (match &goal_events $1 $1) ((\n  %void% 42\n  ))) ())")
found_search_result(metta_example,"match",1,16,'../../tests/baseline_compat/metta-morph_tests/types3.metta',"!(match &self (GreaterThan $x $y)\n    (If (and (== (get-type $x) Number) (== (get-type $y) Number))\n        (If (EqualOrGreater $x $y) yay)))")
found_search_result(metta_example,"case",1,12,'../../tests/baseline_compat/metta-morph_tests/let_superpose_if_case.metta',"          (case (1 $y)\n\t               (((1 3) (f 0))\n                        ((1 4) (42 42))\n                        ($else (1 1))))))\n\n!(assertEqualToResult\n   (let $y (superpose (3 4 5))")
found_search_result(metta_example,"case",1,20,'../../tests/baseline_compat/metta-morph_tests/let_superpose_if_case.metta',"          (case (1 $y) (((1 3) (f 0))\n                        ((1 4) (42 42))\n                       ($else (1 1))))))\n     ((42 42) (1 1)))\n")
found_search_result(metta_example,"new-state",1,1,'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(bind! &FIFO (new-state 42))")
found_search_result(metta_example,"bind!",1,2,'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(bind! &WU (new-space))")
found_search_result(metta_example,"change-state!",1,3,'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(change-state! &FIFO 45)")
found_search_result(metta_example,"get-state",1,4,'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(get-state &FIFO)")
found_search_result(metta_example,"add-atom",1,5,'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(add-atom &WU a)")
found_search_result(metta_example,"match",1,6,'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(match &WU $1 $1)")
found_search_result(metta_example,"add-atom",1,7,'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(add-atom &WU b)")
found_search_result(metta_example,"remove-atom",1,8,'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"!(remove-atom &WU a)")
found_search_result(metta_example,"match",1,11,'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"  (match &WU $1 $1)")
found_search_result(metta_example,"get-atoms",1,12,'../../tests/baseline_compat/metta-morph_tests/states_spaces.metta',"  (get-atoms &WU))")
found_search_result(metta_example,"bind!",1,1,'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"!(bind! &attentional_focus (new-space))")
found_search_result(metta_example,"add-atom",1,2,'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"!(add-atom &attentional_focus 1)")
found_search_result(metta_example,"bind!",1,3,'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"!(bind! &concepts (new-space))")
found_search_result(metta_example,"add-atom",1,4,'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"!(add-atom &concepts 2)")
found_search_result(metta_example,"match",1,8,'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"  (match &attentional_focus $1 $1)")
found_search_result(metta_example,"match",1,12,'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"  (match &concepts $1 $1)")
found_search_result(metta_example,"match",1,17,'../../tests/baseline_compat/metta-morph_tests/match_superposed_spaces.metta',"   (match (superpose (&attentional_focus &concepts)) $1 $1)")
found_search_result(metta_example,"sequential",1,9,'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"(= (sequential $1) (superpose $1))")
found_search_result(metta_example,"case",1,12,'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"(= (do $1) (case $1 ()))")
found_search_result(metta_example,"collapse",1,18,'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"(= (TupleConcat $Ev1 $Ev2) (collapse (superpose ((superpose $Ev1) (superpose $Ev2)))))")
found_search_result(metta_example,"let*",1,27,'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"   (let* (($w1 (Truth_c2w $c1)) ($w2 (Truth_c2w $c2)) ($w  (+ $w1 $w2))\n          ($f (/ (+ (* $w1 $f1) (* $w2 $f2)) $w)) ($c (Truth_w2c $w)))\n          ((min 1.00 $f) (min 0.99 (max (max $c $c1) $c2)))))\n(= (Truth_Expectation ($f $c)) (+ (* $c (- $f 0.5)) 0.5))\n\n;;NAL-1\n;;!Syllogistic rules for Inheritance:\n(= (|- ($T $T1) ($T $T2)) ($T (Truth_Revision $T1 $T2)))\n(= (|- (($a --> $b) $T1) (($b --> $c) $T2)) (($a --> $c) (Truth_Deduction $T1 $T2)))")
found_search_result(metta_example,"let*",1,41,'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"   (== () (collapse (let* (($x (superpose $Ev1))\n                           ($y (superpose $Ev2)))\n                          (case (== $x $y) ((True overlap)))))))\n\n;actually that is quite cool and 4x faster in MeTTa than below (yet still 130 times slower than metta-morph with below)\n;but it depends on more advanced pattern matching features which are not yet in metta-morph\n;(= (query $Term)")
found_search_result(metta_example,"match",1,48,'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',";   (match &self (, (= (|- ($A $T1) ($B $T2)) ($Term ($f $T1 $T2)))\n;                   (($A $T1) $Ev1) (($B $T2) $Ev2))\n;          (If (StampDisjoint $Ev1 $Ev2)\n;              (($Term ($f $T1 $T2)) (TupleConcat $Ev1 $Ev2)))))\n\n(= (query $Term)")
found_search_result(metta_example,"match",1,54,'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"   (match &self (, (($A $T1) $Ev1) (($B $T2) $Ev2))\n          (let ($TermNew $T) (|- ($A $T1) ($B $T2))\n               (If (and (== $TermNew $Term) (StampDisjoint $Ev1 $Ev2))\n                   (($Term $T) (TupleConcat $Ev1 $Ev2))))))\n\n;choice between two options of different term\n(= (Choice (($Term1 $T1) $ev1) (($Term2 $T2) $ev2))")
found_search_result(metta_example,"let*",1,78,'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"       (let* (($head (car-atom $options))\n              ($rest (cdr-atom $options))\n              ($revi ($revChoiceOrBoth $option $head)))\n             (reduceBeliefs $revChoiceOrBoth $revi $rest))))\n\n;an empty event for reduction purposes\n(= (EmptyEvent todo) ((x (1.0 0.0)) ()))\n\n;evidence query tries to maximize evidence for the passed statement term")
found_search_result(metta_example,"collapse",1,87,'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"(= (evidenceQuery $Term) (reduceBeliefs RevisionAndChoice (EmptyEvent todo) (collapse (query $Term))))")
found_search_result(metta_example,"collapse",1,91,'../../tests/baseline_compat/metta-morph_tests/nalifier.metta',"   (let $options (collapse (evidenceQuery (superpose $Terms)))\n        (reduceBeliefs Choice (EmptyEvent todo) $options)))\n\n\n\n(((dog --> (IntSet brown)) (1.0 0.9)) (1))\n(((dog --> (IntSet small)) (1.0 0.9)) (2))\n(((dog --> (IntSet furry)) (1.0 0.9)) (3))\n(((dog --> (IntSet barks)) (1.0 0.9)) (4))")
found_search_result(metta_example,"pragma!",1,2,'../../tests/baseline_compat/metta-morph_tests/tests0.metta',";!(pragma! trace-on-fail True)")
found_search_result(metta_example,"pragma!",1,3,'../../tests/baseline_compat/metta-morph_tests/tests0.metta',";!(pragma! trace-on-pass True)")
found_search_result(metta_example,"import!",1,5,'../../tests/baseline_compat/metta-morph_tests/tests0.metta',"!(import! &self NARS)")
found_search_result(metta_example,"let*",1,2,'../../tests/baseline_compat/metta-morph_tests/let_superpose_list2.metta',"   (let* (($y (* 2 $x))\n            ($z (superpose $L)))\n        ($y $z)))\n\n\n!(assertEqual")
found_search_result(metta_example,"sequential",1,3,'../../tests/baseline_compat/metta-morph_tests/add_atom_match.metta',"(= (sequential $1) (superpose $1))")
found_search_result(metta_example,"sequential",1,7,'../../tests/baseline_compat/metta-morph_tests/add_atom_match.metta',";  (sequential\n;\t( (add-atom &self (man mortal))\n;\t  (match &self ($A mortal) (mortal $A))))")
found_search_result(metta_example,"sequential",1,12,'../../tests/baseline_compat/metta-morph_tests/add_atom_match.metta',"!(sequential\n\t( (add-atom &self (man mortal))\n\t  (match &self ($A mortal) (mortal $A))))")
found_search_result(metta_example,"collapse",1,1,'../../tests/baseline_compat/metta-morph_tests/collapse.metta',"!(collapse (1 2 3))")
found_search_result(metta_example,"repr",1,5,'../../tests/baseline_compat/metta-morph_tests/types2.metta',"(= (reproduce $x $y) childlion)")
found_search_result(metta_example,"get-type",1,9,'../../tests/baseline_compat/metta-morph_tests/types2.metta',"!(get-type lion1)")
found_search_result(metta_example,"repr",1,11,'../../tests/baseline_compat/metta-morph_tests/types2.metta',"!(reproduce lion1 lion2)")
found_search_result(metta_example,"get-type",1,13,'../../tests/baseline_compat/metta-morph_tests/types2.metta',"!(get-type Lion)")
found_search_result(metta_example,"match",1,15,'../../tests/baseline_compat/metta-morph_tests/types2.metta',"!(match &self (: Lion $1) $1)")
found_search_result(metta_example,"match",1,16,'../../tests/baseline_compat/metta-morph_tests/types2.metta',"!(match &self (: reproduce $1) $1)")
found_search_result(metta_example,"sequential",1,2,'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"(= (sequential $1) (superpose $1))")
found_search_result(metta_example,"case",1,5,'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"(= (do $1) (case $1 ()))")
found_search_result(metta_example,"new-state",1,9,'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(bind! &var (new-state 1))")
found_search_result(metta_example,"change-state!",1,11,'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"   (superpose ((do (change-state! &var (+ 1 (get-state &var))))\n               (get-state &var))))\n\n!(sequential ((increment) (increment)))\n!(sequential ((increment) (increment) (increment)))\n!(sequential ((sequential ((increment) (increment) (increment)))))\n!(sequential ((sequential ((increment) (increment) (increment))) (sequential ((increment) (increment) (increment)))))\n!(sequential ((sequential ((increment) (increment) (increment))) (increment) (increment) (increment)))\n!(do (sequential ((sequential ((increment) (increment) (increment))) (increment) (increment) (increment))))")
found_search_result(metta_example,"get-state",1,20,'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(get-state &var)")
found_search_result(metta_example,"sequential",1,21,'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(sequential ((increment)))")
found_search_result(metta_example,"get-state",1,23,'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(get-state &var)")
found_search_result(metta_example,"sequential",1,24,'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(sequential ((change-state! &var (+ 1 (get-state &var)))))")
found_search_result(metta_example,"get-state",1,25,'../../tests/baseline_compat/metta-morph_tests/sequential_nested.metta',"!(get-state &var)")
found_search_result(metta_example,"let*",1,2,'../../tests/baseline_compat/metta-morph_tests/let_superpose_list.metta',"   (let* (($y (* 2 $x))\n          ($z (superpose (4 5))))\n          ($y $z)))\n\n!(wuza 5)\n\n!(assertEqual")
found_search_result(metta_example,"hyperpose",1,9,'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 2)) (superpose (1 2)))")
found_search_result(metta_example,"hyperpose",1,11,'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 (If (== 1 2) 1)))\n  (superpose  (1 (If (== 1 2) 1))))")
found_search_result(metta_example,"hyperpose",1,14,'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose ((If (== 1 2) 1) 1))\n  (superpose  ((If (== 1 2) 1) 1)))")
found_search_result(metta_example,"hyperpose",1,17,'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 2 3))\n  (superpose  (1 2 3)))")
found_search_result(metta_example,"hyperpose",1,20,'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose ((If (== 1 2) 1) 2 3))\n  (superpose  ((If (== 1 2) 1) 2 3)))")
found_search_result(metta_example,"hyperpose",1,23,'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 (If (== 1 2) 1) 3))\n  (superpose  (1 (If (== 1 2) 1) 3)))")
found_search_result(metta_example,"hyperpose",1,26,'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 2 (If (== 1 2) 1)))\n  (superpose  (1 2 (If (== 1 2) 1))))")
found_search_result(metta_example,"hyperpose",1,29,'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 (If (== 1 2) 1) (If (== 1 2) 1)))\n  (superpose  (1 (If (== 1 2) 1) (If (== 1 2) 1))))")
found_search_result(metta_example,"hyperpose",1,32,'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose (1 2 3 4))\n  (superpose  (1 2 3 4)))")
found_search_result(metta_example,"hyperpose",1,35,'../../tests/baseline_compat/metta-morph_tests/hyperpose.metta',"!(assertEqual (hyperpose ((1 2) (3 4)))\n  (superpose  ((1 2) (3 4))))")
found_search_result(metta_example,"let*",1,2,'../../tests/baseline_compat/metta-morph_tests/letlet.metta',"      (let* ((($f1 $c1) $T))\n            ($f1 $c1)))")
found_search_result(metta_example,"bind!",1,7,'../../tests/baseline_compat/hyperon-experimental_scripts/e1_kb_write.metta',"!(bind! &kb (new-space))")
found_search_result(metta_example,"add-atom",1,28,'../../tests/baseline_compat/hyperon-experimental_scripts/e1_kb_write.metta',"       (add-atom &kb (Green $x)))\n  (() ()))\n\n; Retrieve the inferred Green things: Fritz and Sam.\n!(assertEqualToResult\n  (match &kb (Green $x) $x)\n  (Fritz Sam))")
found_search_result(metta_example,"get-atoms",1,6,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"; Even at the very beginning of the main script `(get-atoms &self)`")
found_search_result(metta_example,"get-atoms",1,10,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',";;!(get-atoms &self)")
found_search_result(metta_example,"get-type",1,11,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',";;!(get-type (get-atoms &self))")
found_search_result(metta_example,"get-type",1,12,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"!(get-type &self)")
found_search_result(metta_example,"get-type",1,15,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"  ((let $x (get-atoms &self) (get-type $x)))")
found_search_result(metta_example,"get-type",1,16,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"  ((get-type &self)))\n\n; stdlib is already loaded\n!(assertEqual")
found_search_result(metta_example,"import!",1,27,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"!(import! &m f1_moduleA.metta)")
found_search_result(metta_example,"let*",1,31,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',";  (let* (($x (collapse (get-atoms &m)))\n;         ($y (car-atom $x)))\n;        (get-type $y))")
found_search_result(metta_example,"get-type",1,34,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',";  (get-type &self))\n\n\n; FIXME? Now, it is moduleC space.\n;        Should it be `stdlib` atom for a separately imported space\n; !(let $x (collapse (get-atoms &m)) (car-atom $x))\n\n\n; MeTTLog:  xlisting('&m').")
found_search_result(metta_example,"match",1,54,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"  (match &m (= (f 2) $x) $x)")
found_search_result(metta_example,"import!",1,60,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"!(import! &self f1_moduleA.metta)")
found_search_result(metta_example,"&self",1,68,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"; MeTTLog:  xlisting('&self').")
found_search_result(metta_example,"let*",1,76,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"  (let* (($a (collapse (get-atoms &self)))\n          ($x (cdr-atom $a))\n          ($y (cdr-atom $x)))\n         (car-atom $y)))\n\n; NOTE: now the first atom, which was a space, is removed from `&m`,\n; because we load modules only once, and we collect atoms-spaces to\n; prevent duplication\n!(assertEqual")
found_search_result(metta_example,"let*",1,85,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"  (== (let* (($x (collapse (get-atoms &m)))\n             ($y (car-atom $x)))\n            (get-type $y))\n        (get-type &self))")
found_search_result(metta_example,"import!",1,100,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"!(import! &self f1_moduleB.metta)")
found_search_result(metta_example,"import!",1,115,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_imports.metta',"!(import! &self ../hyperon-experimental_scripts/f1_moduleB.metta)")
found_search_result(metta_example,"match",1,16,'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',"  (match &self (= (color) $x) $x)")
found_search_result(metta_example,"match",1,18,'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',";!(assertEqual (match &self (= (color) $x) $x) (color))")
found_search_result(metta_example,"collapse",1,21,'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',";!(assertEqual (collapse (color)) (red yellow green))")
found_search_result(metta_example,"collapse",1,30,'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',"  (collapse\n    (match &self (= (shape) $x) $x))")
found_search_result(metta_example,"collapse",1,50,'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',"  (let $x (collapse (color)) (superpose $x)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; In contrast to `match`, if the equality query returns an empty result\n; the interpreter doesn't reduce a symbolic expression\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n!(assertEqual")
found_search_result(metta_example,"collapse",1,58,'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',"  (collapse (shape))")
found_search_result(metta_example,"match",1,89,'../../tests/baseline_compat/hyperon-experimental_scripts/b4_nondeterm.metta',"   (match &self (= (eq $x $y) T) $x))\n!(assertEqual")
found_search_result(metta_example,"match",1,16,'../../tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta',"  (match &self\n    (:= (S K K x) $r)\n    $r)")
found_search_result(metta_example,"match",1,24,'../../tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta',"  (match &self\n    (:= (K x (K x)) $r)\n    $r)")
found_search_result(metta_example,"match",1,31,'../../tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta',"  (match &self\n    (:= (S K K x) $r)\n    (match &self (:= $r $r2)\n      $r2))")
found_search_result(metta_example,"match",1,46,'../../tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta',"  (match &self\n    (:= (Add (S Z) (S Z)) $r)\n    $r)")
found_search_result(metta_example,"match",1,53,'../../tests/baseline_compat/hyperon-experimental_scripts/b0_chaining_prelim.metta',"  (match &self\n    (:= (Add (S Z) (S Z)) $r)\n    (match &self (:= $r $r2)\n      $r2))")
found_search_result(metta_example,"get-type",1,12,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (curry +))")
found_search_result(metta_example,"get-type",1,15,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type ((curry +) 2))")
found_search_result(metta_example,"get-type",1,37,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (curry-a + 2))")
found_search_result(metta_example,"get-type",1,40,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type ((curry-a + 2) 3))")
found_search_result(metta_example,"get-type",1,44,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type ((curry-a + 2) \"S\"))")
found_search_result(metta_example,"get-type",1,103,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',";   (get-type (lambda ($x $y) (+ $x $y)))")
found_search_result(metta_example,"get-type",1,155,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 1) (Left 5)))")
found_search_result(metta_example,"get-type",1,169,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (Left \"5\")))")
found_search_result(metta_example,"get-type",1,172,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (UntypedC \"5\")))")
found_search_result(metta_example,"get-type",1,175,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (UntypedC (Null) 5)))")
found_search_result(metta_example,"cons",1,197,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"(= (fmap-i $f (Cons $x $xs))\n   (Cons ($f $x) (fmap-i $f $xs)))")
found_search_result(metta_example,"cons",1,203,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (fmap-i (curry-a * 2) (Cons 3 (Cons 4 Nil)))")
found_search_result(metta_example,"cons",1,204,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (Cons 6 (Cons 8 Nil)))\n\n; Thus, there is no problem in having different implementations\n; of the same function for different types. But it will not\n; work \"for free\" (it requires explicit implementation for each type)\n!(assertEqualToResult")
found_search_result(metta_example,"cons",1,223,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"(= (insert $x Nil) (Cons $x Nil))")
found_search_result(metta_example,"cons",1,224,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"(= (insert $x (Cons $head $tail))\n  (case (< $x $head)\n      ((True  (Cons $x (Cons $head $tail)))\n       (False (Cons $head (insert $x $tail))))))")
found_search_result(metta_example,"cons",1,231,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"(= (sort (Cons $head $tail)) (insert $head (sort $tail)))")
found_search_result(metta_example,"cons",1,234,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (Cons 1 (Cons 2 (Cons 3 Nil))))\n!(assertEqual")
found_search_result(metta_example,"cons",1,236,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (sort (Cons 3 (Cons 1 (Cons 2 Nil))))")
found_search_result(metta_example,"cons",1,237,'../../tests/baseline_compat/hyperon-experimental_scripts/d2_higherfunc.metta',"  (Cons 1 (Cons 2 (Cons 3 Nil))))")
found_search_result(metta_example,"cons",1,19,'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (get-type (Cons 0 (Cons 1 Nil)))")
found_search_result(metta_example,"cons",1,24,'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"(= (drop (Cons $x $xs)) $xs)")
found_search_result(metta_example,"cons",1,28,'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (get-type (drop (Cons 1 Nil)))")
found_search_result(metta_example,"cons",1,32,'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (drop (Cons 2 (Cons 1 Nil)))")
found_search_result(metta_example,"cons",1,33,'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (Cons 1 Nil))\n\n; Types can protect against misuse, like dropping from empty Vec\n!(assertEqualToResult")
found_search_result(metta_example,"get-type",1,37,'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (get-type (drop Nil))")
found_search_result(metta_example,"cons",1,54,'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (get-type (ConsN \"1\" (ConsN \"2\" NilN)))")
found_search_result(metta_example,"cons",1,59,'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"(= (dropN (ConsN $x $xs)) $xs)")
found_search_result(metta_example,"cons",1,62,'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  (get-type (dropN (ConsN \"1\" NilN)))")
found_search_result(metta_example,"cons",1,68,'../../tests/baseline_compat/hyperon-experimental_scripts/d3_deptypes.metta',"  ((get-type (dropN (dropN (ConsN \"1\" NilN)))))")
found_search_result(metta_example,"match",1,13,'../../tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta',"  (match &self\n    (implies (Frog Sam) $what)\n    $what)")
found_search_result(metta_example,"match",1,20,'../../tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta',"  (match &self\n    (implies ($P $x) (Green Sam))\n    ($x might be $P))")
found_search_result(metta_example,"match",1,36,'../../tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta',"  (match &self\n    (, (Frog $x)\n       (implies (Frog $x) $y))\n    $y)")
found_search_result(metta_example,"match",1,48,'../../tests/baseline_compat/hyperon-experimental_scripts/a3_twoside.metta',"  (match &self\n    (, (implies ($P $x) (Green $x))\n       (implies ($P $x) (Eats-flies $x)))\n    (Then it is definitely $P))")
found_search_result(metta_example,"match",1,17,'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (($x leaf2) leaf3) $x)")
found_search_result(metta_example,"match",1,30,'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self ($who is a $what) ($who the $what))")
found_search_result(metta_example,"match",1,44,'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (:= (Green $who) T) ($who is really green))")
found_search_result(metta_example,"match",1,47,'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (:= ($color $who) T) ($who is really $color))")
found_search_result(metta_example,"match",1,51,'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (:= ($color $who) $tv) (It's $tv that $who is $color))")
found_search_result(metta_example,"match",1,57,'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (:= (Green Tom) $tv) $tv)")
found_search_result(metta_example,"match",1,68,'../../tests/baseline_compat/hyperon-experimental_scripts/a1_symbols.metta',"  (match &self (isa $color color) $color)")
found_search_result(metta_example,"match",1,7,'../../tests/baseline_compat/hyperon-experimental_scripts/b1_equal_chain.metta',"; (match &self (= (expr) $r) $r)")
found_search_result(metta_example,"import!",1,6,'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"!(import! &kb c2_spaces_kb)")
found_search_result(metta_example,"match",1,10,'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"  (match &kb\n    (, ($obj is $prop)\n       ($prop is-a Color)\n       ($obj is-a Planet))\n    (Color of Planet $obj is $prop))")
found_search_result(metta_example,"match",1,19,'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"  (match &self ($p is-a Color) $p)")
found_search_result(metta_example,"match",1,27,'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"  (match &kb\n    (, (Venus orbit $x au)\n       (Mars orbit $y au))\n    (- $y $x))")
found_search_result(metta_example,"match",1,41,'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"  (match &kb ($prop is-a Color)\n    (match &self ($obj is $prop)\n       $obj))")
found_search_result(metta_example,"import!",1,51,'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"!(import! &self c2_spaces_kb)")
found_search_result(metta_example,"match",1,53,'../../tests/baseline_compat/hyperon-experimental_scripts/c2_spaces.metta',"  (match &self\n    (, ($obj is $prop)\n       ($prop is-a Color)\n       ($obj is-a Planet))\n    (Color of Planet $obj is $prop))")
found_search_result(metta_example,"match",1,20,'../../tests/baseline_compat/hyperon-experimental_scripts/c3_pln_stv.metta',"   (match &self\n     (.tv $x $stv)\n     $stv\n   )")
found_search_result(metta_example,"match",1,36,'../../tests/baseline_compat/hyperon-experimental_scripts/c3_pln_stv.metta',"   (match &self\n     (.tv (Implication $y $x)\n          (stv $s $c))\n     (stv (* $s (s-tv (TV $y)))\n          (* $c (c-tv (TV $y))))\n   )")
found_search_result(metta_example,"import!",1,5,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_moduleB.metta',"!(import! &self f1_moduleC.metta)")
found_search_result(metta_example,"get-type",1,7,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type 5)")
found_search_result(metta_example,"get-type",1,10,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (+ 5 7))")
found_search_result(metta_example,"get-type",1,15,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type +)")
found_search_result(metta_example,"get-type",1,21,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (+ 5 \"4\"))")
found_search_result(metta_example,"get-type",1,24,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (+ -))")
found_search_result(metta_example,"get-type",1,30,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type Either)")
found_search_result(metta_example,"get-type",1,41,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (Left 5))")
found_search_result(metta_example,"get-type",1,49,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (isLeft (Right 5)))")
found_search_result(metta_example,"get-type",1,54,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (isLeft 5))")
found_search_result(metta_example,"get-type",1,66,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (LeftP 5))")
found_search_result(metta_example,"get-type",1,73,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (pair (LeftP 5) \"String\"))")
found_search_result(metta_example,"cons",1,85,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (Cons 5 (Cons 6 Nil)))")
found_search_result(metta_example,"cons",1,88,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (get-type (Cons 5 (Cons \"6\" Nil)))")
found_search_result(metta_example,"cons",1,96,'../../tests/baseline_compat/hyperon-experimental_scripts/d1_gadt.metta',"  (let (List $t) (get-type (Cons 5 (Cons 6 Nil)))\n       $t)")
found_search_result(metta_example,"function",1,10,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"; Predicates (functions) from `Entity` to `Type`")
found_search_result(metta_example,"get-type",1,18,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (Mortal Plato))")
found_search_result(metta_example,"get-type",1,40,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (HumansAreMortal SocratesIsHuman))")
found_search_result(metta_example,"get-type",1,44,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (HumansAreMortal (Human Socrates)))")
found_search_result(metta_example,"remove-atom",1,57,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"(nop (remove-atom &self (: = (-> Atom Atom Atom))))")
found_search_result(metta_example,"remove-atom",1,58,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"(nop (remove-atom &corlib (: = (-> Atom Atom Atom))))")
found_search_result(metta_example,"get-type",1,61,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"!(\"sameTypes\" (get-type SocratesIsMortal) (get-type (HumansAreMortal SocratesIsHuman)))")
found_search_result(metta_example,"get-type",1,63,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (= SocratesIsMortal (HumansAreMortal SocratesIsHuman)))")
found_search_result(metta_example,"&self",1,67,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"; it doesn't mean that the equality itself is true (an inhabited type).")
found_search_result(metta_example,"get-type",1,69,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"!(\"sameTypes\" (get-type (Mortal Socrates)) (get-type (Mortal Plato)))")
found_search_result(metta_example,"get-type",1,71,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (= (Mortal Socrates) (Mortal Plato)))")
found_search_result(metta_example,"get-type",1,75,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsMortal) (get-type (HumansAreMortal PlatoIsHuman)))")
found_search_result(metta_example,"get-type",1,78,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (= SocratesIsMortal (HumansAreMortal PlatoIsHuman)))")
found_search_result(metta_example,"get-type",1,82,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsHuman) (get-type PlatoIsHuman))")
found_search_result(metta_example,"get-type",1,85,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (= SocratesIsHuman PlatoIsHuman))")
found_search_result(metta_example,"get-type",1,88,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsHuman) (get-type SocratesIsMortal))")
found_search_result(metta_example,"get-type",1,90,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"  (get-type (= SocratesIsHuman SocratesIsMortal))")
found_search_result(metta_example,"match",1,122,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"   (match &self (: $x $type) T))\n!(assertEqual")
found_search_result(metta_example,"match",1,134,'../../tests/baseline_compat/hyperon-experimental_scripts/d4_type_prop.metta',"   (match &self (: $impl (-> $cause $type))\n      (= $cause T)))\n!(assertEqual")
found_search_result(metta_example,"new-state",1,8,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"!(bind! &state-token (new-state (A B)))")
found_search_result(metta_example,"get-state",1,18,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"   (get-state (get-token))")
found_search_result(metta_example,"new-state",1,27,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"   (new-state (A B)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; State atoms are of StateMonad type\n; These are inferred types based on new-state and change-state! signatures\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n!(assertEqual")
found_search_result(metta_example,"new-state",1,35,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (get-type (new-state 2))")
found_search_result(metta_example,"change-state!",1,39,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (get-type (change-state! (new-state \"S\") \"V\"))")
found_search_result(metta_example,"new-state",1,44,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (let $v (new-state 1) (get-type $v))")
found_search_result(metta_example,"get-type",1,49,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (get-type &state-token)")
found_search_result(metta_example,"rtrace!",1,58,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',";!(rtrace!\n!(assertEqual\n  (change-state! &state-token 1)\n  (Error 1 BadType))\n   ;)")
found_search_result(metta_example,"change-state!",1,66,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (change-state! (new-state 1) \"S\")")
found_search_result(metta_example,"change-state!",1,75,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"!(nop (change-state! &state-token (C D)))")
found_search_result(metta_example,"get-state",1,79,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"   (get-state (get-token))")
found_search_result(metta_example,"new-state",1,88,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (let $x (new-state 1)\n     (change-state! $x (+ (get-state $x) 1)))")
found_search_result(metta_example,"new-state",1,90,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"  (new-state 2))\n\n; Checking that there is no conflict between variable names in\n; let-expression and type definition of new-state\n!(assertEqual")
found_search_result(metta_example,"new-state",1,95,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"   (let $tnso (new-state 1) $tnso)")
found_search_result(metta_example,"new-state",1,96,'../../tests/baseline_compat/hyperon-experimental_scripts/e2_states.metta',"   (new-state 1))\n\n; FIXME: doesn't work as for 25 May 2023\n; !(get-state (let $x (new-state 1) $x))")
found_search_result(metta_example,"cons",1,85,'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"   (Cons (S Z) (Cons Z Nil))")
found_search_result(metta_example,"cons",1,86,'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  ((Cons (S Z) (Cons Z Nil))))\n\n; TODO: MINIMAL This test has different behavior in old and new versions of the\n;       interpreter versions. Uncomment it after migration to the minimal MeTTa.\n; This list is badly typed, because S and Z are not the same type\n!(assertEqualToResult")
found_search_result(metta_example,"cons",1,92,'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  (Cons S (Cons Z Nil))")
found_search_result(metta_example,"cons",1,93,'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  ((Error (Cons Z Nil) BadType)))\n;; We uncomment this because it still works in MeTTaLog !\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n; Another example\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(: T Type)\n; The type definition of `eq` specifies both its arguments")
found_search_result(metta_example,"match",1,175,'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  (match &self (Green $who) $who)")
found_search_result(metta_example,"match",1,185,'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  (match &self (Green $who) (Green $who))")
found_search_result(metta_example,"match",1,195,'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"    (match &self (= (eq $r (S Z)) $tv) $tv))\n  T)\n; but it will not work inside `match`:\n!(assertEqualToResult\n  (match &self (= (eq (Add (S Z) Z) (S Z)) $tv) $tv)\n  ())\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;")
found_search_result(metta_example,"let*",1,225,'../../tests/baseline_compat/hyperon-experimental_scripts/b5_types_prelim.metta',"  (let* (($r1 (Add Z Z))\n         ($r2 (Add $r1 (S Z)))\n         ($r3 (Add $r2 (S Z))))\n        (match &self (= (eq (S (S Z)) $r3) $tv) $tv))")
found_search_result(metta_example,"new-state",1,9,'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"    (let $new-state (new-state $status)\n         (add-atom &self\n\t\t   (= (status (Goal $goal)) $new-state))\n    )")
found_search_result(metta_example,"get-state",1,20,'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"  (get-state (status (Goal lunch-order)))")
found_search_result(metta_example,"change-state!",1,28,'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"!(nop (change-state! (status (Goal lunch-order)) active))")
found_search_result(metta_example,"get-state",1,36,'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"  (get-state (status (Goal lunch-order)))")
found_search_result(metta_example,"new-state",1,43,'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"!(bind! &state-active (new-state active))")
found_search_result(metta_example,"change-state!",1,44,'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"!(nop (change-state! &state-active inactive))")
found_search_result(metta_example,"new-state",1,45,'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"; We cannot put `(new-state active)` inside `match`, because it doesn't")
found_search_result(metta_example,"new-state",1,47,'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"; `(let $state-active (new-state active)) ...) here.\n\n; In any case, direct matching against expressions with states work:\n!(assertEqual")
found_search_result(metta_example,"match",1,51,'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"    (match &self (= (status (Goal $goal)) &state-active) $goal)")
found_search_result(metta_example,"get-state",1,57,'../../tests/baseline_compat/hyperon-experimental_scripts/e3_match_states.metta',"  (if (== (get-state (status (Goal $goal)))\n          active)\n      $goal\n      (superpose ()))")
found_search_result(metta_example,"import!",1,5,'../../tests/baseline_compat/hyperon-experimental_scripts/f1_moduleA.metta',"!(import! &self f1_moduleC.metta)")
found_search_result(metta_example,"match",1,8,'../../tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta',"(= (frog $x) (match &self (Frog $x) T))")
found_search_result(metta_example,"match",1,46,'../../tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta',"   (match &self (Evaluation ($P $x)) T))\n\n; Deduction case when the desired evaluation is the result\n; of an implication, which implies a recursion\n(= (deduce (Evaluation ($P $x)))")
found_search_result(metta_example,"match",1,51,'../../tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta',"   (match &self\n     (Implication $a (Evaluation ($P $x)))\n     (deduce $a)))\n\n; Deduction case for generic \"And\" expressions;\n; also recursive\n(= (deduce (And $a $b))")
found_search_result(metta_example,"match",1,79,'../../tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta',"   (match &self (Evaluation ($P $x)) ($P $x)))\n\n; Definition of explain when the desired Evaluation is\n; the result of an implication\n(= (explain (Evaluation ($P $x)))")
found_search_result(metta_example,"match",1,84,'../../tests/baseline_compat/hyperon-experimental_scripts/b2_backchain.metta',"   (match &self\n     (Implication $a (Evaluation ($P $x)))\n     (($P $x) proven by (explain $a))))\n\n; Definition of explain for And\n(= (explain (And $a $b))")
found_search_result(metta_example,"rtrace!",1,31,'../../tests/baseline_compat/hyperon-experimental_scripts/b3_direct.metta',";!(rtrace! (ift (green $x) $x))")
found_search_result(metta_example,"rtrace!",1,33,'../../tests/baseline_compat/hyperon-experimental_scripts/b3_direct.metta',"; !(rtrace! (, (green $x) (println! $x)))")
found_search_result(metta_example,"match",1,47,'../../tests/baseline_compat/hyperon-experimental_scripts/b3_direct.metta',"  (match &self (= ($p Fritz) T) $p)")
found_search_result(metta_example,"pragma!",1,5,'../../tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta',"!(pragma! type-check auto)")
found_search_result(metta_example,"collapse",1,41,'../../tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta',"   (collapse (+ 5 \"S\"))")
found_search_result(metta_example,"&self",1,51,'../../tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta',"; within MeTTa (e.g. for self-reflective genetic programming).")
found_search_result(metta_example,"match",1,53,'../../tests/baseline_compat/hyperon-experimental_scripts/d5_auto_types.metta',"(match &self (== SocratesIsHuman SamIsMortal) Really?)")
found_search_result(metta_example,"bind!",1,9,'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"!(bind! &memory (new-space))")
found_search_result(metta_example,"case",1,14,'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"   (case $expr\n     (($x $x)\n      (%void% None))))\n\n; `remove-state` will return an empty result if there is no\n; corresponding state in the memory\n(= (remove-state $var)")
found_search_result(metta_example,"match",1,21,'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"   (match &memory (state $var $y)\n         (remove-atom &memory (state $var $y))))\n\n; using `do` assures that the next clause will be executed\n; even if the result of the previous clause is empty\n(= (change-state $var $value)")
found_search_result(metta_example,"add-atom",1,28,'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"        (dood (add-atom &memory (state $var $value)))))\n\n(= (get-state $var)\n   (match &memory (state $var $value) $value))\n\n; Earlier, `(get-state (person name))` got cached, and it changes\n; in one equality for `listen` didn't affect other equalities.\n; `case` accepts an `Atom` and forcefully evaluates it.\n; However, the idea of using equalities as sequentially processed")
found_search_result(metta_example,"case",1,39,'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"   (case (get-state (person name))\n       (($x (Yes, I remember))\n        ; $y cannot be %void%\n        ($y (I thought you are $y)))\n   )")
found_search_result(metta_example,"case",1,50,'../../tests/baseline_compat/hyperon-experimental_scripts/_e2_states_dia.metta',"   (case (get-state greeted)\n      ((%void%\n          (case (get-state (person name))\n                ((%void% (Hi. What is your name?))\n                 ($p-name (Nice to meet you $p-name)))))\n      )\n    )")
found_search_result(metta_example,"match",1,27,'../../tests/baseline_compat/hyperon-experimental_scripts/a2_opencoggy.metta',"  (match &self\n    (EvaluationLink\n      (PredicateNode \"eats\")\n        (ListLink\n          $x\n          (ConceptNode \"flies\")))\n     $x)")
found_search_result(metta_example,"fromnumber",1,16,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))")
found_search_result(metta_example,"extend-py!",1,30,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',";;!(extend-py! ../utils/helper.py)")
found_search_result(metta_example,"cdr-atom",1,32,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (tuple-count $tuple) (if (== $tuple ()) 0 (+ 1 (tuple-count (cdr-atom $tuple)))))")
found_search_result(metta_example,"bind!",1,34,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"!(bind! &specializations (new-space))")
found_search_result(metta_example,"bind!",1,36,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"!(bind! &abstractions (new-space))")
found_search_result(metta_example,"add-atom",1,41,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (refdb) $db))")
found_search_result(metta_example,"fromnumber",1,42,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (msNat) (fromNumber $msup)))")
found_search_result(metta_example,"add-atom",1,43,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (highsurp) $highsurp))")
found_search_result(metta_example,"add-atom",1,48,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (refdb) $db))")
found_search_result(metta_example,"fromnumber",1,49,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (msNat) (fromNumber $msup)))")
found_search_result(metta_example,"add-atom",1,50,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"                (add-atom &self (= (highsurp) $highsurp))")
found_search_result(metta_example,"match",1,56,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"   (match $db ($link $x $y) \n    (superpose ((build-specialization ($link $x (VarIdx (S Z))))\n                (build-specialization ($link (VarIdx Z) $y))\n                (add-abstractions ($link (VarIdx Z) (VarIdx (S Z))))))))\n\n;; Given target link\n(= (extract-valuation $db $target-link)")
found_search_result(metta_example,"match",1,63,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"   (match $db ($target-link $x $y)\n    (superpose ((build-specialization ($target-link $x (VarIdx (S Z))))\n                (build-specialization ($target-link (VarIdx Z) $y))))))\n\n(= (build-specialization $sp)")
found_search_result(metta_example,"case",1,68,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"   (case (match &specializations $sp $sp)\n        ((%void% (add-atom &specializations $sp)))))\n\n(= (add-abstractions $aptrn)")
found_search_result(metta_example,"case",1,72,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"   (case (match &abstractions $aptrn $aptrn)\n        ((%void% (add-atom &abstractions $aptrn)))))\n\n;; Get unique links\n(= (get-links) (match &abstractions ($link $x $y) $link))\n\n;; Get abstract patterns\n(= (abstract-patterns) (match &abstractions $aptrn $aptrn))\n")
found_search_result(metta_example,"match",1,82,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (specialize $link) (match &specializations ($link $x $y) ($link $x $y)))")
found_search_result(metta_example,"match",1,85,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (all-specialization) (match &specializations $x $x))")
found_search_result(metta_example,"case",1,92,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"      (case ((get-metatype $pattern) $pattern)\n         (((Variable $_) $pattern)\n          (($_ $pattern)\n            (let ($link $a $b) $pattern\n                (case ($link (get-type $a) (get-type $b))\n                  ((($link DeBruijn DeBruijn) ($link $Xvar $Yvar))\n    \t\t\t   (($link DeBruijn $_) ($link $Xvar $b))\n\t\t\t\t   (($link $_ DeBruijn) ($link $a $Yvar))\n")
found_search_result(metta_example,"case",1,105,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"    (case $ptrn (\n      ((, $p1 $p2) (, (fromDeb $p1 $Xvar $Yvar) (fromDeb $p2 $Xvar $Yvar)))\n      ((, $p1 $p2 $p3) (, (fromDeb $p1 $Xvar $Yvar) (fromDeb $p2 $Xvar $Yvar) (fromDeb $p3 $Xvar $Yvar)))\n      ($_ (fromDeb $ptrn $Xvar $Yvar)))))\n\n; Count the number of instances of a given pattern\n(= (count $pattern)")
found_search_result(metta_example,"case",1,113,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"      (case (match &self (= (refdb) $db) $db)\n          (($db (let $dptrn (fromDebruijn $pattern $Xvar $Yvar) (collapse (match $db $dptrn $dptrn))))\n           (%void% ())))")
found_search_result(metta_example,"fromnumber",1,118,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (countNat $pattern) (fromNumber (count $pattern)))")
found_search_result(metta_example,"case",1,135,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"    (case $pattern \n        (((, (, $a $b) $c) (, $a $b $c))\n         ((, $a (, $b $c)) (, $a $b $c))\n         ($_ $pattern))))\n\n;; Get universe size of a given db\n(= (get-universe-size $dbspace) ")
found_search_result(metta_example,"add-atom",1,142,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"    (add-atom &self \n      (= (universe-size) (let $u (collapse (match $dbspace $x 1)) (tuple-count $u)))))\n\n;; Probability formula\n(= (prob $count) (/ $count (universe-size)))\n\n;; iSurprisingness formula\n(= (iSurprisingness $pattern)")
found_search_result(metta_example,"case",1,150,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"    (case $pattern (\n      ((candidate (, $p1 $p2) $cnt)\n      (let* (($pp1 (prob (count $p1)))\n          ($pp2 (prob (count $p2)))\n          ($p1p2 (* $pp1 $pp2)) ;; probability estimate \n          ($p (prob $cnt))) ;; empirical\n          (/ (max (- $p $p1p2) (- $p1p2 $p)) $p)))\n      ((candidate (, $p1 $p2 $p3) $cnt)\n      (let* (($pp1 (prob (count $p1)))")
found_search_result(metta_example,"import!",1,187,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"; !(import! &self ../utils/MinerUtils.metta)")
found_search_result(metta_example,"let*",1,208,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"  (let* (($cptrn (miner $db $ms $depth))\n         ($isurp (iSurprisingness $cptrn)))\n         (if (> $isurp $highsurp) (surp (get-pattern $cptrn) $isurp) (superpose ()))))\n; !(import! &self MinerMatch.metta)\n\n;; Load sample data\n; !(import! &db ../data/sample.metta)\n!(bind! &db (new-space))\n!(add-atom &db (Inheritance B A))")
found_search_result(metta_example,"add-atom",1,217,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"!(add-atom &db (Inheritance C A))")
found_search_result(metta_example,"add-atom",1,218,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"!(add-atom &db (Inheritance D E))")
found_search_result(metta_example,"add-atom",1,219,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"!(add-atom &db (Inheritance C E))")
found_search_result(metta_example,"fromnumber",1,225,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"(= (depth) (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,226,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"; (= (depth) (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,227,'../../tests/baseline_compat/anti-regression/tmpMatch1.metta',"; (= (depth) (fromNumber 2))")
found_search_result(metta_example,"pragma!",1,1,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"!(pragma! compile full)")
found_search_result(metta_example,"get-metatype",1,4,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"(= (is-variable $x) (== (get-metatype $x) Variable))")
found_search_result(metta_example,"get-metatype",1,11,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"(= (is-expression $x) (== (get-metatype $x) Expression))")
found_search_result(metta_example,"car-atom",1,18,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"\t\t\t\t\t\t  (and (let $head (car-atom $x) (is-closed $head))\n\t\t\t\t\t\t\t   (let $tail (cdr-atom $x) (is-closed $tail)))")
found_search_result(metta_example,"bind!",1,24,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"!(bind! &kb (new-space))")
found_search_result(metta_example,"add-atom",1,26,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"!(add-atom &kb (: axiom (nums 2 3)))")
found_search_result(metta_example,"add-atom",1,28,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"!(add-atom &kb (: rule1 \n                (-> (nums $x $y)\n                    (rule1output $x $y))))")
found_search_result(metta_example,"add-atom",1,32,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"!(add-atom &kb \n    (: rule \n       (-> (rule1output $x $y)\n        (-> (â\u008D\u0083 $x $y)\n            (less $x $y)))))")
found_search_result(metta_example,"add-atom",1,38,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"; !(add-atom &kb \n;     (: rule \n;         (-> (â\u008D\u0083 $x $y)\n;             (-> (rule1output $x $y)\n;                 (less $x $y)))))")
found_search_result(metta_example,"match",1,51,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"(= (bc (: $prf $ccln) $space $_1) (match $space (: $prf $ccln) (: $prf $ccln)))")
found_search_result(metta_example,"let*",1,61,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"   (let* (((: $prfabs (-> $prms $ccln)) \n\t\t\t          (bc (: $prfabs (-> $prms $ccln)) $space $k))\n          ((: $prfarg $prms) \n\t\t\t          (bc (: $prfarg $prms) $space $k)))\n\t\t   \n     (: ($prfabs $prfarg) $ccln)))\n\n!(pragma! e trace)\n!(pragma! e-args debug)")
found_search_result(metta_example,"pragma!",1,75,'../../tests/baseline_compat/anti-regression/bc_comp.metta',"; !(pragma! eval debug)")
found_search_result(metta_example,"fromnumber",1,16,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))")
found_search_result(metta_example,"case",1,26,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"      (case ((get-metatype $pattern) $pattern)\n         (((Variable $_) $pattern)\n          (($_ $pattern)\n            (let ($link $a $b) $pattern\n                (case ($link (get-type $a) (get-type $b))\n                  ((($link DeBruijn %Undefined%) ($link $Xvar $b))\n                   (($link %Undefined% DeBruijn) ($link $a $Yvar))\n                   (($link DeBruijn DeBruijn) ($link $Xvar $Yvar))\n                   ($_ $pattern)))))")
found_search_result(metta_example,"case",1,38,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"    (case $ptrn (\n      ((, $p1 $p2) (, (fromDeb $p1 $Xvar $Yvar) (fromDeb $p2 $Xvar $Yvar)))\n      ((, $p1 $p2 $p3) (, (fromDeb $p1 $Xvar $Yvar) (fromDeb $p2 $Xvar $Yvar) (fromDeb $p3 $Xvar $Yvar)))\n      ($_ (fromDeb $ptrn $Xvar $Yvar)))))\n\n(= (tuple-count $tuple) (if (== $tuple ()) 0 (+ 1 (tuple-count (cdr-atom $tuple)))))\n\n; Count the number of instances of a given pattern\n(= (count $pattern)")
found_search_result(metta_example,"case",1,48,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"      (case (match &self (= (refdb) $db) $db)\n          (($db (let $dptrn (fromDebruijn $pattern $Xvar $Yvar) (collapse (match $db $dptrn $dptrn))))\n           (%void% ())))")
found_search_result(metta_example,"fromnumber",1,53,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"(= (countNat $pattern) (fromNumber (count $pattern)))")
found_search_result(metta_example,"bind!",1,55,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(bind! &kb (new-space))")
found_search_result(metta_example,"add-atom",1,60,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"    (add-atom &kb $sptrn))\n\n;; apriori-rule\n!(add-atom &kb (: apriori-rule\n                (-> (minsup $aptrn)\n                    (-> (specializationOf $sptrn $aptrn)\n                        (supportOf $sptrn (countNat $sptrn))))))\n\n;; Test")
found_search_result(metta_example,"import!",1,69,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"; !(import! &db ../data/sample.metta)")
found_search_result(metta_example,"bind!",1,70,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(bind! &db (new-space))")
found_search_result(metta_example,"add-atom",1,71,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(add-atom &db (Inheritance B A))")
found_search_result(metta_example,"add-atom",1,72,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(add-atom &db (Inheritance C A))")
found_search_result(metta_example,"add-atom",1,73,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(add-atom &db (Inheritance D E))")
found_search_result(metta_example,"add-atom",1,74,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"!(add-atom &db (Inheritance C E))")
found_search_result(metta_example,"match",1,82,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"(= (bc (: $prf $ccln) $_) (match &kb (: $prf $ccln) (: $prf $ccln)))")
found_search_result(metta_example,"let*",1,85,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"   (let* (((: $prfabs (-> $prms $ccln)) (bc (: $prfabs (-> $prms $ccln)) $k))\n          ((: $prfarg $prms) (bc (: $prfarg $prms) $k)))\n     (: ($prfabs $prfarg) $ccln)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; DTL Forward chaining Curried  ;;\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Base case")
found_search_result(metta_example,"let*",1,108,'../../tests/baseline_compat/anti-regression/mettalogTestCurried2.metta',"    (let* (($aptrn (Inheritance (VarIdx Z) (VarIdx (S Z))))\n            ($atom (: MP (minsup $aptrn)))\n            ($depth (fromNumber 2)))\n        (fc $atom $depth))")
found_search_result(metta_example,"fromnumber",1,16,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))")
found_search_result(metta_example,"extend-py!",1,30,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',";;!(extend-py! ../utils/helper.py)")
found_search_result(metta_example,"cdr-atom",1,32,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (tuple-count $tuple) (if (== $tuple ()) 0 (+ 1 (tuple-count (cdr-atom $tuple)))))")
found_search_result(metta_example,"bind!",1,34,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"!(bind! &specializations (new-space))")
found_search_result(metta_example,"bind!",1,36,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"!(bind! &abstractions (new-space))")
found_search_result(metta_example,"add-atom",1,41,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (refdb) $db))")
found_search_result(metta_example,"fromnumber",1,42,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (msNat) (fromNumber $msup)))")
found_search_result(metta_example,"add-atom",1,43,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (highsurp) $highsurp))")
found_search_result(metta_example,"add-atom",1,48,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (refdb) $db))")
found_search_result(metta_example,"fromnumber",1,49,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (msNat) (fromNumber $msup)))")
found_search_result(metta_example,"add-atom",1,50,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"                (add-atom &self (= (highsurp) $highsurp))")
found_search_result(metta_example,"match",1,56,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"   (match $db ($link $x $y) \n    (superpose ((build-specialization ($link $x (VarIdx (S Z))))\n                (build-specialization ($link (VarIdx Z) $y))\n                (add-abstractions ($link (VarIdx Z) (VarIdx (S Z))))))))\n\n;; Given target link\n(= (extract-valuation $db $target-link)")
found_search_result(metta_example,"match",1,63,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"   (match $db ($target-link $x $y)\n    (superpose ((build-specialization ($target-link $x (VarIdx (S Z))))\n                (build-specialization ($target-link (VarIdx Z) $y))))))\n\n(= (build-specialization $sp)")
found_search_result(metta_example,"case",1,68,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"   (case (match &specializations $sp $sp)\n        ((%void% (add-atom &specializations $sp)))))\n\n(= (add-abstractions $aptrn)")
found_search_result(metta_example,"case",1,72,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"   (case (match &abstractions $aptrn $aptrn)\n        ((%void% (add-atom &abstractions $aptrn)))))\n\n;; Get unique links\n(= (get-links) (match &abstractions ($link $x $y) $link))\n\n;; Get abstract patterns\n(= (abstract-patterns) (match &abstractions $aptrn $aptrn))\n")
found_search_result(metta_example,"match",1,82,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (specialize $link) (match &specializations ($link $x $y) ($link $x $y)))")
found_search_result(metta_example,"match",1,85,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (all-specialization) (match &specializations $x $x))")
found_search_result(metta_example,"case",1,92,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"      (case ((get-metatype $pattern) $pattern)\n         (((Variable $_) $pattern)\n          (($_ $pattern)\n            (let ($link $a $b) $pattern\n                (case ($link (get-type $a) (get-type $b))\n                  ((($link DeBruijn %Undefined%) ($link $Xvar $b))\n                   (($link %Undefined% DeBruijn) ($link $a $Yvar))\n                   (($link DeBruijn DeBruijn) ($link $Xvar $Yvar))\n                   ($_ $pattern)))))")
found_search_result(metta_example,"case",1,104,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"    (case $ptrn (\n      ((, $p1 $p2) (, (fromDeb $p1 $Xvar $Yvar) (fromDeb $p2 $Xvar $Yvar)))\n      ((, $p1 $p2 $p3) (, (fromDeb $p1 $Xvar $Yvar) (fromDeb $p2 $Xvar $Yvar) (fromDeb $p3 $Xvar $Yvar)))\n      ($_ (fromDeb $ptrn $Xvar $Yvar)))))\n\n; Count the number of instances of a given pattern\n(= (count $pattern)")
found_search_result(metta_example,"case",1,112,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"      (case (match &self (= (refdb) $db) $db)\n          (($db (let $dptrn (fromDebruijn $pattern $Xvar $Yvar) (collapse (match $db $dptrn $dptrn))))\n           (%void% ())))")
found_search_result(metta_example,"fromnumber",1,117,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (countNat $pattern) (fromNumber (count $pattern)))")
found_search_result(metta_example,"case",1,134,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"    (case $pattern \n        (((, (, $a $b) $c) (, $a $b $c))\n         ((, $a (, $b $c)) (, $a $b $c))\n         ($_ $pattern))))\n\n;; Get universe size of a given db\n(= (get-universe-size $dbspace) ")
found_search_result(metta_example,"add-atom",1,141,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"    (add-atom &self \n      (= (universe-size) (let $u (collapse (match $dbspace $x 1)) (tuple-count $u)))))\n\n;; Probability formula\n(= (prob $count) (/ $count (universe-size)))\n\n;; iSurprisingness formula\n(= (iSurprisingness $pattern)")
found_search_result(metta_example,"case",1,149,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"    (case $pattern (\n      ((candidate (, $p1 $p2) $cnt)\n      (let* (($pp1 (prob (count $p1)))\n          ($pp2 (prob (count $p2)))\n          ($p1p2 (* $pp1 $pp2)) ;; probability estimate \n          ($p (prob $cnt))) ;; empirical\n          (/ (max (- $p $p1p2) (- $p1p2 $p)) $p)))\n      ((candidate (, $p1 $p2 $p3) $cnt)\n      (let* (($pp1 (prob (count $p1)))")
found_search_result(metta_example,"import!",1,186,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"; !(import! &self ../utils/MinerUtils.metta)")
found_search_result(metta_example,"let*",1,207,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"  (let* (($cptrn (miner $db $ms $depth))\n         ($isurp (iSurprisingness $cptrn)))\n         (if (> $isurp $highsurp) (surp (get-pattern $cptrn) $isurp) (superpose ()))))\n; !(import! &self MinerMatch.metta)\n\n;; Load sample data\n; !(import! &db ../data/sample.metta)\n!(bind! &db (new-space))\n!(add-atom &db (Inheritance B A))")
found_search_result(metta_example,"add-atom",1,216,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"!(add-atom &db (Inheritance C A))")
found_search_result(metta_example,"add-atom",1,217,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"!(add-atom &db (Inheritance D E))")
found_search_result(metta_example,"add-atom",1,218,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"!(add-atom &db (Inheritance C E))")
found_search_result(metta_example,"fromnumber",1,224,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"(= (depth) (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,225,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"; (= (depth) (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,226,'../../tests/baseline_compat/anti-regression/tmpMatch2.metta',"; (= (depth) (fromNumber 2))")
found_search_result(metta_example,"pragma!",1,1,'../../tests/baseline_compat/anti-regression/bchain.metta',"!(pragma! compile False)")
found_search_result(metta_example,"get-metatype",1,4,'../../tests/baseline_compat/anti-regression/bchain.metta',"(= (is-variable $x) (== (get-metatype $x) Variable))")
found_search_result(metta_example,"get-metatype",1,11,'../../tests/baseline_compat/anti-regression/bchain.metta',"(= (is-expression $x) (== (get-metatype $x) Expression))")
found_search_result(metta_example,"car-atom",1,18,'../../tests/baseline_compat/anti-regression/bchain.metta',"\t\t\t\t\t\t  (and (let $head (car-atom $x) (is-closed $head))\n\t\t\t\t\t\t\t   (let $tail (cdr-atom $x) (is-closed $tail)))")
found_search_result(metta_example,"bind!",1,24,'../../tests/baseline_compat/anti-regression/bchain.metta',"!(bind! &kb (new-space))")
found_search_result(metta_example,"add-atom",1,26,'../../tests/baseline_compat/anti-regression/bchain.metta',"!(add-atom &kb (: axiom (nums 2 3)))")
found_search_result(metta_example,"add-atom",1,28,'../../tests/baseline_compat/anti-regression/bchain.metta',"!(add-atom &kb (: rule1 \n                (-> (nums $x $y)\n                    (rule1output $x $y))))")
found_search_result(metta_example,"add-atom",1,32,'../../tests/baseline_compat/anti-regression/bchain.metta',"!(add-atom &kb \n    (: rule \n       (-> (rule1output $x $y)\n        (-> (â\u008D\u0083 $x $y)\n            (less $x $y)))))")
found_search_result(metta_example,"add-atom",1,38,'../../tests/baseline_compat/anti-regression/bchain.metta',"; !(add-atom &kb \n;     (: rule \n;         (-> (â\u008D\u0083 $x $y)\n;             (-> (rule1output $x $y)\n;                 (less $x $y)))))")
found_search_result(metta_example,"match",1,51,'../../tests/baseline_compat/anti-regression/bchain.metta',"(= (bc (: $prf $ccln) $_1) (match &kb (: $prf $ccln) (: $prf $ccln)))")
found_search_result(metta_example,"let*",1,61,'../../tests/baseline_compat/anti-regression/bchain.metta',"   (let* (((: $prfabs (-> $prms $ccln)) \n\t\t\t          (bc (: $prfabs (-> $prms $ccln)) $k))\n          ((: $prfarg $prms) \n\t\t\t          (bc (: $prfarg $prms) $k)))\n\t\t   \n     (: ($prfabs $prfarg) $ccln)))\n\n\n; Test")
found_search_result(metta_example,"pragma!",1,73,'../../tests/baseline_compat/anti-regression/bchain.metta',"; !(pragma! eval debug)")
found_search_result(metta_example,"pragma!",1,1,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"!(pragma! compile full)")
found_search_result(metta_example,"get-metatype",1,4,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"(= (is-variable $x) (== (get-metatype $x) Variable))")
found_search_result(metta_example,"get-metatype",1,11,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"(= (is-expression $x) (== (get-metatype $x) Expression))")
found_search_result(metta_example,"car-atom",1,18,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"\t\t\t\t\t\t  (and (let $head (car-atom $x) (is-closed $head))\n\t\t\t\t\t\t\t   (let $tail (cdr-atom $x) (is-closed $tail)))")
found_search_result(metta_example,"bind!",1,24,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"!(bind! &kb (new-space))")
found_search_result(metta_example,"add-atom",1,26,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"!(add-atom &kb (: axiom (nums 2 3)))")
found_search_result(metta_example,"add-atom",1,28,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"!(add-atom &kb (: rule1 \n                (-> (nums $x $y)\n                    (rule1output $x $y))))")
found_search_result(metta_example,"add-atom",1,32,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"!(add-atom &kb \n    (: rule \n       (-> (rule1output $x $y)\n        (-> (â\u008D\u0083 $x $y)\n            (less $x $y)))))")
found_search_result(metta_example,"add-atom",1,38,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"; !(add-atom &kb \n;     (: rule \n;         (-> (â\u008D\u0083 $x $y)\n;             (-> (rule1output $x $y)\n;                 (less $x $y)))))")
found_search_result(metta_example,"match",1,51,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"(= (bc (: $prf $ccln) $_1) (match &kb (: $prf $ccln) (: $prf $ccln)))")
found_search_result(metta_example,"let*",1,61,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"   (let* (((: $prfabs (-> $prms $ccln)) \n\t\t\t          (bc (: $prfabs (-> $prms $ccln)) $k))\n          ((: $prfarg $prms) \n\t\t\t          (bc (: $prfarg $prms) $k)))\n\t\t   \n     (: ($prfabs $prfarg) $ccln)))\n\n\n; Test")
found_search_result(metta_example,"pragma!",1,73,'../../tests/baseline_compat/anti-regression/bchain_comp.metta',"; !(pragma! eval debug)")
found_search_result(metta_example,"get-metatype",1,4,'../../tests/baseline_compat/anti-regression/test_if_closed.metta',"(= (is-variable $x) (== (get-metatype $x) Variable))")
found_search_result(metta_example,"get-metatype",1,11,'../../tests/baseline_compat/anti-regression/test_if_closed.metta',"(= (is-expression $x) (== (get-metatype $x) Expression))")
found_search_result(metta_example,"car-atom",1,19,'../../tests/baseline_compat/anti-regression/test_if_closed.metta',"\t\t\t\t\t\t  (and (let $head (car-atom $x) (is-closed $head))\n\t\t\t\t\t\t\t   (let $tail (cdr-atom $x) (is-closed $tail)))")
found_search_result(metta_example,"pragma!",1,25,'../../tests/baseline_compat/anti-regression/test_if_closed.metta',";!(pragma! eval trace)")
found_search_result(metta_example,"get-atoms",1,6,'../../tests/baseline_compat/module-system/f1_imports.metta',"; Even at the very beginning of the script `(get-atoms &self)`")
found_search_result(metta_example,"get-type",1,12,'../../tests/baseline_compat/module-system/f1_imports.metta',"  ((let $x (get-atoms &self) (get-type $x)))")
found_search_result(metta_example,"get-type",1,13,'../../tests/baseline_compat/module-system/f1_imports.metta',"  (superpose (((get-type &self)) ((get-type &self)))))\n\n; stdlib is already loaded\n!(assertEqual")
found_search_result(metta_example,"import!",1,24,'../../tests/baseline_compat/module-system/f1_imports.metta',"!(import! &m f1_moduleA)")
found_search_result(metta_example,"car-atom",1,30,'../../tests/baseline_compat/module-system/f1_imports.metta',"    (let $head (car-atom $list)\n      (if ($condition $head) True\n        (let $tail (cdr-atom $list) (contains $tail $condition)) ))))\n\n; Check whether atom is space comparing its type with type of the &self atom\n(: is-space (-> Atom Bool))\n(= (is-space $atom)\n   (let* (($type (get-type $atom)) ($space (get-type &self))) (== $type $space)))\n")
found_search_result(metta_example,"collapse",1,41,'../../tests/baseline_compat/module-system/f1_imports.metta',"  (let $x (collapse (get-atoms &m)) (contains $x is-space))")
found_search_result(metta_example,"collapse",1,46,'../../tests/baseline_compat/module-system/f1_imports.metta',"; !(let $x (collapse (get-atoms &m)) (car-atom $x))")
found_search_result(metta_example,"match",1,58,'../../tests/baseline_compat/module-system/f1_imports.metta',"  (match &m (= (f 2) $x) $x)")
found_search_result(metta_example,"import!",1,64,'../../tests/baseline_compat/module-system/f1_imports.metta',"!(import! &self f1_moduleA)")
found_search_result(metta_example,"collapse",1,88,'../../tests/baseline_compat/module-system/f1_imports.metta',";  (let $a (collapse (get-atoms &self)) (contains $a is-m))")
found_search_result(metta_example,"import!",1,93,'../../tests/baseline_compat/module-system/f1_imports.metta',"!(import! &corelib corelib)")
found_search_result(metta_example,"collapse",1,97,'../../tests/baseline_compat/module-system/f1_imports.metta',"  (let $a (collapse (get-atoms &self)) (contains $a is-corelib))")
found_search_result(metta_example,"import!",1,109,'../../tests/baseline_compat/module-system/f1_imports.metta',"!(import! &self f1_moduleB)")
found_search_result(metta_example,"import!",1,123,'../../tests/baseline_compat/module-system/f1_imports.metta',"!(import! &self f1_moduleB)")
found_search_result(metta_example,"import!",1,6,'../../tests/baseline_compat/module-system/c2_spaces.metta',"!(import! &kb c2_spaces_kb)")
found_search_result(metta_example,"match",1,10,'../../tests/baseline_compat/module-system/c2_spaces.metta',"  (match &kb\n    (, ($obj is $prop)\n       ($prop is-a Color)\n       ($obj is-a Planet))\n    (Color of Planet $obj is $prop))")
found_search_result(metta_example,"match",1,19,'../../tests/baseline_compat/module-system/c2_spaces.metta',"  (match &self ($p is-a Color) $p)")
found_search_result(metta_example,"match",1,27,'../../tests/baseline_compat/module-system/c2_spaces.metta',"  (match &kb\n    (, (Venus orbit $x au)\n       (Mars orbit $y au))\n    (- $y $x))")
found_search_result(metta_example,"match",1,41,'../../tests/baseline_compat/module-system/c2_spaces.metta',"  (match &kb ($prop is-a Color)\n    (match &self ($obj is $prop)\n       $obj))")
found_search_result(metta_example,"import!",1,51,'../../tests/baseline_compat/module-system/c2_spaces.metta',"!(import! &self c2_spaces_kb)")
found_search_result(metta_example,"match",1,53,'../../tests/baseline_compat/module-system/c2_spaces.metta',"  (match &self\n    (, ($obj is $prop)\n       ($prop is-a Color)\n       ($obj is-a Planet))\n    (Color of Planet $obj is $prop))")
found_search_result(metta_example,"import!",1,5,'../../tests/baseline_compat/module-system/f1_moduleB.metta',"!(import! &self f1_moduleC)")
found_search_result(metta_example,"import!",1,5,'../../tests/baseline_compat/module-system/f1_moduleA.metta',"!(import! &self f1_moduleC)")
found_search_result(metta_example,"collapse",1,1,'../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta',"!(collapse (superpose ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))\n                           (superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))\n                           (superpose (4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6))\n                           (superpose (4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6))\n                           (superpose (7 8 9 7 8 9 7 8 9 7 8 9 7 8 9 7 8 9 7 8 9 7 8 9))\n                           (superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))\n                           (superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))\n                           (superpose (4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6))\n                           (superpose (4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6 4 5 6))")
found_search_result(metta_example,"maplist!",1,31,'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (maplist! is-even (1 2 3)) ((False True False)))")
found_search_result(metta_example,"maplist!",1,35,'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (maplist! < (1 2 3) (2 2 2)) ((True False False)))")
found_search_result(metta_example,"maplist!",1,39,'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (maplist! plus-ternary (1 2 3) (4 5 6) (7 8 9)) ((12 15 18)))")
found_search_result(metta_example,"maplist!",1,43,'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (maplist! maplist! (< >) ((1 2 3) (1 2 3)) ((2 2 2) (2 2 2))) (((True False False) (False False True))))")
found_search_result(metta_example,"maplist!",1,50,'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (maplist! get-type (my-list)) (((-> Expression))))")
found_search_result(metta_example,"catch",1,58,'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (catch (max-time! 1 (concurrent-maplist! is-even (1 2 3))) \n                        time_limit_exceeded time_limit_exceeded)\n    ((False True False)))")
found_search_result(metta_example,"catch",1,64,'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (catch (max-time! 1 (concurrent-maplist! < (1 2 3) (2 2 2))) \n                        time_limit_exceeded time_limit_exceeded)\n    ((True False False)))")
found_search_result(metta_example,"catch",1,70,'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',";!(assertEqualToResult (catch (max-time! 1 (concurrent-maplist! plus-ternary (1 2 3) (4 5 6) (7 8 9))) \n;                        time_limit_exceeded time_limit_exceeded)\n;    ((12 15 18)))")
found_search_result(metta_example,"catch",1,76,'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (catch (max-time! 1 (concurrent-maplist! concurrent-maplist! (is-even is-odd) ((1 2 3) (1 2 3))))\n                        time_limit_exceeded time_limit_exceeded)\n    (((False True False) (True False True))))")
found_search_result(metta_example,"catch",1,82,'../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta',"!(assertEqualToResult (catch (max-time! 1 (maplist! get-type (my-list)))\n                        time_limit_exceeded time_limit_exceeded)\n (((-> Expression))))")
found_search_result(metta_example,"let*",1,81,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"   (let* (((: $ructor (-> $premise $conclusion)) ($rb))\n          ((: ($ructor $proof) $conclusion) $query)\n          ((: $proof $premise) (synthesize (: $proof $premise) $kb $rb $k)))\n     $query))\n;; Binary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,87,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k)))\n     $query))\n;; Trinary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,94,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k)))\n     $query))\n;; Quaternary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,102,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3 $proof4) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k))\n          ((: $proof4 $premise4) (synthesize (: $proof4 $premise4) $kb $rb $k)))\n     $query))\n;; Quintenary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,111,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $premise5 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3 $proof4 $proof5) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k))\n          ((: $proof4 $premise4) (synthesize (: $proof4 $premise4) $kb $rb $k))\n          ((: $proof5 $premise5) (synthesize (: $proof5 $premise5) $kb $rb $k)))\n     $query))\n")
found_search_result(metta_example,"car-atom",1,146,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"\t  (car-atom $a) ")
found_search_result(metta_example,"car-atom",1,147,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta',"      (let $t (cdr-atom $a) (superpose ((car-atom $a) (first-few (- $n 1) $t)))))))\n(: limit (-> Number Atom Atom))\n(= (limit $n $x) (let $a (collapse $x) (first-few $n $a)))\n\n\n; !(limit 1 (synthesize (: $term $type) kb rb (S (S Z))))\n; !(limit 6 (synthesize (: $term $type) kb rb (S (S Z))))\n!(limit 6 (unique (synthesize (: $term $type) kb rb (S (S Z)))))\n")
found_search_result(metta_example,"bind!",1,2,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(bind! &space31 (new-space))")
found_search_result(metta_example,"bind!",1,3,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(bind! &space32 (new-space))")
found_search_result(metta_example,"bind!",1,4,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(bind! &space33 (new-space))")
found_search_result(metta_example,"bind!",1,5,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(bind! &space34 (new-space))")
found_search_result(metta_example,"add-atom",1,8,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(add-atom &space31 (superpose ((foo $x $y) (foo 1 2) (foo 3 4) (foo $x 10) (foo $x $x))))")
found_search_result(metta_example,"add-atom",1,11,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(add-atom &space32 (superpose ((foo 1 2) (foo 5 6) (foo $x $y))))")
found_search_result(metta_example,"add-atom",1,14,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"!(add-atom &space33 (superpose ((foo 3 4) (foo 5 6))))")
found_search_result(metta_example,"subtraction",1,21,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (subtraction (get-atoms &space31) (get-atoms &space32))")
found_search_result(metta_example,"subtraction",1,28,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (subtraction (get-atoms &space31) (get-atoms &space33))")
found_search_result(metta_example,"subtraction",1,35,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (subtraction (get-atoms &space34) (get-atoms &space31))")
found_search_result(metta_example,"union",1,44,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (union (get-atoms &space31) (get-atoms &space32))")
found_search_result(metta_example,"union",1,51,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (union (get-atoms &space32) (get-atoms &space33))")
found_search_result(metta_example,"union",1,58,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (union (get-atoms &space31) (get-atoms &space33))")
found_search_result(metta_example,"union",1,65,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (union (get-atoms &space31) (superpose ((foo 7 8))))")
found_search_result(metta_example,"union",1,72,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta',"  (union (get-atoms &space31) (get-atoms &space34))")
found_search_result(metta_example,"findall!",1,19,'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! $X (match &self (my-numbers $X) $X)) ((1 2 7 212)))")
found_search_result(metta_example,"findall!",1,22,'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! $X (match &self (my-numbers $X) (this-predicate-doesnt-matter $X))) ((1 2 7 212)))")
found_search_result(metta_example,"findall!",1,25,'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! (is-even $X) (match &self (my-numbers $X) $X)) ((False True False True)))")
found_search_result(metta_example,"findall!",1,28,'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! ($X $Y) (match &self (my-pairs $X $Y) (this-predicate-doesnt-matter $X $Y))) (((2 4) (4 8))))")
found_search_result(metta_example,"findall!",1,29,'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! ($Y $X) (match &self (my-pairs $X $Y) (this-predicate-doesnt-matter $X $Y))) (((4 2) (8 4))))")
found_search_result(metta_example,"findall!",1,32,'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! (/ $X $Y) (match &self (my-pairs $X $Y) (this-predicate-doesnt-matter $X $Y))) ((0.5 0.5)))")
found_search_result(metta_example,"findall!",1,33,'../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta',"!(assertEqualToResult (findall! (/ $Y $X) (match &self (my-pairs $X $Y) (this-predicate-doesnt-matter $X $Y))) ((2 2)))")
found_search_result(metta_example,"intersection",1,4,'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(assertEqualToResult (intersection (superpose (a b (+ 2 3 ) c)) (superpose (b c (+ 2 3) c c d))) (b 5 c))")
found_search_result(metta_example,"intersection",1,6,'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(assertEqual (intersection (superpose (a b (+ 2 3 ) c)) (superpose (b c (+ 2 3) c c d)))  (superpose (b (+ 2 3) c)))")
found_search_result(metta_example,"repr",1,9,'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(repr aswde)")
found_search_result(metta_example,"repr",1,11,'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(assertEqualToResult (repr aswde ) (\"aswde\" ))")
found_search_result(metta_example,"parse",1,14,'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(parse \"kjh\")")
found_search_result(metta_example,"parse",1,16,'../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta',"!(assertEqualToResult (parse \"kjh\" ) (kjh ))")
found_search_result(metta_example,"stringtochars",1,3,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars \"xyzzy\") ('x' 'y' 'z' 'z' 'y'))")
found_search_result(metta_example,"charstostring",1,5,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (charsToString ('x' 'y' 'z' 'z' 'y')) \"xyzzy\")")
found_search_result(metta_example,"stringtochars",1,7,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars \"\") ())")
found_search_result(metta_example,"charstostring",1,9,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (charsToString ()) \"\")")
found_search_result(metta_example,"stringtochars",1,12,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (charsToString (stringToChars \"xyzzy\")) \"xyzzy\")")
found_search_result(metta_example,"stringtochars",1,14,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars (charsToString ('x' 'y' 'z' 'z' 'y'))) ('x' 'y' 'z' 'z' 'y'))")
found_search_result(metta_example,"charstostring",1,17,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (charsToString ('x' 'y' ' ' 'z' 'y')) \"xy zy\")")
found_search_result(metta_example,"stringtochars",1,19,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars \"xy zy\") ('x' 'y' ' ' 'z' 'y'))")
found_search_result(metta_example,"charstostring",1,21,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (charsToString (' ')) \" \")")
found_search_result(metta_example,"stringtochars",1,23,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars \" \") (' '))")
found_search_result(metta_example,"stringtochars",1,25,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (stringToChars (superpose (\"ab\" \"cd\" \"ef\"))) (superpose (('a' 'b') ('c' 'd') ('e' 'f'))))")
found_search_result(metta_example,"format-args",1,29,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"\" (1 2 3)) \"\")")
found_search_result(metta_example,"format-args",1,31,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \" \" (1 2 3)) \" \")")
found_search_result(metta_example,"format-args",1,33,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"{}\" (1 2 3)) \"1\")")
found_search_result(metta_example,"format-args",1,35,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"{}}\" (1 2 3)) \"{}\")")
found_search_result(metta_example,"format-args",1,37,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"xyz zy\" (1 2 3)) \"xyz zy\")")
found_search_result(metta_example,"format-args",1,39,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"Indexed {1} {} {0} {}\" (1 2 3)) \"Indexed 2 1 1 2\")")
found_search_result(metta_example,"format-args",1,41,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"Different types {} {} {} {} {} {}\" (1 \"2\" 'c' -0.5 atom (1 2 c -0.5 atom))) \"Different types 1 2 c -0.5 atom (1 2 c -0.5 atom)\")")
found_search_result(metta_example,"format-args",1,43,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"Two digit index={11}\" (0 1 2 3 4 5 6 7 8 9 10 \"eleven\")) \"Two digit index=eleven\")")
found_search_result(metta_example,"format-args",1,46,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"Bad args list {1} {} {0} {}\" x) (Error x BadType))")
found_search_result(metta_example,"format-args",1,48,'../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta',"!(assertEqual (format-args \"Malformed format}{{}{{{}{} {4} { } {-1} {x} {{{{{{}}}}}}{{{{{}}}}}\" (\"success1\" \"success2\")) \"Malformed format}{}{success1success2 {4} { } {-1} {x} {{{}}}{{{}}}\")")
found_search_result(metta_example,"pragma!",1,3,'../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta',"!(pragma! compile full)")
found_search_result(metta_example,"print",1,20,'../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta',"!(println! (fib 12))")
found_search_result(metta_example,"print",1,22,'../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta',"!(println! (fib1 0 1 100 0))")
found_search_result(metta_example,"print",1,24,'../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta',"!(println! (fib1 0 1 80 0))")
found_search_result(metta_example,"print",1,26,'../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta',"!(println! (fib 80))")
found_search_result(metta_example,"sealed",1,1,'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"!(assertEqualToResult (sealed ($x) (sealed ($a $b) (quote (= ($a $x $c) ($b))))) ((quote (= ($a $x $c) ($b)))))  ")
found_search_result(metta_example,"sealed",1,3,'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"!(assertEqualToResult (sealed ($x $y) (quote (= ($y $z)))) ((quote (= ($y $z)))))")
found_search_result(metta_example,"sealed",1,7,'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"!(assertEqual (let (quote ($sv $st)) (sealed ($x) (quote ($x (output $x)))) \n    (let $sv (input $x) $st)) (output (input $x)))")
found_search_result(metta_example,"sealed",1,12,'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"(= (callsealer $a $b) (sealed () (quote ((* (+ 40 $a) (/ 100 $b))))))")
found_search_result(metta_example,"sealed",1,19,'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"(= (callsealer1 $a $b)  (sealed ($a) (quote ((* (+ 40 $a) (/ 100 $b))))))")
found_search_result(metta_example,"sealed",1,26,'../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta',"(= (callsealer2 $a $b) (sealed ($a $b) (quote ((* (+ 40 $a) (/ 100 $b))))))")
found_search_result(metta_example,"subtraction",1,4,'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose (a b c d)) (superpose (b c)))")
found_search_result(metta_example,"subtraction",1,11,'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (subtraction (superpose (a b c d)) (superpose (b c))) (superpose (d)))")
found_search_result(metta_example,"subtraction",1,18,'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose ((foo bar) (bar baz) qux)) (superpose ((bar baz) qux)))")
found_search_result(metta_example,"subtraction",1,25,'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose (1 2 3 foo bar)) (superpose (2 foo)))")
found_search_result(metta_example,"subtraction",1,32,'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose (a b b c d)) (superpose (b c)))")
found_search_result(metta_example,"unique",1,39,'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (unique (subtraction (superpose (a b b c)) (superpose (b c c d))))")
found_search_result(metta_example,"unique",1,46,'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (unique (superpose (a b b c))) (unique (superpose (b c c d))))")
found_search_result(metta_example,"subtraction",1,53,'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose ($x $y)) (superpose (b)))")
found_search_result(metta_example,"subtraction",1,60,'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose (a b c)) (superpose ()))")
found_search_result(metta_example,"subtraction",1,67,'../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta',"  (subtraction (superpose ((foo $x) (bar $y))) (superpose ((bar $y) (foo qux))))")
found_search_result(metta_example,"collapse",1,5,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"    (collapse (unique (superpose $list))))\n\n;; Test unique with simple duplicates\n;; This test verifies that `unique` removes all duplicates from (a b b c c c d), resulting in [a, b, c, d].\n!(assertEqual")
found_search_result(metta_example,"unique",1,10,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose (a b b c c c d)))")
found_search_result(metta_example,"unique",1,17,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose (a b c d)))")
found_search_result(metta_example,"unique",1,24,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose (a)))")
found_search_result(metta_example,"unique",1,31,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ()))")
found_search_result(metta_example,"unique",1,38,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose (a a a a)))")
found_search_result(metta_example,"unique",1,45,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ((1 2) (1 2) (3 4))))")
found_search_result(metta_example,"unique",1,52,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose (1 \"hello\" 1 \"world\" \"hello\" 3.14 3.14)))")
found_search_result(metta_example,"unique",1,73,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ($x $y $x $z)))")
found_search_result(metta_example,"unique",1,80,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ((:: $x $y) (:: $x $z) (:: $x $y) (:: $a $b))))")
found_search_result(metta_example,"unique",1,87,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ((:: $x $y) (:: $x $y) (:: $x $z) (:: $x $y))))")
found_search_result(metta_example,"unique",1,94,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ((:: 1 $x) (:: $x \"hello\") (:: 1 $x) (:: $y $z) (:: $x \"hello\"))))")
found_search_result(metta_example,"unique",1,101,'../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta',"  (unique (superpose ((:: $x (:: a b)) (:: $x (:: a b)) (:: (:: 1 $x) (:: 2 $y)) (:: (:: 1 $x) (:: 2 $y)))))")
found_search_result(metta_example,"print",1,16,'../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta',"!(assertEqual (xor (mprogn (println! \"First\") True) (mprogn (println! \"Second\") False)) True)")
found_search_result(metta_example,"print",1,17,'../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta',"!(assertEqual (xor (mprogn (println! \"First\") True) (mprogn (println! \"Second\") True)) False)")
found_search_result(metta_example,"print",1,18,'../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta',"!(assertEqual (xor (mprogn (println! \"First\") False) (mprogn (println! \"Second\") True)) True)")
found_search_result(metta_example,"print",1,19,'../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta',"!(assertEqual (xor (mprogn (println! \"First\") False) (mprogn (println! \"Second\") False)) False)")
found_search_result(metta_example,"bind!",1,2,'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"!(bind! &kb (new-space))")
found_search_result(metta_example,"add-atom",1,5,'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"!(add-atom &kb (SS-P_AS A_AS B_AS))")
found_search_result(metta_example,"add-atom",1,6,'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"!(add-atom &kb (SS-Q_AS A_AS C_AS))")
found_search_result(metta_example,"match",1,12,'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"  (match   &kb\n    ($SS A_AS $X)\n    ($SS A_AS $X))")
found_search_result(metta_example,"match",1,20,'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"   (match  &kb  ($rel A_AS $x) ($rel $x))")
found_search_result(metta_example,"case",1,26,'../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta',"  (case\n   (match  &kb  ($rel A_AS $x) ($rel $x))\n    (((SS-P_AS $y) (P_AS $y))\n     ((SS-Q_AS $y) (Q_AS $y)))))\n\n\n; %void% can be used to capture empty results\n!(assertEqual (case (match  &kb  ($rel B_AS $x) ($rel $x))\n    (((SS-P_AS $y) (P_AS $y))")
found_search_result(metta_example,"intersection",1,5,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"!(assertEqual (intersection (superpose (a b c d )) (superpose ( c d e f ))) (superpose (c d)))")
found_search_result(metta_example,"intersection",1,12,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c d)) (superpose (b c)))")
found_search_result(metta_example,"intersection",1,19,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (intersection (superpose (a b c d)) (superpose (b c))) (superpose (d)))")
found_search_result(metta_example,"intersection",1,26,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((foo bar) (bar baz) qux)) (superpose ((bar baz) qux)))")
found_search_result(metta_example,"intersection",1,33,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (1 2 3 foo bar)) (superpose (2 foo)))")
found_search_result(metta_example,"intersection",1,39,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b b c d)) (superpose (b c)))")
found_search_result(metta_example,"unique",1,46,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (unique (intersection (superpose (a b b c)) (superpose (b c c d))))")
found_search_result(metta_example,"intersection",1,53,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c)) (superpose ()))")
found_search_result(metta_example,"intersection",1,60,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c)) (superpose (x y z)))")
found_search_result(metta_example,"intersection",1,67,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c d)) (superpose (b c x y)))")
found_search_result(metta_example,"intersection",1,74,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c d)) (superpose (a b c d)))")
found_search_result(metta_example,"intersection",1,81,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c (a b c))) (superpose (a b c (a b c))))")
found_search_result(metta_example,"intersection",1,88,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c d)) (superpose (c)))")
found_search_result(metta_example,"intersection",1,95,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a b c d e f)) (superpose (b c d)))")
found_search_result(metta_example,"intersection",1,102,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (a (b c) d)) (superpose ((b c) e f)))")
found_search_result(metta_example,"intersection",1,109,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((a b) (c d))) (superpose ()))")
found_search_result(metta_example,"intersection",1,116,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (1 2 3 foo bar)) (superpose (3 foo baz)))")
found_search_result(metta_example,"intersection",1,123,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((foo $x) (bar $y))) (superpose ((bar $y) (foo qux))))")
found_search_result(metta_example,"intersection",1,130,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($x b c)) (superpose (b $y c)))")
found_search_result(metta_example,"intersection",1,137,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (($x b) (c d))) (superpose ((a $y) (c d))))")
found_search_result(metta_example,"pred-intersection",1,144,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (pred-intersection unified (superpose (($x (+ 1 2)) (3 4))) (superpose ((3 $y) (4 (+ 1 2)))))")
found_search_result(metta_example,"intersection",1,151,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((foo (+ 1 2)) (bar $y))) (superpose ((foo 3) (bar baz))))")
found_search_result(metta_example,"pred-intersection",1,158,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (pred-intersection unified (superpose ((foo (+ 1 2)) (bar $y))) (superpose ((foo 3) (bar baz))))")
found_search_result(metta_example,"intersection",1,165,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose (($x b) (+ 2 2))) (superpose ((a $y) 4)))")
found_search_result(metta_example,"intersection",1,173,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($x (f $x))) (superpose ((f (f $x)))))")
found_search_result(metta_example,"intersection",1,180,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($y (f $x))) (superpose ($a (f $b))))")
found_search_result(metta_example,"intersection",1,187,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((f $x) $y )) (superpose ((f $b) $a )))")
found_search_result(metta_example,"intersection",1,193,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ((f $x) $x )) (superpose ((f $a) $a )))")
found_search_result(metta_example,"intersection",1,199,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($x (f $x) )) (superpose ($a (f $a))))")
found_search_result(metta_example,"intersection",1,206,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($y (f $x))) (superpose ($x (f $x))))")
found_search_result(metta_example,"intersection",1,213,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"  (intersection (superpose ($x (f $y))) (superpose ((f $y) $x)))")
found_search_result(metta_example,"collapse",1,220,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"; (= (intersection $x $y) (superpose (intersect-elements (collapse $x) (collapse $y))))")
found_search_result(metta_example,"collapse",1,223,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"(= (intersect-elements $x $y) (collapse (intersection (superpose $x) (superpose $y))))")
found_search_result(metta_example,"bind!",1,228,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"!(bind! &ctx1 (make-space (f1 f2 f3)))")
found_search_result(metta_example,"bind!",1,229,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"!(bind! &ctx2 (make-space (f1 f2 f3 f4 f5)))")
found_search_result(metta_example,"intersection",1,230,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"(intersection (get-atoms &ctx1) (get-atoms &ctx2)) ")
found_search_result(metta_example,"get-atoms",1,232,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"!(get-atoms &ctx1) -> 1 2 3 4 5 6 7 ... .. ... ")
found_search_result(metta_example,"get-atoms",1,233,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"!(get-atoms &ctx2) -> 1 2 3 4 5 6 7 ... .. ... ")
found_search_result(metta_example,"collapse",1,235,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"(= (intersection $x $y) (superpose (intersection-element (collapse $x) (collapse $y))))")
found_search_result(metta_example,"intersection",1,237,'../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta',"(intersection (get-atoms &ctx1) (get-atoms &ctx2)) ")
found_search_result(metta_example,"let*",1,45,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"   (let* (((: $ructor (-> $premise $conclusion)) ($rb))\n          ((: ($ructor $proof) $conclusion) $query)\n          ((: $proof $premise) (synthesize (: $proof $premise) $kb $rb $k)))\n     $query))\n;; Binary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,51,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k)))\n     $query))\n;; Trinary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,58,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k)))\n     $query))\n;; Quaternary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,66,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3 $proof4) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k))\n          ((: $proof4 $premise4) (synthesize (: $proof4 $premise4) $kb $rb $k)))\n     $query))\n;; Quintenary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,75,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $premise5 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3 $proof4 $proof5) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k))\n          ((: $proof4 $premise4) (synthesize (: $proof4 $premise4) $kb $rb $k))\n          ((: $proof5 $premise5) (synthesize (: $proof5 $premise5) $kb $rb $k)))\n     $query))\n")
found_search_result(metta_example,"car-atom",1,110,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"\t  (car-atom $a) ")
found_search_result(metta_example,"car-atom",1,111,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"\t  (let $t (cdr-atom $a) (superpose ((car-atom $a) (first-few (- $n 1) $t)))))))\n\n(: limit (-> Number Atom Atom))\n(= (limit $n $x) (let $a (collapse $x) (first-few $n $a)))\n\n\n\n!(assertEqualToResult (limit 1 (synthesize (: $term $type) kb rb (S Z))) ((: a A)))\n")
found_search_result(metta_example,"limit",1,120,'../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer.metta',"!(assertEqualToResult (limit 6 (synthesize (: $term $type) kb rb (S Z))) ((: a A) (: a B) (: abc (Implication (AndLink A B) C)) \n\t (: cde (Implication (OrLink C D) E)) (: (ConjunctionIntroduction a a) (AndLink A A)) (: (ConjunctionIntroduction a a) (AndLink A B))))")
found_search_result(metta_example,"catch",1,6,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (foo) Error Error) (1 2))")
found_search_result(metta_example,"catch",1,10,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (throw Error) Error \"An exception was caught\") (\"An exception was caught\"))")
found_search_result(metta_example,"catch",1,14,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (catch (throw Error) Error \"Error level 2\") Error \"Error level 1\") (\"Error level 2\"))")
found_search_result(metta_example,"catch",1,15,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (catch (throw Error1) Error2 \"Error level 2\") Error1 \"Error level 1\") (\"Error level 1\"))")
found_search_result(metta_example,"catch",1,19,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (catch (throw Error2) Error2 (throw Error1)) Error1 \"Error level 1\") (\"Error level 1\"))")
found_search_result(metta_example,"throw",1,26,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"(= (bar) (throw Error))")
found_search_result(metta_example,"catch",1,29,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (bar) Error \"An exception was caught\") (1 2 \"An exception was caught\"))")
found_search_result(metta_example,"catch",1,33,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (throw (Error \"This is an error message\")) (Error $message) $message) (\"This is an error message\"))")
found_search_result(metta_example,"catch",1,35,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',";; catcher (catch arg2) not evaluated")
found_search_result(metta_example,"catch",1,37,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (catch (throw 3) (+ 1 2) \"Error level 2\") 3 \"Error level 1\") (\"Error level 1\"))")
found_search_result(metta_example,"throw",1,39,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',";; exception (throw arg) is evaluated")
found_search_result(metta_example,"catch",1,41,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (catch (throw (+ 1 2)) (+ 1 2) \"Error level 2\") 3 \"Error level 1\") (\"Error level 1\"))")
found_search_result(metta_example,"catch",1,43,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',";; recover (catch arg3) is evaluated if exception is caught")
found_search_result(metta_example,"catch",1,45,'../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta',"!(assertEqualToResult (catch (throw (Error 2)) (Error $x) (+ $x 1)) (3))")
found_search_result(metta_example,"chain",1,12,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval (get-metatype $atom)) $type\n    (eval (if-equal $type Expression\n      (eval (if-equal $atom () $else $then))\n      $else ))))\n\n(= (if-decons $atom $head $tail $then $else)")
found_search_result(metta_example,"chain",1,19,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"    (chain (decons $atom) $list\n      (match $list ($head $tail) $then $else) )")
found_search_result(metta_example,"if-equal",1,24,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (eval (if-equal $atom Empty $then $else)))\n\n(= (if-error $atom $then $else)")
found_search_result(metta_example,"if-equal",1,28,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"    (eval (if-equal $head Error $then $else))")
found_search_result(metta_example,"return",1,31,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"(= (return-on-error $atom $then)\n  (eval (if-empty $atom Empty\n    (eval (if-error $atom $atom\n      $then )))))")
found_search_result(metta_example,"switch",1,41,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"(= (switch $atom $cases)\n  (chain (decons $cases) $list (eval (switch-internal $atom $list))))")
found_search_result(metta_example,"switch",1,44,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"(= (switch-internal $atom (($pattern $template) $tail))\n  (match $atom $pattern $template (eval (switch $atom $tail))))")
found_search_result(metta_example,"match",1,48,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (match $atom $var $templ\n    (Error (subst $atom $var $templ)\n      \"subst expects a variable as a second argument\") ))\n\n(= (reduce $atom $var $templ)")
found_search_result(metta_example,"chain",1,53,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval $atom) $res\n    (eval (if-error $res $res\n      (eval (if-empty $res\n        (eval (subst $atom $var $templ))\n        (eval (reduce $res $var $templ)) ))))))\n\n(= (type-cast $atom $type $space)")
found_search_result(metta_example,"chain",1,60,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval (get-type $atom $space)) $actual-type\n    (eval (switch ($actual-type $type)\n      (\n        ((%Undefined% $_) $atom)\n        (($_ %Undefined%) $atom)\n        (($type $_) $atom)\n        ($_ (Error $atom BadType)) )))))\n\n(= (is-function $type)")
found_search_result(metta_example,"chain",1,69,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval (get-metatype $type)) $meta\n    (eval (switch ($type $meta)\n      (\n        (($_ Expression)\n          (chain (eval (car $type)) $head\n            (match $head -> True False) ))\n        ($_ False) )))))\n\n(= (interpret $atom $type $space)")
found_search_result(metta_example,"chain",1,78,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval (get-metatype $atom)) $meta\n    (eval (switch ($type $meta)\n      (\n        ((Atom $_meta) $atom)\n        (($meta $meta) $atom)\n        (($_type Variable) $atom)\n\n        (($_type Symbol) (eval (type-cast $atom $type $space)))\n        (($_type Grounded) (eval (type-cast $atom $type $space)))")
found_search_result(metta_example,"chain",1,91,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"    (chain (eval (get-type $op $space)) $op-type\n      (chain (eval (is-function $op-type)) $is-func\n        (match $is-func True\n          (chain (eval (interpret-func $atom $op-type $space)) $reduced-atom\n            (eval (call $reduced-atom $type $space)) )\n          (chain (eval (interpret-tuple $atom $space)) $reduced-atom\n            (eval (call $reduced-atom $type $space)) ))))")
found_search_result(metta_example,"type-cast",1,98,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"    (eval (type-cast $atom $type $space)) )))\n\n(= (interpret-func $expr $type $space)\n  (eval (if-decons $expr $op $args")
found_search_result(metta_example,"chain",1,102,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"    (chain (eval (interpret $op $type $space)) $reduced-op\n      (eval (return-on-error $reduced-op\n        (eval (if-decons $type $arrow $arg-types\n          (chain (eval (interpret-args $expr $args $arg-types $space)) $reduced-args\n            (eval (return-on-error $reduced-args\n              (cons $reduced-op $reduced-args) )))\n          (Error $type \"Function type expected\") )))))")
found_search_result(metta_example,"match",1,112,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (match $args ()\n    (match $arg-types ($ret) () (Error $atom BadType))\n    (eval (if-decons $args $head $tail\n      (eval (if-decons $arg-types $head-type $tail-types\n        (chain (eval (interpret $head $head-type $space)) $reduced-head\n          ; check that head was changed otherwise Error or Empty in the head\n          ; can be just an argument which is passed by intention\n          (eval (if-equal $reduced-head $head\n            (eval (interpret-args-tail $atom $reduced-head $tail $tail-types $space))")
found_search_result(metta_example,"return",1,121,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"            (eval (return-on-error $reduced-head\n              (eval (interpret-args-tail $atom $reduced-head $tail $tail-types $space)) )))))\n        (Error $atom BadType) ))\n      (Error (interpret-atom $atom $args $arg-types $space)\n        \"Non-empty expression atom is expected\") ))))\n\n(= (interpret-args-tail $atom $head $args-tail $args-tail-types $space)\n  (chain (eval (interpret-args $atom $args-tail $args-tail-types $space)) $reduced-tail\n    (eval (return-on-error $reduced-tail")
found_search_result(metta_example,"cons",1,130,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"      (cons $head $reduced-tail) ))))\n\n(= (interpret-tuple $atom $space)\n  (match $atom ()\n    $atom\n    (eval (if-decons $atom $head $tail")
found_search_result(metta_example,"chain",1,136,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"      (chain (eval (interpret $head %Undefined% $space)) $rhead\n        (chain (eval (interpret-tuple $tail $space)) $rtail\n          (cons $rhead $rtail) ))")
found_search_result(metta_example,"chain",1,142,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta',"  (chain (eval $atom) $result\n    (eval (if-empty $result $atom\n      (eval (if-error $result $result\n        (eval (interpret $result $type $space)) ))))))\n\n")
found_search_result(metta_example,"case",1,20,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"(case (+ 1 5)\n  ((5 Error)\n   (6 OK)\n   (6 Error)))")
found_search_result(metta_example,"case",1,29,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta'," (case (+ 1 5)\n   (($x (+ 1 $x))))")
found_search_result(metta_example,"case",1,37,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"    (case 5\n\t((6 OK)))")
found_search_result(metta_example,"case",1,44,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta'," (case (+ 1 (superpose (1 2 3)))\n  ((3 OK-3)\n   (4 OK-4)))")
found_search_result(metta_example,"case",1,52,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"  (case (+ 1 (superpose (1 2 3)))\n     (($x (+ 1 $x))))")
found_search_result(metta_example,"collapse",1,58,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"!(assertEqualToResult (collapse (superpose ())) (()))")
found_search_result(metta_example,"collapse",1,62,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"!(assertEqualToResult (collapse (superpose ((nop 1)))) (()))")
found_search_result(metta_example,"match",1,69,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"!(match &self $1 $1)")
found_search_result(metta_example,"get-atoms",1,71,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"!(get-atoms &self)")
found_search_result(metta_example,"match",1,74,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"!(assertEqual (match &self $1 $1)  (get-atoms &self))")
found_search_result(metta_example,"match",1,80,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"  (match &self\n    ($Rel A $X)\n    ($Rel A $X))")
found_search_result(metta_example,"match",1,94,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"   (match &self ($rel A $x) ($rel $x))")
found_search_result(metta_example,"case",1,101,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"  (case\n   (match &self ($rel A $x) ($rel $x))\n    (((Rel-P $y) (P $y))\n     ((Rel-Q $y) (Q $y)))))\n\n\n; %void% can be used to capture empty results\n!(assertEqual")
found_search_result(metta_example,"case",1,109,'../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta',"  (case\n    (match &self ($rel B $x) ($rel $x))\n    (  ((Rel-P $y) (P $y))\n       ((Rel-Q $y) (Q $y))\n       (%void% no-match\n     )))")
found_search_result(metta_example,"new-state",1,1,'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(bind! &evaluated (new-state False))")
found_search_result(metta_example,"change-state!",1,4,'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"   ((change-state! &evaluated True) True))\n\n; !(pragma! or-impl eager-or) ; evals all like superpose (hyperon's current version)\n!(pragma! or-impl lazy-or) ; evals until the first True happens (we think that is what people assume happens)\n\n;; assertEqualToResult is used here to force all solutions (backtracking)\n!(bind! &evaluated (new-state False))\n!(assertEqualToResult (or True (set-evaluated)) (True))\n!(assertEqual (get-state &evaluated) False)")
found_search_result(metta_example,"new-state",1,16,'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(bind! &evaluated (new-state False))")
found_search_result(metta_example,"get-state",1,18,'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(assertEqual (get-state &evaluated) True)")
found_search_result(metta_example,"print",1,43,'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(assertEqualToResult (or (mprogn (println! \"First\") True) (mprogn (println! \"Second\") False)) (True))")
found_search_result(metta_example,"print",1,44,'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(assertEqualToResult (or (mprogn (println! \"First\") True) (mprogn (println! \"Second\") True)) (True))")
found_search_result(metta_example,"print",1,45,'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(assertEqualToResult (or (mprogn (println! \"First\") False) (mprogn (println! \"Second\") True)) (True))")
found_search_result(metta_example,"print",1,46,'../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta',"!(assertEqualToResult (or (mprogn (println! \"First\") False) (mprogn (println! \"Second\") False)) (False))")
found_search_result(metta_example,"bind!",1,27,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space1 (new-space))")
found_search_result(metta_example,"bind!",1,28,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space2 (new-space))")
found_search_result(metta_example,"add-atom",1,29,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space1 (superpose ((= (foo $x $y) (+ $x $y)) (foo 1 2) (foo 3 4) (foo $x 10) (foo $x $x) (foo (foo 1 2) 3))))")
found_search_result(metta_example,"add-atom",1,30,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space2 (superpose ((= (foo $a $b) (+ $a $b)) (foo 1 2) (foo 5 6) (foo 5 10) (foo 9 9) (foo (foo 1 2) 3))))")
found_search_result(metta_example,"intersection",1,32,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space1) (get-atoms &space2))")
found_search_result(metta_example,"bind!",1,38,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space3 (new-space))")
found_search_result(metta_example,"add-atom",1,39,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space3 (superpose ((foo 7 8))))")
found_search_result(metta_example,"intersection",1,41,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space1) (get-atoms &space3))")
found_search_result(metta_example,"bind!",1,47,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space4 (new-space))")
found_search_result(metta_example,"add-atom",1,48,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space4 (superpose ((foo 1 2) (foo 3 4) (foo $m $n))))")
found_search_result(metta_example,"intersection",1,50,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space1) (get-atoms &space4))")
found_search_result(metta_example,"bind!",1,56,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space5 (new-space))")
found_search_result(metta_example,"add-atom",1,57,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space5 (superpose ((foo (foo 1 2) 3) (foo (foo 3 4) 7) (foo $p $q))))")
found_search_result(metta_example,"intersection",1,59,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space4) (get-atoms &space5))")
found_search_result(metta_example,"bind!",1,65,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space6 (new-space))")
found_search_result(metta_example,"add-atom",1,66,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space6 (superpose ((foo (foo 1 2) 3) (foo 7 7) (foo (foo $r 2) 3))))")
found_search_result(metta_example,"pred-intersection",1,68,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (pred-intersection unified (get-atoms &space4) (get-atoms &space6))")
found_search_result(metta_example,"bind!",1,74,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space7 (new-space))")
found_search_result(metta_example,"add-atom",1,75,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space7 (superpose ((foo $x $x) (foo 7 7) (foo (foo 1 2) 3))))")
found_search_result(metta_example,"intersection",1,77,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space6) (get-atoms &space7))")
found_search_result(metta_example,"intersection",1,84,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space7) (get-atoms &space6))")
found_search_result(metta_example,"bind!",1,90,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space8 (new-space))")
found_search_result(metta_example,"bind!",1,91,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space9 (new-space))")
found_search_result(metta_example,"add-atom",1,92,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space8 (superpose ((foo $a $b) (foo 3 $c))))")
found_search_result(metta_example,"add-atom",1,93,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space9 (superpose ((foo $y $z) (foo 3 $d))))")
found_search_result(metta_example,"intersection",1,95,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space8) (get-atoms &space9))")
found_search_result(metta_example,"intersection",1,102,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space1) (get-atoms &space8))")
found_search_result(metta_example,"intersection",1,109,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space4) (get-atoms &space8))")
found_search_result(metta_example,"bind!",1,115,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space10 (new-space))")
found_search_result(metta_example,"add-atom",1,116,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space10 (superpose ((foo (foo 1 2) 3))))")
found_search_result(metta_example,"intersection",1,118,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space10) (get-atoms &space2))")
found_search_result(metta_example,"bind!",1,124,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space11 (new-space))")
found_search_result(metta_example,"bind!",1,125,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space12 (new-space))")
found_search_result(metta_example,"add-atom",1,126,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space11 (superpose ((foo $x $x))))")
found_search_result(metta_example,"add-atom",1,127,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space12 (superpose ((foo $y $y))))")
found_search_result(metta_example,"intersection",1,129,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space11) (get-atoms &space12))")
found_search_result(metta_example,"bind!",1,136,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space21 (new-space))")
found_search_result(metta_example,"add-atom",1,137,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space21 (superpose ((foo 1 2) (foo 3 4) (foo 5 6))))")
found_search_result(metta_example,"intersection",1,141,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space21) (superpose ((foo 1 2) (foo 7 8))))")
found_search_result(metta_example,"bind!",1,147,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space22 (new-space))")
found_search_result(metta_example,"add-atom",1,148,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space22 (superpose ((foo $x 10) (foo 3 4) (foo $y $y))))")
found_search_result(metta_example,"intersection",1,152,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space22) (superpose ((foo 5 10) (foo 3 $z))))")
found_search_result(metta_example,"bind!",1,158,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space23 (new-space))")
found_search_result(metta_example,"add-atom",1,159,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space23 (superpose ((foo $a $b) (foo 3 4) (foo $c $c))))")
found_search_result(metta_example,"intersection",1,163,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space23) (superpose ((foo $x $y) (foo 3 4))))")
found_search_result(metta_example,"bind!",1,169,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space24 (new-space))")
found_search_result(metta_example,"add-atom",1,170,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space24 (superpose ((foo 7 7) (foo (foo 1 2) 3) (foo $z $z))))")
found_search_result(metta_example,"intersection",1,174,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space24) (superpose ((foo 7 7))))")
found_search_result(metta_example,"bind!",1,180,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space25 (new-space))")
found_search_result(metta_example,"add-atom",1,181,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space25 (superpose ((foo (foo 3 4) 7) (foo $p $p) (foo 5 5))))")
found_search_result(metta_example,"intersection",1,185,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space25) (superpose ((foo 5 5) (foo 7 8))))")
found_search_result(metta_example,"bind!",1,191,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(bind! &space26 (new-space))")
found_search_result(metta_example,"add-atom",1,192,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"!(add-atom &space26 (superpose ((foo (foo 1 2) 3) (foo $x $y) (foo (foo 3 4) 7))))")
found_search_result(metta_example,"intersection",1,196,'../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta',"  (intersection (get-atoms &space26) (superpose ((foo (foo 1 2) 3))))")
found_search_result(metta_example,"flip",1,5,'../../tests/baseline_compat/hyperon-mettalog_sanity/flip_test.metta',"    (if (flip)\n       True\n       (recur-until-flip-true (+ 1 $n)))))\n\n(: recur-until-flip-false (-> Number Bool))\n(= (recur-until-flip-false $n)\n  (if (> $n 40)         ; set constant here for max")
found_search_result(metta_example,"flip",1,13,'../../tests/baseline_compat/hyperon-mettalog_sanity/flip_test.metta',"    (if (flip)\n       (recur-until-flip-false (+ 1 $n))\n       True)))\n\n!(assertEqualToResult (recur-until-flip-true 1) (True))\n!(assertEqualToResult (recur-until-flip-false 1) (True))")
found_search_result(metta_example,"repr",1,4,'../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta',";!(assertEqualToResults (repr atoma_tag) \"atoma_tag\")")
found_search_result(metta_example,"parse",1,5,'../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta',";!(assertEqualToResults (parse \"x_string_tag\") x_string_tag)")
found_search_result(metta_example,"intersection",1,8,'../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta',"; !(intersection (superpose (a b c d )) (superpose ( c d e f )))")
found_search_result(metta_example,"union",1,11,'../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta',"; !(union (superpose (a b c d )) (superpose ( c d e f )))")
found_search_result(metta_example,"union",1,12,'../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta',"!(assertEqualToResults (union (superpose (a b c d )) (superpose ( c d e f ))) (a b c d e f))")
found_search_result(metta_example,"case",1,4,'../../tests/baseline_compat/hyperon-mettalog_sanity/01_lang_inc.metta',"    (case $x\n     (((Just $v) (Just (+ 1 $v)))\n\t(Nothing Nothing))))\n\n!(assertEqual (maybe-inc Nothing) Nothing)\n!(assertEqual (maybe-inc (Just 2)) (Just 3))\n\n\n")
found_search_result(metta_example,"get-type",1,14,'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(get-type insert)")
found_search_result(metta_example,"cons",1,16,'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"(= (insert $x Nil) (Cons $x Nil))")
found_search_result(metta_example,"cons",1,17,'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"(= (insert $x (Cons $head $tail))\n       (if (< $x $head)\n\t      (Cons $x (Cons $head $tail))\n\t      (Cons $head (insert $x $tail))))")
found_search_result(metta_example,"cons",1,22,'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(assertEqual (insert 2 (insert 1 Nil)) (Cons 1 (Cons 2 Nil)))")
found_search_result(metta_example,"cons",1,24,'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(assertEqual  (Cons 1 Nil)  (Cons 1 Nil))")
found_search_result(metta_example,"cons",1,26,'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(assertEqual  (insert 1 Nil)  (Cons 1 Nil))")
found_search_result(metta_example,"cons",1,30,'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(assertEqual (insert 1 (insert 2 Nil)) (Cons 1 (Cons 2 Nil)))")
found_search_result(metta_example,"cons",1,32,'../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta',"!(assertEqual (insert 3 (insert 2 (insert 1 Nil))) (Cons 1 (Cons 2 (Cons 3 Nil))))")
found_search_result(metta_example,"let*",1,5,'../../tests/baseline_compat/hyperon-mettalog_sanity/is_space.metta',"   (let* (($type (get-type $atom)) ($space (get-type &self))) (== $type $space)))\n\n\n!(assertEqual (is-space &self) True)\n\n!(assertEqual (is-space &corelib) True)\n\n!(assertEqual (is-space 666) False)")
found_search_result(metta_example,"get-atoms",1,6,'../../tests/baseline_compat/quick/f1_imports.metta',"; Even at the very beginning of the main script `(get-atoms &self)`")
found_search_result(metta_example,"get-atoms",1,10,'../../tests/baseline_compat/quick/f1_imports.metta',";;!(get-atoms &self)")
found_search_result(metta_example,"get-type",1,11,'../../tests/baseline_compat/quick/f1_imports.metta',";;!(get-type (get-atoms &self))")
found_search_result(metta_example,"get-type",1,12,'../../tests/baseline_compat/quick/f1_imports.metta',"!(get-type &self)")
found_search_result(metta_example,"get-type",1,15,'../../tests/baseline_compat/quick/f1_imports.metta',"  ((let $x (get-atoms &self) (get-type $x)))")
found_search_result(metta_example,"get-type",1,16,'../../tests/baseline_compat/quick/f1_imports.metta',"  ((get-type &self)))\n\n; stdlib is already loaded\n!(assertEqual")
found_search_result(metta_example,"import!",1,27,'../../tests/baseline_compat/quick/f1_imports.metta',"!(import! &m f1_moduleA.metta)")
found_search_result(metta_example,"let*",1,31,'../../tests/baseline_compat/quick/f1_imports.metta',";  (let* (($x (collapse (get-atoms &m)))\n;         ($y (car-atom $x)))\n;        (get-type $y))")
found_search_result(metta_example,"get-type",1,34,'../../tests/baseline_compat/quick/f1_imports.metta',";  (get-type &self))\n\n\n; FIXME? Now, it is moduleC space.\n;        Should it be `stdlib` atom for a separately imported space\n; !(let $x (collapse (get-atoms &m)) (car-atom $x))\n\n\n; MeTTLog:  xlisting('&m').")
found_search_result(metta_example,"match",1,54,'../../tests/baseline_compat/quick/f1_imports.metta',"  (match &m (= (f 2) $x) $x)")
found_search_result(metta_example,"import!",1,60,'../../tests/baseline_compat/quick/f1_imports.metta',"!(import! &self f1_moduleA.metta)")
found_search_result(metta_example,"&self",1,68,'../../tests/baseline_compat/quick/f1_imports.metta',"; MeTTLog:  xlisting('&self').")
found_search_result(metta_example,"let*",1,76,'../../tests/baseline_compat/quick/f1_imports.metta',"  (let* (($a (collapse (get-atoms &self)))\n          ($x (cdr-atom $a))\n          ($y (cdr-atom $x)))\n         (car-atom $y)))\n\n; NOTE: now the first atom, which was a space, is removed from `&m`,\n; because we load modules only once, and we collect atoms-spaces to\n; prevent duplication\n!(assertEqual")
found_search_result(metta_example,"let*",1,85,'../../tests/baseline_compat/quick/f1_imports.metta',"  (== (let* (($x (collapse (get-atoms &m)))\n             ($y (car-atom $x)))\n            (get-type $y))\n        (get-type &self))")
found_search_result(metta_example,"import!",1,100,'../../tests/baseline_compat/quick/f1_imports.metta',"!(import! &self f1_moduleB.metta)")
found_search_result(metta_example,"import!",1,115,'../../tests/baseline_compat/quick/f1_imports.metta',"!(import! &self ../hyperon-experimental_scripts/f1_moduleB.metta)")
found_search_result(metta_example,"get-type",1,12,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (curry +))")
found_search_result(metta_example,"get-type",1,15,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type ((curry +) 2))")
found_search_result(metta_example,"get-type",1,37,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (curry-a + 2))")
found_search_result(metta_example,"get-type",1,40,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type ((curry-a + 2) 3))")
found_search_result(metta_example,"get-type",1,44,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type ((curry-a + 2) \"S\"))")
found_search_result(metta_example,"get-type",1,103,'../../tests/baseline_compat/quick/d2_higherfunc.metta',";   (get-type (lambda ($x $y) (+ $x $y)))")
found_search_result(metta_example,"get-type",1,155,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 1) (Left 5)))")
found_search_result(metta_example,"get-type",1,169,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (Left \"5\")))")
found_search_result(metta_example,"get-type",1,172,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (UntypedC \"5\")))")
found_search_result(metta_example,"get-type",1,175,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (get-type (fmap (curry-a + 2) (UntypedC (Null) 5)))")
found_search_result(metta_example,"cons",1,197,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"(= (fmap-i $f (Cons $x $xs))\n   (Cons ($f $x) (fmap-i $f $xs)))")
found_search_result(metta_example,"cons",1,203,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (fmap-i (curry-a * 2) (Cons 3 (Cons 4 Nil)))")
found_search_result(metta_example,"cons",1,204,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (Cons 6 (Cons 8 Nil)))\n\n; Thus, there is no problem in having different implementations\n; of the same function for different types. But it will not\n; work \"for free\" (it requires explicit implementation for each type)\n!(assertEqualToResult")
found_search_result(metta_example,"cons",1,223,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"(= (insert $x Nil) (Cons $x Nil))")
found_search_result(metta_example,"cons",1,224,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"(= (insert $x (Cons $head $tail))\n  (case (< $x $head)\n      ((True  (Cons $x (Cons $head $tail)))\n       (False (Cons $head (insert $x $tail))))))")
found_search_result(metta_example,"cons",1,231,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"(= (sort (Cons $head $tail)) (insert $head (sort $tail)))")
found_search_result(metta_example,"cons",1,234,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (Cons 1 (Cons 2 (Cons 3 Nil))))\n!(assertEqual")
found_search_result(metta_example,"cons",1,236,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (sort (Cons 3 (Cons 1 (Cons 2 Nil))))")
found_search_result(metta_example,"cons",1,237,'../../tests/baseline_compat/quick/d2_higherfunc.metta',"  (Cons 1 (Cons 2 (Cons 3 Nil))))")
found_search_result(metta_example,"import!",1,5,'../../tests/baseline_compat/quick/f1_moduleB.metta',"!(import! &self f1_moduleC.metta)")
found_search_result(metta_example,"get-type",1,7,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type 5)")
found_search_result(metta_example,"get-type",1,10,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (+ 5 7))")
found_search_result(metta_example,"get-type",1,15,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type +)")
found_search_result(metta_example,"get-type",1,21,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (+ 5 \"4\"))")
found_search_result(metta_example,"get-type",1,24,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (+ -))")
found_search_result(metta_example,"get-type",1,30,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type Either)")
found_search_result(metta_example,"get-type",1,41,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (Left 5))")
found_search_result(metta_example,"get-type",1,49,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (isLeft (Right 5)))")
found_search_result(metta_example,"get-type",1,54,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (isLeft 5))")
found_search_result(metta_example,"get-type",1,66,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (LeftP 5))")
found_search_result(metta_example,"get-type",1,73,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (pair (LeftP 5) \"String\"))")
found_search_result(metta_example,"cons",1,85,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (Cons 5 (Cons 6 Nil)))")
found_search_result(metta_example,"cons",1,88,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (get-type (Cons 5 (Cons \"6\" Nil)))")
found_search_result(metta_example,"cons",1,96,'../../tests/baseline_compat/quick/d1_gadt.metta',"  (let (List $t) (get-type (Cons 5 (Cons 6 Nil)))\n       $t)")
found_search_result(metta_example,"function",1,10,'../../tests/baseline_compat/quick/d4_type_prop.metta',"; Predicates (functions) from `Entity` to `Type`")
found_search_result(metta_example,"get-type",1,18,'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (Mortal Plato))")
found_search_result(metta_example,"get-type",1,40,'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (HumansAreMortal SocratesIsHuman))")
found_search_result(metta_example,"get-type",1,44,'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (HumansAreMortal (Human Socrates)))")
found_search_result(metta_example,"remove-atom",1,57,'../../tests/baseline_compat/quick/d4_type_prop.metta',"(nop (remove-atom &self (: = (-> Atom Atom Atom))))")
found_search_result(metta_example,"remove-atom",1,58,'../../tests/baseline_compat/quick/d4_type_prop.metta',"(nop (remove-atom &corlib (: = (-> Atom Atom Atom))))")
found_search_result(metta_example,"get-type",1,61,'../../tests/baseline_compat/quick/d4_type_prop.metta',"!(\"sameTypes\" (get-type SocratesIsMortal) (get-type (HumansAreMortal SocratesIsHuman)))")
found_search_result(metta_example,"get-type",1,63,'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (= SocratesIsMortal (HumansAreMortal SocratesIsHuman)))")
found_search_result(metta_example,"&self",1,67,'../../tests/baseline_compat/quick/d4_type_prop.metta',"; it doesn't mean that the equality itself is true (an inhabited type).")
found_search_result(metta_example,"get-type",1,69,'../../tests/baseline_compat/quick/d4_type_prop.metta',"!(\"sameTypes\" (get-type (Mortal Socrates)) (get-type (Mortal Plato)))")
found_search_result(metta_example,"get-type",1,71,'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (= (Mortal Socrates) (Mortal Plato)))")
found_search_result(metta_example,"get-type",1,75,'../../tests/baseline_compat/quick/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsMortal) (get-type (HumansAreMortal PlatoIsHuman)))")
found_search_result(metta_example,"get-type",1,78,'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (= SocratesIsMortal (HumansAreMortal PlatoIsHuman)))")
found_search_result(metta_example,"get-type",1,82,'../../tests/baseline_compat/quick/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsHuman) !(get-type PlatoIsHuman))")
found_search_result(metta_example,"get-type",1,85,'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (= SocratesIsHuman PlatoIsHuman))")
found_search_result(metta_example,"get-type",1,88,'../../tests/baseline_compat/quick/d4_type_prop.metta',"!(\"!sameTypes\" (get-type SocratesIsHuman) (get-type SocratesIsMortal))")
found_search_result(metta_example,"get-type",1,90,'../../tests/baseline_compat/quick/d4_type_prop.metta',"  (get-type (= SocratesIsHuman SocratesIsMortal))")
found_search_result(metta_example,"match",1,122,'../../tests/baseline_compat/quick/d4_type_prop.metta',"   (match &self (: $x $type) T))\n!(assertEqual")
found_search_result(metta_example,"match",1,134,'../../tests/baseline_compat/quick/d4_type_prop.metta',"   (match &self (: $impl (-> $cause $type))\n      (= $cause T)))\n!(assertEqual")
found_search_result(metta_example,"import!",1,5,'../../tests/baseline_compat/quick/f1_moduleA.metta',"!(import! &self f1_moduleC.metta)")
found_search_result(metta_example,"let*",2,45,'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta',"   (let* (((: $ructor (-> $premise $conclusion)) ($rb))\n          ((: ($ructor $proof) $conclusion) $query)\n          ((: $proof $premise) (synthesize (: $proof $premise) $kb $rb $k)))\n     $query))\n;; Binary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",2,51,'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k)))\n     $query))\n;; Trinary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",2,58,'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k)))\n     $query))\n;; Quaternary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",2,66,'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3 $proof4) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k))\n          ((: $proof4 $premise4) (synthesize (: $proof4 $premise4) $kb $rb $k)))\n     $query))\n;; Quintenary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",2,75,'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $premise5 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3 $proof4 $proof5) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k))\n          ((: $proof4 $premise4) (synthesize (: $proof4 $premise4) $kb $rb $k))\n          ((: $proof5 $premise5) (synthesize (: $proof5 $premise5) $kb $rb $k)))\n     $query))\n")
found_search_result(metta_example,"let*",2,40,'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/synthesize.metta',"   (let* (((: $ructor (-> $premise $conclusion)) ($rb))\n          ((: ($ructor $proof) $conclusion) $query)\n          ((: $proof $premise) (synthesize (: $proof $premise) $kb $rb $k)))\n     $query))\n;; Binary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",2,46,'../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/synthesize.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k)))\n     $query))\n\n(: kb (-> Atom))\n(= (kb) (: a A))\n(= (kb) (: a B))")
found_search_result(metta_example,"pragma!",3,1,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_116378.metta',"!(pragma! time debug)")
found_search_result(metta_example,"import!",3,2,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_116378.metta',"!(import! &hald116378 hald_spo_116378)")
found_search_result(metta_example,"match",3,3,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_116378.metta',";!(match &hald116378 (Doxorubicin $p $o) (Doxorubicin $p $o))")
found_search_result(metta_example,"number-of",3,5,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_116378.metta',";!(assertEqualToResult (number-of (match &hald116378 (Doxorubicin $p $o) (Doxorubicin $p $o))) (96))")
found_search_result(metta_example,"match",3,7,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_116378.metta',"  (match &hald116378 (Doxorubicin $p $o) (Doxorubicin $p $o))")
found_search_result(metta_example,"cons",3,10,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/hald_spo_100.metta',"(Constipation associated Sarcopenia)")
found_search_result(metta_example,"pragma!",3,1,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_5000.metta',"!(pragma! time debug)")
found_search_result(metta_example,"import!",3,2,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_5000.metta',"!(import! &hald5000 hald_spo_5000)")
found_search_result(metta_example,"match",3,4,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_5000.metta',"   (match &hald5000 (Doxorubicin $p $o) (Doxorubicin $p $o))")
found_search_result(metta_example,"import!",3,1,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_1000.metta',"!(import! &hald1000 hald_spo_1000.metta)")
found_search_result(metta_example,"match",3,2,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_1000.metta',"!(assertEqualToResult (match &hald1000 (Doxorubicin $p $o) (Doxorubicin $p $o)) \n     ((Doxorubicin stratify Liposarcoma) (Doxorubicin associated MIR375)))")
found_search_result(metta_example,"import!",3,1,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_100.metta',"!(import! &hald100 hald_spo_100.metta)")
found_search_result(metta_example,"match",3,3,'../../tests/baseline_compat/anti-regression/issues/metta-wam-issue-116/test_spo_100.metta',"    (match &hald100 (Doxorubicin $p $o) (Doxorubicin $p $o))")
found_search_result(metta_example,"coerce",1,51,'../../../metta-examples-main/subtyping/rule-base.metta',";; `(coerce proof_S<:T t)` is of type `T`, where `proof_S<:T` is a")
found_search_result(metta_example,"import!",1,4,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(import! &self metta:synthesis:Synthesize)")
found_search_result(metta_example,"import!",1,7,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(import! &rb metta:subtyping:rule-base)")
found_search_result(metta_example,"match",1,26,'../../../metta-examples-main/subtyping/subtyping-test.metta',"(= (rb) (match &rb $x $x))")
found_search_result(metta_example,"coerce",1,34,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: (coerce $proof felix) Mammal) kb rb (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,37,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (: felix Mammal)) kb rb (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,40,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (<: Cat Animal)) kb rb (fromNumber 1))")
found_search_result(metta_example,"coerce",1,43,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: (coerce $proof felix) Animal) kb rb (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,46,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (: felix Animal)) kb rb (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,49,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (<: (-> Physical Weight) (-> Cat Weight))) kb rb (fromNumber 3))")
found_search_result(metta_example,"fromnumber",1,52,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $fun (-> Physical Weight)) kb rb (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,56,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (: $fun (-> Physical Weight))) kb rb (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,59,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $fun (-> Cat Weight)) kb rb (fromNumber 3))")
found_search_result(metta_example,"fromnumber",1,63,'../../../metta-examples-main/subtyping/subtyping-test.metta',"!(synthesize (: $proof (: $fun (-> Cat Weight))) kb rb (fromNumber 3))")
found_search_result(metta_example,"import!",1,3,'../../../metta-examples-main/red-black-lambda/red-black.metta',"!(import! &LC lambda-theory.metta)")
found_search_result(metta_example,"match",1,5,'../../../metta-examples-main/red-black-lambda/red-black.metta',"(= (RedLambda $RV $BLC) (RTheory (match &LC (LambdaTheory ($RV $BLC) $rhs) $rhs)))")
found_search_result(metta_example,"match",1,6,'../../../metta-examples-main/red-black-lambda/red-black.metta',"(= (BlackLambda $BV $RLC) (BTheory (match &LC (LambdaTheory ($BV $RLC) $rhs) $rhs)))")
found_search_result(metta_example,"match",1,16,'../../../metta-examples-main/red-black-lambda/red-black.metta',"; (RedBlackLambda (rc (match &self (LambdaTheory ($RV $BLC) $rhs) $rhs)))")
found_search_result(metta_example,"&self",1,64,'../../../metta-examples-main/combinator-calculi/tree.metta',"; todo (but it's getting slow) star-abstraction and self-evaluation")
found_search_result(metta_example,"case",1,8,'../../../metta-examples-main/sumo/load-suo-kif.metta',"   (case (car-atom $x)\n     (;; Symbol\n      ((Error $a $msg) NEXT)\n      ;; Expression\n      ($_ NEXT)))")
found_search_result(metta_example,"bind!",1,4,'../../../metta-examples-main/python_from_metta/default.metta',"    (bind! $x (py-atom $y)))\n(= (import $x) ")
found_search_result(metta_example,"import!",1,1,'../../../metta-examples-main/python_from_metta/requests.metta',"; > this !(import! a b) doesn't work exactly.")
found_search_result(metta_example,"import!",1,3,'../../../metta-examples-main/python_from_metta/requests.metta',"!(import! &self default)")
found_search_result(metta_example,"bind!",1,7,'../../../metta-examples-main/python_from_metta/requests.metta',"    (bind! $x (py-atom $y)))\n(= (import $x) ")
found_search_result(metta_example,"py-atom",1,27,'../../../metta-examples-main/python_from_metta/requests.metta',"(= (::JSON $x) (py-atom (json.loads $x)))")
found_search_result(metta_example,"py-atom",1,35,'../../../metta-examples-main/python_from_metta/requests.metta',"    ((py-dot (py-atom $dict) get) $key))\n\n(: get_index (-> JsonAtom Number JsonAtom))\n(= (get_index $list $index)")
found_search_result(metta_example,"py-atom",1,39,'../../../metta-examples-main/python_from_metta/requests.metta',"    ((py-dot (py-atom $list) __getitem__) $index))\n\n;(: uni_get (-> JsonAtom (String Number) String))\n\n\n; -----------------------\n; > why do we need to add this to prevent non-deterministic answer ?\n(= (rget $x ()) (empty))\n; ----------------------")
found_search_result(metta_example,"py-list",1,91,'../../../metta-examples-main/python_from_metta/requests.metta',"(bash (py-list (\n    \"echo\" \"Hello this is a bash shell\"\n    )))")
found_search_result(metta_example,"py-dot",1,108,'../../../metta-examples-main/python_from_metta/requests.metta',"    (py-dot \n        (py-atom (::str ('\\x20')) join) \n        ($x $y)))\n\n; ---------------------------------------\n\n(= (OPENAI_API_KEY) (get_env \"OPENAI_API_KEY\"))\n(= (Bearer)(concat \"Bearer \" (OPENAI_API_KEY)))\n")
found_search_result(metta_example,"py-dict",1,123,'../../../metta-examples-main/python_from_metta/requests.metta',"    (json (py-dict (\n        (\"model\" \"gpt-4o\")\n        (\"messages\" (py-list (\n            (py-dict (\n                (\"role\" \"system\")\n                (\"content\" $systemPrompt)\n            ))\n            (py-dict (\n                (\"role\" \"user\")")
found_search_result(metta_example,"py-dict",1,136,'../../../metta-examples-main/python_from_metta/requests.metta',"    (headers (py-dict (\n        (\"Authorization\" (Bearer))\n    )))")
found_search_result(metta_example,"py-list",1,12,'../../../metta-examples-main/python_from_metta/fs.metta',"(= (shell-command) (py-list (\n    \"echo\" \n    \"Hello this is a shell\"\n    )))")
found_search_result(metta_example,"bind!",1,21,'../../../metta-examples-main/python_from_metta/fs.metta',"    (bind! $x (py-atom $y)))\n(= (import $x) ")
found_search_result(metta_example,"py-atom",1,47,'../../../metta-examples-main/python_from_metta/fs.metta',"    (stdout (py-atom (PIPE)))")
found_search_result(metta_example,"bind!",1,59,'../../../metta-examples-main/python_from_metta/fs.metta',"    (bind! $name \n        (getattr $buffer $var)\n        ))\n(= (extract $buffer to $name )")
found_search_result(metta_example,"print",1,115,'../../../metta-examples-main/python_from_metta/fs.metta',";;     (println! (hi))")
found_search_result(metta_example,"print",1,116,'../../../metta-examples-main/python_from_metta/fs.metta',";;     (!(println! ($do)) (untill $stop $do))")
found_search_result(metta_example,"print",1,121,'../../../metta-examples-main/python_from_metta/fs.metta',"    ;; (println! ($buf))")
found_search_result(metta_example,"sealed",1,10,'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let (quote ($v $b)) (sealed ($var) (quote ($var $body))) (let (quote $v) (quote $val) $b)) )\n\n; For lambda with two inputs\n(= ((lambda2 $var1 $var2 $body) $val1 $val2)")
found_search_result(metta_example,"sealed",1,14,'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let (quote ($v1 $v2 $b)) (sealed ($var1 $var2) (quote ($var1 $var2 $body))) (let (quote ($v1 $v2)) (quote ($val1 $val2)) $b)) )\n\n; For lambda with three inputs. But actually we will use it to bypass recursive limitation while\n; defining function using let\n(: lambda3 (-> Variable Variable Variable Atom (-> $a $b $c $t)))\n(= ((lambda3 $var1 $var2 $var3 $body) $val1 $val2 $val3)")
found_search_result(metta_example,"sealed",1,20,'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let (quote ($v1 $v2 $v3 $b)) (sealed ($var1 $var2 $var3) (quote ($var1 $var2 $var3 $body))) (let (quote ($v1 $v2 $v3)) (quote ($val1 $val2 $val3)) $b)) )\n\n(= (sqr $x) (* $x $x))\n\n; Cube can't be defined as (* $x $x $x) as in Scheme\n(= (cube $x) (* $x (sqr $x)))\n\n; Convenient functions\n(= (inc $x) (+ $x 1))")
found_search_result(metta_example,"&self",1,47,'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let $try (lambda2 $guess $self-try\n        (let $next ($f $guess)\n            (let $close-enough? (lambda2 $v1 $v2 (< (Abs (- $v1 $v2)) (tolerance)))\n                (if ($close-enough? $guess $next)\n                    $next\n                    ($self-try $next $self-try)))))\n    ($try $first-guess $try)))\n\n!(assertEqual")
found_search_result(metta_example,"&self",1,86,'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let $try (lambda2 $guess $self-try\n        (let $next ($f $guess)\n            (let $close-enough? (lambda2 $v1 $v2 (< (Abs (- $v1 $v2)) (tolerance)))\n                (if ($close-enough? $guess $next)\n                        $next\n                        (let*\n                        (\n                            (() (println! $next))\n                            (() ($self-try $next $self-try))")
found_search_result(metta_example,"&self",1,204,'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"  (let $iter (lambda3 $y $counter $self\n    (if (< (/ $y 2) 1)\n        $counter\n        ($self (/ $y 2) (inc $counter) $self)))\n  ($iter $x 0 $iter)))\n\n!(assertEqual")
found_search_result(metta_example,"&self",1,255,'../../../metta-examples-main/SICP_book/chapter_1_3_2.metta',"    (let $iter (lambda2 $x $self\n        (let $next ($improve $x)\n            (if ($check $x $next)\n                $next\n                ($self $next $self))))\n    (lambda1 $guess ($iter $guess $iter))))\n\n(= (ii_sqrt $x)")
found_search_result(metta_example,"fromnumber",1,23,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))")
found_search_result(metta_example,"bind!",1,37,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(bind! &kb (new-space))")
found_search_result(metta_example,"add-atom",1,40,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: ab (â\u0086\u0092 A B)))")
found_search_result(metta_example,"add-atom",1,41,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: bc (â\u0086\u0092 B C)))")
found_search_result(metta_example,"add-atom",1,42,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: a A))")
found_search_result(metta_example,"add-atom",1,45,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: ModusPonens (-> (â\u0086\u0092 $p $q)  ; Premise 1\n                                  (-> $p     ; Premise 2\n                                      $q)))) ; Conclusion")
found_search_result(metta_example,"add-atom",1,48,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: Deduction (-> (â\u0086\u0092 $q $r)         ; Premise 1\n                                (-> (â\u0086\u0092 $p $q)     ; Premise 2\n                                    (â\u0086\u0092 $p $r))))) ; Conclusion")
found_search_result(metta_example,"add-atom",1,51,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: . (-> (-> $q $r)         ; Premise 1\n                        (-> (-> $p $q)     ; Premise 2\n                            (-> $p $r))))) ; Conclusion")
found_search_result(metta_example,"match",1,58,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"(= (syn (: $prf $ccln) $_) (match &kb (: $prf $ccln) (: $prf $ccln)))")
found_search_result(metta_example,"let*",1,61,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"   (let* (((: $prfabs (-> $prms $ccln)) (syn (: $prfabs (-> $prms $ccln)) $k))\n          ((: $prfarg $prms) (syn (: $prfarg $prms) $k)))\n     (: ($prfabs $prfarg) $ccln)))\n\n;; Test backward chainer DTL curried\n! \"=== Test Backward Chainer DTL Curried ===\"\n\n;; Prove A (axiom)\n!(assertEqual")
found_search_result(metta_example,"fromnumber",1,80,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf (-> A B)) (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,85,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf B) (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,90,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf C) (fromNumber 3))")
found_search_result(metta_example,"fromnumber",1,95,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf C) (fromNumber 4))")
found_search_result(metta_example,"fromnumber",1,105,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf (-> (â\u0086\u0092 $q $r) (-> (â\u0086\u0092 $p $q) (-> $p $r)))) (fromNumber 4))")
found_search_result(metta_example,"fromnumber",1,113,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (syn (: $prf (-> (â\u0086\u0092 $r $s) (-> (â\u0086\u0092 $q $r) (-> (â\u0086\u0092 $p $q) (â\u0086\u0092 $p $s))))) (fromNumber 4))")
found_search_result(metta_example,"add-atom",1,124,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"(= (add-atom-nodup $space $atom)\n   (case (match $space $atom $atom)\n     (($atom ())\n      (%void% (add-atom $space $atom)))))")
found_search_result(metta_example,"add-atom",1,131,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"(= (add-atoms-nodup $space $atoms)\n   (if (== $atoms ())\n       ()\n       (let* (($head (car-atom $atoms))\n              ($tail (cdr-atom $atoms))\n              ($dummy (add-atom-nodup $space $head)))\n         (add-atoms-nodup $space $tail))))")
found_search_result(metta_example,"bind!",1,143,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(bind! &space-test (new-space))")
found_search_result(metta_example,"add-atom",1,144,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom-nodup &space-test A)")
found_search_result(metta_example,"add-atom",1,145,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom-nodup &space-test A)")
found_search_result(metta_example,"get-atoms",1,147,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (get-atoms &space-test)")
found_search_result(metta_example,"add-atom",1,151,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atoms-nodup &space-test (A B C A))")
found_search_result(metta_example,"get-atoms",1,153,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (get-atoms &space-test)")
found_search_result(metta_example,"collapse",1,157,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',";; Iterative Chainer Wrapped Around Backward DTL Curried (collapse) ;;")
found_search_result(metta_example,"let*",1,176,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"   (let* (($cres (collapse (syn $query $depth)))\n          ($dummy (add-atoms-nodup &kb $cres)))\n     (isyn (superpose $cres) $depth $k)))\n\n;; Test Iterative Chainer Wrapped Around Forward Revertant (collapse)\n! \"=== Test Iterative Chainer Wrapped Around Backward DTL Curried (collapse) ===\"\n\n;; No iteration\n!(assertEqual")
found_search_result(metta_example,"get-atoms",1,188,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (get-atoms &kb)")
found_search_result(metta_example,"fromnumber",1,200,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (isyn (: $prf B) (fromNumber 2) (fromNumber 1))")
found_search_result(metta_example,"get-atoms",1,203,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (get-atoms &kb)")
found_search_result(metta_example,"fromnumber",1,215,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (isyn (: $prf C) (fromNumber 2) (fromNumber 1))")
found_search_result(metta_example,"get-atoms",1,218,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  (get-atoms &kb)")
found_search_result(metta_example,"fromnumber",1,233,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"        (fromNumber 4) (fromNumber 1))\n  ((: ((((. .) .) ModusPonens) Deduction)\n      (-> (â\u0086\u0092 $q $r) (-> (â\u0086\u0092 $p $q) (-> $p $r))))")
found_search_result(metta_example,"add-atom",1,240,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: cd (â\u0086\u0092 C D)))")
found_search_result(metta_example,"add-atom",1,241,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: de (â\u0086\u0092 D E)))")
found_search_result(metta_example,"add-atom",1,242,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"!(add-atom &kb (: ef (â\u0086\u0092 E F)))")
found_search_result(metta_example,"fromnumber",1,250,'../../../metta-examples-main/iterative-chaining/ibc-xp.metta',"  !(isyn (: $prf F) (fromNumber 3) (fromNumber 1))")
found_search_result(metta_example,"new-state",1,36,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (new-state-value! $var_name $value)\n                        (let $new-state (new-state $value)\n                        (add-atom &self ((checked $var_name)  $new-state))\n\n                        ))")
found_search_result(metta_example,"get-state",1,42,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (get-card-state-value $var_name)(match &self ((checked $var_name) $x)  (get-state $x) ))")
found_search_result(metta_example,"change-state!",1,44,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (set-card-state-value $var_name $value) (change-state! (match &self ((checked $var_name) $x)  $x) $value))")
found_search_result(metta_example,"new-state",1,47,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(match &self (character $t) (new-state-value! (character $t) False))")
found_search_result(metta_example,"new-state",1,48,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(match &self (weapon $t) (new-state-value! (weapon $t) False))")
found_search_result(metta_example,"new-state",1,49,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(match &self (room $t) (new-state-value! (room $t) False))")
found_search_result(metta_example,"new-state",1,54,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (new-state-value! $player $value)\n                        (let $new-state (new-state $value)\n                        (add-atom &self ((is_not_active $player)  $new-state))\n\n                        ))")
found_search_result(metta_example,"get-state",1,60,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (get-player-state-value $player)(match &self ((is_not_active $player)  $x)  (get-state $x) ))")
found_search_result(metta_example,"change-state!",1,62,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"(= (set-player-state-value $player $value) (change-state! (match &self ((is_not_active $player)  $x)  $x) $value))")
found_search_result(metta_example,"new-state",1,66,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(match &self (player $t) (new-state-value! $t False))")
found_search_result(metta_example,"bind!",1,71,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',";!(bind! &target (character \"Colonel Mustard\") (weapon   \"dagger\") (room  \"The Ballroom\"))")
found_search_result(metta_example,"new-state",1,106,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(bind! &false (new-state False))")
found_search_result(metta_example,"case",1,114,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"         (case (match &self ($player left $next_player) $next_player)\n            (\n                ($next_player\n                    (case (match &self ($next_player ($room_name $room)) $room_name)\n                        (\n                            (%void%\n                                (case (match &self ($next_player ($weapon_name $weapon)) $weapon_name)\n                                    (\n                                        (%void%")
found_search_result(metta_example,"case",1,123,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"                                            (case (match &self ($next_player ($character_name $character)) $character_name)\n                                                (\n                                                 (%void%     (if (== $start_player None )\n                                                                (process_accusation $next_player $room  $weapon $character $player)\n                                                                (process_accusation $next_player $room  $weapon $character $start_player)\n                                                             ))\n                                                 (character (set-card-state-value (character $character) True))\n                                                )\n                                            )")
found_search_result(metta_example,"new-state",1,152,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"!(let $test (new-state ())\n    (add-atom &self ( = (test-state) $test) )\n)")
found_search_result(metta_example,"change-state!",1,157,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"    (let() (change-state! (test-state) $val) (empty))")
found_search_result(metta_example,"get-state",1,161,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"   (get-state (test-state))")
found_search_result(metta_example,"match",1,168,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"    (let ($r $w $c) (match &self (,\n                    (character $c) ((checked (character $c)) &false)\n                    (room $r) ((checked (room $r)) &false)\n                    (weapon $w) ((checked (weapon $w)) &false)) ($r $w $c) )\n        (case  (match &self ($player ($room_name $r)) $room_name)\n            (\n                ( %void%\n                     (case (match &self ($player ($character_name $c)) $character_name)\n                        (")
found_search_result(metta_example,"case",1,178,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"                                (case (match &self ($player ($weapon_name $w)) $weapon_name)\n                                    (\n                                        (%void%  ($r $w $c) )\n                                    )\n                                )")
found_search_result(metta_example,"match",1,207,'../../../metta-examples-main/game_of_clue/game_of_clue.metta',"                                (let $x (match &self (,($player left $x) ((is_not_active $x) &false)) $x)\n                                     (process-game $x)\n                                )")
found_search_result(metta_example,"import!",1,2,'../../../metta-examples-main/traverser/basic.metta',"!(import! &self tinkerpop-modern.metta)")
found_search_result(metta_example,"match",1,4,'../../../metta-examples-main/traverser/basic.metta',"(= (transform_ $pattern $query) (match &self $pattern (let $_ (add-atom &self $query) $query)))")
found_search_result(metta_example,"match",1,5,'../../../metta-examples-main/traverser/basic.metta',"(= (transform $pattern $query) (match &self $pattern $query))")
found_search_result(metta_example,"add-atom",1,1,'../../../metta-examples-main/traverser/creation.metta',"(= (added-atom! $x) (let $_ (add-atom &self $x) $x))")
found_search_result(metta_example,"match",1,3,'../../../metta-examples-main/traverser/creation.metta',"(= (transform $pattern $query) (match &self $pattern $query))")
found_search_result(metta_example,"match",1,4,'../../../metta-examples-main/traverser/creation.metta',"(= (transform_ $pattern $query) (match &self $pattern (added-atom! $query)))")
found_search_result(metta_example,"unify",1,6,'../../../metta-examples-main/traverser/creation.metta',"(= (unifyTo $x $x) $x)")
found_search_result(metta_example,"new-state",1,18,'../../../metta-examples-main/traverser/creation.metta',"!(bind! node# (new-state 0))")
found_search_result(metta_example,"get-state",1,20,'../../../metta-examples-main/traverser/creation.metta',"(= (addV $label) (added-atom! (Node $label (get-state node#))))")
found_search_result(metta_example,"change-state!",1,21,'../../../metta-examples-main/traverser/creation.metta',"(= (addV $label) (let $_ (change-state! node# (+ (get-state node#) 1)) (empty)))")
found_search_result(metta_example,"bind!",1,26,'../../../metta-examples-main/traverser/creation.metta',"!(bind! v1 (property age 29 (property name marko (addV person))))")
found_search_result(metta_example,"bind!",1,28,'../../../metta-examples-main/traverser/creation.metta',"!(bind! v2 (property lang java (property name lop (addV software))))")
found_search_result(metta_example,"print",1,3,'../../../metta-examples-main/stack-based/interpreter.metta',"(= ((basic ($s $x)) say) (let $_ (println! $x) (basic $s)))")
found_search_result(metta_example,"print",1,33,'../../../metta-examples-main/stack-based/rewrites.metta',"(= (($s $x) say) (let  $_ (println! $x) $s))")
found_search_result(metta_example,"cons",1,39,'../../../metta-examples-main/stack-based/rewrites.metta',"(= (($s (Cons $f $r)) apply) ((($s $f) $r) apply))")
found_search_result(metta_example,"cons",1,41,'../../../metta-examples-main/stack-based/rewrites.metta',"!(((E 6) (Cons dup (Cons mul Nil))) apply)")
found_search_result(metta_example,"fromnumber",1,23,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))")
found_search_result(metta_example,"bind!",1,36,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"!(bind! &kb (new-space))")
found_search_result(metta_example,"add-atom",1,38,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"!(add-atom &kb (: a A))")
found_search_result(metta_example,"add-atom",1,39,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"!(add-atom &kb (: ab (â\u0086\u0092 A B)))")
found_search_result(metta_example,"add-atom",1,40,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"!(add-atom &kb (: bc (â\u0086\u0092 B C)))")
found_search_result(metta_example,"add-atom",1,41,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"!(add-atom &kb (: ModusPonens\n                (-> (â\u0086\u0092 $p $q)           ; Premise 1\n                    (-> $p              ; Premise 2\n                        $q))))          ; Conclusion")
found_search_result(metta_example,"match",1,73,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"(= (bc $kb (: $prf $ccln) $_) (match $kb (: $prf $ccln) (: $prf $ccln)))")
found_search_result(metta_example,"let*",1,76,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"   (let* (((: $prfabs (-> $prms $ccln)) (bc $kb (: $prfabs (-> $prms $ccln)) $k))\n          ((: $prfarg $prms) (bc $kb (: $prfarg $prms) $k)))\n     (: ($prfabs $prfarg) $ccln)))\n\n;; Test curred backward chainer\n!(assertEqual")
found_search_result(metta_example,"fromnumber",1,82,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (bc &kb (: $prf A) (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,85,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (bc &kb (: $prf B) (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,88,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (bc &kb (: $prf C) (fromNumber 3))")
found_search_result(metta_example,"fromnumber",1,130,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (fc &kb (: ab (â\u0086\u0092 A B)) (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,134,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (fc &kb (: ab (â\u0086\u0092 A B)) (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,139,'../../../metta-examples-main/curried-chaining/curried-chainer.metta',"  (fc &kb (: a A) (fromNumber 3))")
found_search_result(metta_example,"fromnumber",1,18,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))")
found_search_result(metta_example,"bind!",1,32,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(bind! &kb (new-space))")
found_search_result(metta_example,"add-atom",1,33,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(add-atom &kb (: ab (â\u0086\u0092 A B)))")
found_search_result(metta_example,"add-atom",1,34,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(add-atom &kb (: bc (â\u0086\u0092 B C)))")
found_search_result(metta_example,"add-atom",1,35,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(add-atom &kb (: a A))")
found_search_result(metta_example,"bind!",1,38,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(bind! &rb (new-space))")
found_search_result(metta_example,"add-atom",1,39,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(add-atom &rb (: ModusPonens (->\n                               ;; Premises\n                               (â\u0086\u0092 $p $q)\n                               $p\n                               ;; Conclusion\n                               $q)))")
found_search_result(metta_example,"add-atom",1,45,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"!(add-atom &rb (: Deduction (->\n                             ;; Premises\n                             (â\u0086\u0092 $p $q)\n                             (â\u0086\u0092 $q $r)\n                             ;; Conclusion\n                             (â\u0086\u0092 $p $r))))")
found_search_result(metta_example,"match",1,59,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"   (match &kb (: $prf $ccln) (: $prf $ccln)))\n;; Recursive cases\n(= (bc (: $prf $ccln) (S $k))")
found_search_result(metta_example,"match",1,62,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"   (match &rb (: $ctor (-> $prms1 $prms2 $ccln))\n          (let* (((: $prf1 $prms1) (bc (: $prf1 $prms1) $k))\n                 ((: $prf2 $prms2) (bc (: $prf2 $prms2) $k))\n                 (($ctor $prf1 $prf2) $prf))\n            (: $prf $ccln))))\n\n;; Test backward chainer\n!(assertEqual")
found_search_result(metta_example,"fromnumber",1,79,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"  (bc (: $prf B) (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,82,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"  (bc (: $prf C) (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,86,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"  (bc (: $prf (â\u0086\u0092 A C)) (fromNumber 2))")
found_search_result(metta_example,"match",1,97,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"   (match &rb (: $ctor (-> $prms1 $prms2 $ccln))\n          (let (: $prf2 $prms2) (bc (: $prf2 $prms2) $k)\n               (frc (: ($ctor $prf1 $prf2) $ccln) $k))))\n(= (frc (: $prf2 $prms2) (S $k))")
found_search_result(metta_example,"match",1,101,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"   (match &rb (: $ctor (-> $prms1 $prms2 $ccln))\n          (let (: $prf1 $prms1) (bc (: $prf1 $prms1) $k)\n               (frc (: ($ctor $prf1 $prf2) $ccln) $k))))\n\n;; Test forward revertant chainer\n!(assertEqual")
found_search_result(metta_example,"fromnumber",1,110,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"  (frc (: a A) (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,115,'../../../metta-examples-main/polyward-chaining/pc-xp.metta',"  !(frc (: a A) (fromNumber 2))")
found_search_result(metta_example,"car-atom",1,10,'../../../metta-examples-main/perfect-numbers/basic.metta',"(= (sumh $xs) (if (== $xs ()) 0 (+ (sumh (cdr-atom $xs)) (car-atom $xs))))")
found_search_result(metta_example,"collapse",1,13,'../../../metta-examples-main/perfect-numbers/basic.metta',"(= (psum $x) (sumh (collapse (pcond (range 1 (- $x 1) 1) $x))))")
found_search_result(metta_example,"import!",1,2,'../../../metta-examples-main/hol/ListTest.metta',"!(import! &self metta:synthesis:Synthesize)")
found_search_result(metta_example,"cons",1,20,'../../../metta-examples-main/hol/ListTest.metta',"         (: Ind_app (=== (app (Cons $x $xs) $ys) (Cons $x (app $xs $ys))))")
found_search_result(metta_example,"cons",1,26,'../../../metta-examples-main/hol/ListTest.metta',"         (: Ind_rev (=== (rev (Cons $x $xs)) (app (rev $xs) (Cons $x Nil))))))\n\n;; Rule base\n(: rb (-> Atom))\n(= (rb) (superpose")
found_search_result(metta_example,"cons",1,50,'../../../metta-examples-main/hol/ListTest.metta',"                              (-> ($p $xs) ($p (Cons $x $xs))) ; induction")
found_search_result(metta_example,"cons",1,52,'../../../metta-examples-main/hol/ListTest.metta',"                              ($p (Cons $x $xs))))))\n\n;; For any list, Nil is the right identity of app\n(: NilRID_app (-> (List $a) Type))\n(=== (NilRID_app $xs) (=== (app $xs Nil) $xs))\n\n;; Prove that Nil is the right identity of app\n!(synthesize (: $proof (=== (app $xs Nil) $xs)) kb rb (fromNumber 3))\n")
found_search_result(metta_example,"import!",1,12,'../../../metta-examples-main/hol/NatTest.metta',"!(import! &self metta:synthesis:Synthesize)")
found_search_result(metta_example,"fromnumber",1,127,'../../../metta-examples-main/hol/NatTest.metta',"  (synthesize (: $prf (=== (=== (plus Z Z) Z) (ZRID_plus Z))) kb rb (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,146,'../../../metta-examples-main/hol/NatTest.metta',"  (synthesize (: $prf (ZRID_plus Z)) kb rb (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,171,'../../../metta-examples-main/hol/NatTest.metta',"  !(synthesize (: $prf (ZRID_plus $x)) kb rb (fromNumber 3))")
found_search_result(metta_example,"import!",1,6,'../../../metta-examples-main/hol/NatSimpleTest.metta',"!(import! &self metta:synthesis:Synthesize)")
found_search_result(metta_example,"fromnumber",1,98,'../../../metta-examples-main/hol/NatSimpleTest.metta',"  (synthesize (: $proof (=== (plus (S Z) Z) (S Z))) kb rb (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,129,'../../../metta-examples-main/hol/NatSimpleTest.metta',"  (synthesize (: $proof (=== (plus (S Z) (S Z)) (S (S Z)))) kb rb (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,139,'../../../metta-examples-main/hol/NatSimpleTest.metta',"  (synthesize (: $proof (=== (plus (fromNumber 1) (fromNumber 5)) (fromNumber 6))) kb rb (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,164,'../../../metta-examples-main/hol/NatSimpleTest.metta',"  !(synthesize (: $proof (=== (plus (fromNumber 2) (fromNumber 2)) (fromNumber 4))) kb rb (fromNumber 3))")
found_search_result(metta_example,"unify",1,9,'../../../metta-examples-main/synthesis/Unify.metta',"(= (unify $lterm $rterm $rewrite)\n   (case $rterm (($lterm $rewrite))))")
found_search_result(metta_example,"unify",1,16,'../../../metta-examples-main/synthesis/Unify.metta',"(= (unify* $pairs $rewrite)\n   (case $pairs\n     (;; Base case\n      (() $rewrite)\n      ;; Recursive step\n      ($pairs (let* (($head (car-atom $pairs))\n                     ($tail (cdr-atom $pairs)))\n                (case $head             ; By using a case we guaranty\n                                        ; that ill-formed inputs (non")
found_search_result(metta_example,"unify",1,28,'../../../metta-examples-main/synthesis/Unify.metta',"                    (unify $lterm $rterm\n                           (unify* $tail $rewrite))))))))))")
found_search_result(metta_example,"import!",1,2,'../../../metta-examples-main/synthesis/UnifyTest.metta',"!(import! &self  metta:synthesis:Unify)")
found_search_result(metta_example,"unify",1,6,'../../../metta-examples-main/synthesis/UnifyTest.metta',"!(unify (Link $x B) (Link A $y) (Link $x $y))")
found_search_result(metta_example,"unify",1,11,'../../../metta-examples-main/synthesis/UnifyTest.metta',"!(unify* (((Link $x B $z) (Link A $y $z))\n          ($z C))\n         (Link $x $y $z))")
found_search_result(metta_example,"unify",1,18,'../../../metta-examples-main/synthesis/UnifyTest.metta',"!(unify* (((: $ructor (-> $premise1 $premise2 $conclusion)) (: . (-> (-> $b $c) (-> $a $b) (-> $a $c))))\n          ((: ($ructor $proof1 $proof2) $conclusion) (: $term (-> Number Bool)))\n          ((: $proof1 $premise1) (: g (-> String Bool)))\n          ((: $proof2 $premise2) (: f (-> Number String))))\n         (: $term (-> Number Bool)))")
found_search_result(metta_example,"import!",1,2,'../../../metta-examples-main/synthesis/Synthesize.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"import!",1,3,'../../../metta-examples-main/synthesis/Synthesize.metta',";; !(import! &self metta:synthesis:Unify)")
found_search_result(metta_example,"let*",1,37,'../../../metta-examples-main/synthesis/Synthesize.metta',"   (let* (((: $ructor (-> $premise $conclusion)) ($rb))\n          ((: ($ructor $proof) $conclusion) $query)\n          ((: $proof $premise) (synthesize (: $proof $premise) $kb $rb $k)))\n     $query))\n;; Binary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,43,'../../../metta-examples-main/synthesis/Synthesize.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k)))\n     $query))\n;; Trinary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,50,'../../../metta-examples-main/synthesis/Synthesize.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k)))\n     $query))\n;; Quaternary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,58,'../../../metta-examples-main/synthesis/Synthesize.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3 $proof4) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k))\n          ((: $proof4 $premise4) (synthesize (: $proof4 $premise4) $kb $rb $k)))\n     $query))\n;; Quintenary rule\n(= (synthesize $query $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,67,'../../../metta-examples-main/synthesis/Synthesize.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $premise3 $premise4 $premise5 $conclusion)) ($rb))\n          ((: ($ructor $proof1 $proof2 $proof3 $proof4 $proof5) $conclusion) $query)\n          ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $kb $rb $k))\n          ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $kb $rb $k))\n          ((: $proof3 $premise3) (synthesize (: $proof3 $premise3) $kb $rb $k))\n          ((: $proof4 $premise4) (synthesize (: $proof4 $premise4) $kb $rb $k))\n          ((: $proof5 $premise5) (synthesize (: $proof5 $premise5) $kb $rb $k)))\n     $query))")
found_search_result(metta_example,"cons",1,15,'../../../metta-examples-main/logic/puzzle.metta',"; convert (a b c) to (Cons a (Cons b (Cons c Nil)))")
found_search_result(metta_example,"cdr-atom",1,18,'../../../metta-examples-main/logic/puzzle.metta',"    (if (== () $x) Nil (let $cdr (cdr-atom $x)\n                                (Cons (car-atom $x) (makelist $cdr)))\n    )")
found_search_result(metta_example,"cons",1,32,'../../../metta-examples-main/logic/puzzle.metta',"(= (memb $X (Cons $X $Tail)) True)")
found_search_result(metta_example,"cons",1,36,'../../../metta-examples-main/logic/puzzle.metta',"(= (memb $X (Cons $H $Tail))\n    (memb $X $Tail))")
found_search_result(metta_example,"get-metatype",1,46,'../../../metta-examples-main/logic/puzzle.metta',"    (let $type (get-metatype $x) (if (== $type Variable) True False)))\n(= (nth-var-iter $index (Cons $H $Tail) $item $base)")
found_search_result(metta_example,"cons",1,50,'../../../metta-examples-main/logic/puzzle.metta',"(= (nth-var (Cons $H $Tail) $item $prev_head $N $base)\n        (let $M (+ $N 1) (nth-var $Tail $item $H $M $base)))")
found_search_result(metta_example,"cons",1,55,'../../../metta-examples-main/logic/puzzle.metta',"(= (nth $index (Cons $H $Tail) $item $base)\n    (if (is-variable $index)\n            (nth-var-iter $index (Cons $H $Tail) $item $base)\n            (nth-det $index (Cons $H $Tail) $item $base)) )")
found_search_result(metta_example,"cons",1,62,'../../../metta-examples-main/logic/puzzle.metta',"(= (nth-det $index (Cons $H $Tail) $item $base)\n        (if (eq $index $base) (eq $H $item) (nth-det (- $index 1) $Tail $item 1)))")
found_search_result(metta_example,"cons",1,73,'../../../metta-examples-main/logic/puzzle.metta',"(= (nextto-impl $x $y (Cons $x (Cons $y $Tail))) True)")
found_search_result(metta_example,"cons",1,77,'../../../metta-examples-main/logic/puzzle.metta',"(= (nextto-impl $x $y (Cons $head $Tail))\n    (nextto-impl $x $y $Tail))")
found_search_result(metta_example,"union",1,4,'../../../metta-examples-main/fizzbuzz/constructive.metta',"; !(union (range 1 13 1) (range 10 20 2))")
found_search_result(metta_example,"intersection",1,5,'../../../metta-examples-main/fizzbuzz/constructive.metta',"; !(intersection (range 1 13 1) (range 10 20 2))")
found_search_result(metta_example,"subtraction",1,6,'../../../metta-examples-main/fizzbuzz/constructive.metta',"; !(subtraction (range 10 20 2) (range 1 16 1))")
found_search_result(metta_example,"let*",1,9,'../../../metta-examples-main/fizzbuzz/constructive.metta',"  (let* (($m3 (collapse (range 3 $n 3)))\n         ($m5 (collapse (range 5 $n 5)))\n         ($r (collapse (range 1 $n 1)))\n         ($m35 (collapse (intersection (superpose $m3) (superpose $m5))))\n         ($m3n5 (collapse (subtraction (superpose $m3) (superpose $m5))))\n         ($m5n3 (collapse (subtraction (superpose $m5) (superpose $m3))))\n         ($m3m5 (collapse (union (superpose $m3) (superpose $m5))))\n         ($n3n5 (collapse (subtraction (superpose $r) (superpose $m3m5)))))\n        (union (union (FizzBuzz (superpose $m35)) (Nothing (superpose $n3n5))) (union (Fizz (superpose $m3n5)) (Buzz (superpose $m5n3))))))")
found_search_result(metta_example,"unique",1,19,'../../../metta-examples-main/fizzbuzz/constructive.metta',"!(unique (fizzbuzz 50))")
found_search_result(metta_example,"case",1,4,'../../../metta-examples-main/fizzbuzz/simple.metta',"(= (fizzbuzz_ $fizz $buzz $n) (case ($fizz $buzz) (\n    ((0 0) (FizzBuzz $n))\n    ((0 $_1) (Fizz $n))\n    (($_2 0) (Buzz $n))\n    ($_3 (Nothing $n))\n)))")
found_search_result(metta_example,"import!",1,2,'../../../metta-examples-main/common/EqualityTypeTest.metta',"!(import! &self metta:common:EqualityType)")
found_search_result(metta_example,"import!",1,2,'../../../metta-examples-main/common/ListTest.metta',"!(import! &self metta:common:List)")
found_search_result(metta_example,"cons",1,9,'../../../metta-examples-main/common/ListTest.metta',"!(== (Cons 1 Nil) (Cons 1 Nil))")
found_search_result(metta_example,"cons",1,13,'../../../metta-examples-main/common/ListTest.metta',"!(sort (Cons 1 Nil))")
found_search_result(metta_example,"cons",1,14,'../../../metta-examples-main/common/ListTest.metta',"!(sort (Cons 2 (Cons 1 Nil)))")
found_search_result(metta_example,"cons",1,15,'../../../metta-examples-main/common/ListTest.metta',"!(sort (Cons 3 (Cons 1 (Cons 2 Nil))))")
found_search_result(metta_example,"cons",1,19,'../../../metta-examples-main/common/ListTest.metta',"!(elem 1 (Cons 3 (Cons 1 (Cons 2 Nil))))")
found_search_result(metta_example,"cons",1,20,'../../../metta-examples-main/common/ListTest.metta',"!(elem 5 (Cons 3 (Cons 1 (Cons 2 Nil))))")
found_search_result(metta_example,"cons",1,24,'../../../metta-examples-main/common/ListTest.metta',"!(uniq (Cons 2 (Cons 3 (Cons 1 (Cons 2 Nil)))))")
found_search_result(metta_example,"cons",1,25,'../../../metta-examples-main/common/ListTest.metta',"!(uniq (Cons 2 (Cons 3 (Cons 3 (Cons 2 Nil)))))")
found_search_result(metta_example,"fromnumber",1,38,'../../../metta-examples-main/common/Num.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))")
found_search_result(metta_example,"fromnumber",1,58,'../../../metta-examples-main/common/Num.metta',"(= (ceil $n) (fromNat (fromNumber $n)))")
found_search_result(metta_example,"import!",1,4,'../../../metta-examples-main/common/In.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"import!",1,5,'../../../metta-examples-main/common/In.metta',"!(import! &self metta:common:OrderedSet)")
found_search_result(metta_example,"import!",1,4,'../../../metta-examples-main/common/InTest.metta',"!(import! &self metta:common:In)")
found_search_result(metta_example,"import!",1,5,'../../../metta-examples-main/common/InTest.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"import!",1,6,'../../../metta-examples-main/common/InTest.metta',"!(import! &self metta:synthesis:Synthesize)")
found_search_result(metta_example,"import!",1,2,'../../../metta-examples-main/common/OrderedSet.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"import!",1,2,'../../../metta-examples-main/common/OrderedSetTest.metta',"!(import! &self metta:common:OrderedSet)")
found_search_result(metta_example,"import!",1,1,'../../../metta-examples-main/common/MaybeTest.metta',"!(import! &self metta:common:Maybe)")
found_search_result(metta_example,"import!",1,2,'../../../metta-examples-main/common/NumTest.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"import!",1,3,'../../../metta-examples-main/common/NumTest.metta',"!(import! &self metta:synthesis:Synthesize)")
found_search_result(metta_example,"fromnumber",1,6,'../../../metta-examples-main/common/NumTest.metta',"!(assertEqual (fromNumber 1) (S Z))")
found_search_result(metta_example,"fromnumber",1,23,'../../../metta-examples-main/common/NumTest.metta',"  (synthesize (: $proof (â\u008D\u0083 (fromNumber 1) (fromNumber 3))) kb rb (S Z))")
found_search_result(metta_example,"fromnumber",1,24,'../../../metta-examples-main/common/NumTest.metta',"  (: (SuccMonotonicity ZeroLTSucc) (â\u008D\u0083 (fromNumber 1) (fromNumber 3))))\n!(assertEqual                           ; 2 < 7")
found_search_result(metta_example,"fromnumber",1,26,'../../../metta-examples-main/common/NumTest.metta',"  (synthesize (: $proof (â\u008D\u0083 (fromNumber 2) (fromNumber 7))) kb rb (fromNumber 5))")
found_search_result(metta_example,"fromnumber",1,27,'../../../metta-examples-main/common/NumTest.metta',"  (: (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)) (â\u008D\u0083 (fromNumber 2) (fromNumber 7))))")
found_search_result(metta_example,"cons",1,12,'../../../metta-examples-main/common/List.metta',"(= (insert $x Nil) (Cons $x Nil))")
found_search_result(metta_example,"cons",1,13,'../../../metta-examples-main/common/List.metta',"(= (insert $x (Cons $head $tail))\n   (if (< $x $head)\n       (Cons $x (Cons $head $tail))\n       (Cons $head (insert $x $tail))))")
found_search_result(metta_example,"cons",1,21,'../../../metta-examples-main/common/List.metta',"(= (sort (Cons $head $tail)) (insert $head (sort $tail)))")
found_search_result(metta_example,"cons",1,26,'../../../metta-examples-main/common/List.metta',"(= (elem $x (Cons $head $tail)) (if (== $x $head) True (elem $x $tail)))")
found_search_result(metta_example,"cons",1,31,'../../../metta-examples-main/common/List.metta',"(= (uniq_ $acc (Cons $head $tail))\n   (if (elem $head $acc)\n       (uniq_ $acc $tail)\n       (Cons $head (uniq_ (Cons $head $acc) $tail))))")
found_search_result(metta_example,"cons",1,42,'../../../metta-examples-main/common/List.metta',"(= (insert_uniq $x Nil) (Cons $x Nil))")
found_search_result(metta_example,"cons",1,43,'../../../metta-examples-main/common/List.metta',"(= (insert_uniq $x (Cons $head $tail))\n   (if (== $x $head)\n       (Cons $head $tail)\n       (if (< $x $head)\n           (Cons $x (Cons $head $tail))\n           (Cons $head (insert_uniq $x $tail)))))")
found_search_result(metta_example,"union",1,3,'../../../metta-examples-main/prob-dep-types/prob_dep_types.metta',"(= (Union $t1 $t2) $t1)")
found_search_result(metta_example,"union",1,4,'../../../metta-examples-main/prob-dep-types/prob_dep_types.metta',"(= (Union $t1 $t2) $t2)")
found_search_result(metta_example,"union",1,5,'../../../metta-examples-main/prob-dep-types/prob_dep_types.metta',"(: random (-> $t1 $t2 (Union $t1 $t2)))")
found_search_result(metta_example,"union",1,45,'../../../metta-examples-main/prob-dep-types/prob_dep_types.metta',"(= (Bool_U_Color) (Union Bool Color))")
found_search_result(metta_example,"union",1,3,'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"(= (Union $t1 $t2) $t1)")
found_search_result(metta_example,"union",1,4,'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"(= (Union $t1 $t2) $t2)")
found_search_result(metta_example,"match",1,77,'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"!(match &self (: A $t) ($t))")
found_search_result(metta_example,"match",1,79,'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"  (match &self (: A $t) ($t))")
found_search_result(metta_example,"match",1,85,'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"!(match &self (: a $t) ($t))")
found_search_result(metta_example,"match",1,87,'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"  (match &self (: a $t) ($t))")
found_search_result(metta_example,"match",1,89,'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"!(match &self (: a' $t) ($t))")
found_search_result(metta_example,"match",1,91,'../../../metta-examples-main/prob-dep-types/inf_order_probs.metta',"  (match &self (: a' $t) ($t))")
found_search_result(metta_example,"fromnumber",1,18,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))")
found_search_result(metta_example,"let*",1,35,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((â\u008A¢ $premise1 $premise2 $conclusion) ($rb))\n          ((â\u008A¢ $premise2) ($kb)))\n     (fc_entail (â\u008A¢ $conclusion) $kb $rb $k)))\n(= (fc_entail (â\u008A¢ $premise2) $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,39,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((â\u008A¢ $premise1 $premise2 $conclusion) ($rb))\n          ((â\u008A¢ $premise1) ($kb)))\n     (fc_entail (â\u008A¢ $conclusion) $kb $rb $k)))\n\n;; Knowledge base\n(: kb_entail (-> Atom))\n(= (kb_entail) (superpose ((â\u008A¢ (â\u0086\u0092 A B))\n                           (â\u008A¢ (â\u0086\u0092 B C))\n                           (â\u008A¢ A))))")
found_search_result(metta_example,"fromnumber",1,60,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_entail (â\u008A¢ A) kb_entail rb_entail (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,63,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_entail (â\u008A¢ (â\u0086\u0092 A B)) kb_entail rb_entail (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,65,'../../../metta-examples-main/forward-chaining/fc-xp.metta',";; !(fc_entail (â\u008A¢ (â\u0086\u0092 $x $y)) kb_entail rb_entail (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,68,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"       (fc_entail (â\u008A¢ (â\u0086\u0092 $x $y)) kb_entail rb_entail (fromNumber 2)))\n  ((â\u008A¢ (â\u0086\u0092 A B)) (â\u008A¢ B) (â\u008A¢ C) (â\u008A¢ (â\u0086\u0092 B C))))\n\n;;;;;;;;;;;;;;;;;\n;; Bare Entail ;;\n;;;;;;;;;;;;;;;;;\n\n;; Variant of entail where â\u008A¢ is not wrapped around the knowledge base.\n")
found_search_result(metta_example,"let*",1,85,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((â\u008A¢ $premise1 $premise2 $conclusion) ($rb))\n          ($premise2 ($kb)))\n     (fc_bare $conclusion $kb $rb $k)))\n(= (fc_bare $premise2 $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,89,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((â\u008A¢ $premise1 $premise2 $conclusion) ($rb))\n          ($premise1 ($kb)))\n     (fc_bare $conclusion $kb $rb $k)))\n\n;; Knowledge base\n(: kb_bare (-> Atom))\n(= (kb_bare) (superpose ((â\u0086\u0092 A B)\n                         (â\u0086\u0092 B C)\n                         A)))")
found_search_result(metta_example,"fromnumber",1,110,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_bare A kb_bare rb_bare (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,113,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_bare (â\u0086\u0092 A B) kb_bare rb_bare (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,117,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"       (fc_bare (â\u0086\u0092 $x $y) kb_bare rb_bare (fromNumber 2)))\n  ((â\u0086\u0092 A B) B C (â\u0086\u0092 B C)))\n\n;;;;;;;;;;;;;;\n;; Equality ;;\n;;;;;;;;;;;;;;\n\n! \"=== Equality ===\"\n")
found_search_result(metta_example,"fromnumber",1,143,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_eq A kb_eq (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,146,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_eq (â\u0086\u0092 A B) kb_eq (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,150,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"       (fc_eq (â\u0086\u0092 $x $y) kb_eq (fromNumber 2)))\n  ((â\u0086\u0092 A B) B C (â\u0086\u0092 B C)))\n\n;;;;;;;;;;;;;;;;;;;;;;;\n;; Bare Entail Match ;;\n;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Like bare entail but let is replaced by match\n")
found_search_result(metta_example,"bind!",1,162,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(bind! &kb_bem (new-space))")
found_search_result(metta_example,"add-atom",1,163,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_bem (â\u0086\u0092 A B))")
found_search_result(metta_example,"add-atom",1,164,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_bem (â\u0086\u0092 B C))")
found_search_result(metta_example,"add-atom",1,165,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_bem A)")
found_search_result(metta_example,"bind!",1,168,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(bind! &rb_bem (new-space))")
found_search_result(metta_example,"add-atom",1,169,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &rb_bem (â\u008A¢\n                    ;; Premises\n                    (â\u0086\u0092 $p $q)\n                    $p\n                    ;; Conclusion\n                    $q))")
found_search_result(metta_example,"match",1,182,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (match &rb_bem (â\u008A¢ $premise1 $premise2 $conclusion)\n          (match &kb_bem $premise2 (fc_bem $conclusion $k))))\n(= (fc_bem $premise2 (S $k))")
found_search_result(metta_example,"match",1,185,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (match &rb_bem (â\u008A¢ $premise1 $premise2 $conclusion)\n          (match &kb_bem $premise1 (fc_bem $conclusion $k))))\n\n;; Test forward chainer\n!(assertEqualToResult")
found_search_result(metta_example,"fromnumber",1,190,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_bem A (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,193,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_bem (â\u0086\u0092 A B) (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,196,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (match &kb_bem (â\u0086\u0092 $x $y) (fc_bem (â\u0086\u0092 $x $y) (fromNumber 2)))")
found_search_result(metta_example,"bind!",1,208,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(bind! &kb_em (new-space))")
found_search_result(metta_example,"add-atom",1,209,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_em (â\u0086\u0092 A B))")
found_search_result(metta_example,"add-atom",1,210,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_em (â\u0086\u0092 B C))")
found_search_result(metta_example,"add-atom",1,211,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"!(add-atom &kb_em A)")
found_search_result(metta_example,"match",1,219,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"(= (fc_em (â\u0086\u0092 $p $q) (S $k)) (match &kb_em $p (fc_em $q $k)))")
found_search_result(metta_example,"match",1,220,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"(= (fc_em $p (S $k)) (match &kb_em (â\u0086\u0092 $p $q) (fc_em $q $k)))")
found_search_result(metta_example,"fromnumber",1,224,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_em A (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,227,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_em (â\u0086\u0092 A B) (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,230,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (match &kb_em (â\u0086\u0092 $x $y) (fc_em (â\u0086\u0092 $x $y) (fromNumber 2)))")
found_search_result(metta_example,"let*",1,245,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))\n          ((: $proof2 $premise2) ($kb)))\n     (fc_dtl (: ($ructor $proof1 $proof2) $conclusion) $kb $rb $k)))\n(= (fc_dtl (: $proof2 $premise2) $kb $rb (S $k))")
found_search_result(metta_example,"let*",1,249,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"   (let* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rb))\n          ((: $proof1 $premise1) ($kb)))\n     (fc_dtl (: ($ructor $proof1 $proof2) $conclusion) $kb $rb $k)))\n\n;; Knowledge base\n(: kb_dtl (-> Atom))\n(= (kb_dtl) (superpose ((: ab (â\u0086\u0092 A B))\n                        (: bc (â\u0086\u0092 B C))\n                        (: a A))))")
found_search_result(metta_example,"fromnumber",1,270,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_dtl (: a A) kb_dtl rb_dtl (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,275,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"  (fc_dtl (: ab (â\u0086\u0092 A B)) kb_dtl rb_dtl (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,281,'../../../metta-examples-main/forward-chaining/fc-xp.metta',"       (fc_dtl (: $prf (â\u0086\u0092 $x $y)) kb_dtl rb_dtl (fromNumber 2)))\n  ((: ab (â\u0086\u0092 A B))")
found_search_result(metta_example,"fromnumber",1,18,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))")
found_search_result(metta_example,"let*",1,38,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((â\u008A¢ $premise1 $premise2 $conclusion) ($rb))\n          ($premise1 (bc_bare $premise1 $kb $rb $k))\n          ($premise2 (bc_bare $premise2 $kb $rb $k)))\n     $conclusion))\n\n;; Knowledge base\n(: kb_bare (-> Atom))\n(= (kb_bare) (superpose ((â\u0086\u0092 A B)\n                         (â\u0086\u0092 B C)")
found_search_result(metta_example,"fromnumber",1,63,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bare B kb_bare rb_bare (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,66,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bare C kb_bare rb_bare (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,69,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bare D kb_bare rb_bare (fromNumber 4))")
found_search_result(metta_example,"let*",1,92,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((â\u0086\u0092 $p $q) (bc_eq (â\u0086\u0092 $p $q) $kb $k)) ; premise1\n          ($p (bc_eq $p $kb $k)))              ; premise2\n     $q))                                      ; conclusion\n;; Recursive step (deduction)\n(= (bc_eq (â\u0086\u0092 $p $r) $kb (S $k))")
found_search_result(metta_example,"let*",1,97,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((â\u0086\u0092 $p $q) (bc_eq (â\u0086\u0092 $p $q) $kb $k))  ; premise1\n          ((â\u0086\u0092 $q $r) (bc_eq (â\u0086\u0092 $q $r) $kb $k))) ; premise2\n     (â\u0086\u0092 $p $r)))                                ; conclusion\n\n;; Test backward chainer\n!(assertEqual")
found_search_result(metta_example,"fromnumber",1,106,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_eq B kb_eq (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,109,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_eq C kb_eq (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,113,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_eq (â\u0086\u0092 A B) kb_eq (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,116,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_eq (â\u0086\u0092 B C) kb_eq (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,119,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_eq (â\u0086\u0092 A C) kb_eq (fromNumber 2))")
found_search_result(metta_example,"bind!",1,131,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(bind! &kb_bem (new-space))")
found_search_result(metta_example,"add-atom",1,132,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_bem (â\u0086\u0092 A B))")
found_search_result(metta_example,"add-atom",1,133,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_bem (â\u0086\u0092 B C))")
found_search_result(metta_example,"add-atom",1,134,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_bem A)")
found_search_result(metta_example,"bind!",1,137,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(bind! &rb_bem (new-space))")
found_search_result(metta_example,"add-atom",1,138,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &rb_bem (â\u008A¢\n                    ;; Premises\n                    (â\u0086\u0092 $p $q)\n                    $p\n                    ;; Conclusion\n                    $q))")
found_search_result(metta_example,"add-atom",1,144,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &rb_bem (â\u008A¢\n                    ;; Premises\n                    (â\u0086\u0092 $p $q)\n                    (â\u0086\u0092 $q $r)\n                    ;; Conclusion\n                    (â\u0086\u0092 $p $r)))")
found_search_result(metta_example,"match",1,155,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (match &kb_bem $conclusion $conclusion))\n;; Recursive step\n(= (bc_bem $conclusion (S $k))")
found_search_result(metta_example,"match",1,158,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (match &rb_bem (â\u008A¢ $premise1 $premise2 $conclusion)\n          (let* (($premise1 (bc_bem $premise1 $k))\n                 ($premise2 (bc_bem $premise2 $k)))\n            $conclusion)))\n\n;; Test backward chainer\n!(assertEqual")
found_search_result(metta_example,"fromnumber",1,168,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bem B (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,171,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bem C (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,175,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bem (â\u0086\u0092 A B) (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,178,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bem (â\u0086\u0092 B C) (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,181,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_bem (â\u0086\u0092 A C) (fromNumber 2))")
found_search_result(metta_example,"bind!",1,193,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(bind! &kb_em (new-space))")
found_search_result(metta_example,"add-atom",1,194,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_em (â\u0086\u0092 A B))")
found_search_result(metta_example,"add-atom",1,195,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_em (â\u0086\u0092 B C))")
found_search_result(metta_example,"add-atom",1,196,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_em A)")
found_search_result(metta_example,"match",1,203,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (match &kb_em $conclusion $conclusion))\n;; Recursive step (modus ponens)\n(= (bc_em $q (S $k))")
found_search_result(metta_example,"let*",1,206,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((â\u0086\u0092 $p $q) (bc_em (â\u0086\u0092 $p $q) $k)) ; premise1\n          ($p (bc_em $p $k)))              ; premise2\n     $q))                                  ; conclusion\n;; Recursive step (deduction)\n(= (bc_em (â\u0086\u0092 $p $r) (S $k))")
found_search_result(metta_example,"let*",1,211,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((â\u0086\u0092 $p $q) (bc_em (â\u0086\u0092 $p $q) $k))  ; premise1\n          ((â\u0086\u0092 $q $r) (bc_em (â\u0086\u0092 $q $r) $k))) ; premise2\n     (â\u0086\u0092 $p $r)))                            ; conclusion\n\n;; Test backward chainer\n!(assertEqual")
found_search_result(metta_example,"fromnumber",1,220,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_em B (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,223,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_em C (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,227,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_em (â\u0086\u0092 A B) (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,230,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_em (â\u0086\u0092 B C) (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,233,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_em (â\u0086\u0092 A C) (fromNumber 2))")
found_search_result(metta_example,"bind!",1,247,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(bind! &kb_dem (new-space))")
found_search_result(metta_example,"add-atom",1,248,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_dem (: ab (â\u0086\u0092 A B)))")
found_search_result(metta_example,"add-atom",1,249,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_dem (: bc (â\u0086\u0092 B C)))")
found_search_result(metta_example,"add-atom",1,250,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"!(add-atom &kb_dem (: a A))")
found_search_result(metta_example,"match",1,257,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (match &kb_dem (: $prf $conclusion) (: $prf $conclusion)))\n;; Recursive step (modus ponens)\n(= (bc_dem (: $prf_q $q) (S $k))")
found_search_result(metta_example,"let*",1,260,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((: $prf_pq (â\u0086\u0092 $p $q)) (bc_dem (: $prf_pq (â\u0086\u0092 $p $q)) $k)) ; premise1\n          ((: $prf_p $p) (bc_dem (: $prf_p $p) $k))                 ; premise2\n          ((: (ModusPonens $prf_pq $prf_p) $q) (: $prf_q $q)))      ; conclusion\n     (: $prf_q $q)))\n;; Recursive step (deduction)\n(= (bc_dem (: $prf_pr (â\u0086\u0092 $p $r)) (S $k))")
found_search_result(metta_example,"let*",1,266,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"   (let* (((: $prf_pq (â\u0086\u0092 $p $q)) (bc_dem (: $prf_pq (â\u0086\u0092 $p $q)) $k))          ; premise1\n          ((: $prf_qr (â\u0086\u0092 $q $r)) (bc_dem (: $prf_qr (â\u0086\u0092 $q $r)) $k))          ; premise2\n          ((: (Deduction $prf_pq $prf_qr) (â\u0086\u0092 $p $r)) (: $prf_pr (â\u0086\u0092 $p $r)))) ; conclusion\n     (: $prf_pr (â\u0086\u0092 $p $r))))\n\n;; Test backward chainer\n!(assertEqual")
found_search_result(metta_example,"fromnumber",1,279,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_dem (: $prf B) (fromNumber 1))")
found_search_result(metta_example,"fromnumber",1,282,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_dem (: $prf C) (fromNumber 2))")
found_search_result(metta_example,"fromnumber",1,286,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_dem (: $prf (â\u0086\u0092 A B)) (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,289,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_dem (: $prf (â\u0086\u0092 B C)) (fromNumber 0))")
found_search_result(metta_example,"fromnumber",1,292,'../../../metta-examples-main/backward-chaining/bc-xp.metta',"  (bc_dem (: $prf (â\u0086\u0092 A C)) (fromNumber 2))")
found_search_result(metta_example,"transfer!",2,3,'../../../metta-examples-main/recursion-schemes/src/schemes.metta',"!(transfer! \"base.metta\")")
found_search_result(metta_example,"import!",2,1,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"; !(import! &self logistics-i-1)")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"; !(import! &self blocks-i-1)")
found_search_result(metta_example,"import!",2,3,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(import! &self blocks-i-0)")
found_search_result(metta_example,"collapse",2,9,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (subset $subset $set) (if (== (collapse (subtraction (superpose $subset) (intersection (superpose $set) (superpose $subset)))) ()) True False))")
found_search_result(metta_example,"collapse",2,15,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (subset (collapse (pre (pick-up A))) (collapse (valuation (state 0))))\n              True)")
found_search_result(metta_example,"match",2,34,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (arity $prop) (match &self (arity $prop $n) $n))")
found_search_result(metta_example,"subtraction",2,43,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"  (union (subtraction (valuation (state $idx)) (eff-neg $action)) (eff-pos $action))")
found_search_result(metta_example,"new-state",2,55,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(bind! state# (new-state 1))")
found_search_result(metta_example,"get-state",2,56,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (idx) (- (get-state state#) 1))")
found_search_result(metta_example,"let*",2,60,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"   (let* (($current_id (get-state state#))\n          ($_1 (add-atom &self (= (valuation (state $current_id))\n                               (superpose $conditions))))\n          ($_2 (change-state! state# (+ (get-state state#) 1))))\n    $current_id))\n\n!(save ((holding A) (ontable B) (ontable C) (clear B) (clear C)))\n;!(save ((test s2) (on smt smt)))\n")
found_search_result(metta_example,"collapse",2,74,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (seteq (collapse (valuation (state 0)))\n                     ((ontable A) (ontable B) (ontable C) (clear A) (clear B) (clear C) (handempty)))\n               True)")
found_search_result(metta_example,"collapse",2,78,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (match &self (= (valuation (state $idx)) $props) (if (seteq (collapse $props) (collapse (valuation (state 0)))) $idx (empty)))\n               0)")
found_search_result(metta_example,"match",2,83,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (find_state $props) (match &self (= (valuation (state $idx)) $props2)\n                       (if (seteq $props (collapse $props2)) $idx (empty))))")
found_search_result(metta_example,"collapse",2,87,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (find_state (collapse (valuation (state 0))))\n               0)")
found_search_result(metta_example,"case",2,101,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"    (case (find_state $conditions)\n         ((Empty (save $conditions))\n          ($idx $idx))\n    )")
found_search_result(metta_example,"get-state",2,108,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',";               (- (get-state state#) 1))\n\n; !(assertEqual (valuation (state (- (get-state state#) 1)))")
found_search_result(metta_example,"match",2,120,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (match &self (= (valuation (state $n)) $r) $n)\n              (superpose (0 1)))")
found_search_result(metta_example,"collapse",2,127,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (valuation (state (save (collapse (eval (state 0) (pick-up A))))))\n              (superpose ((holding A) (ontable B) (ontable C) (clear B) (clear C))))")
found_search_result(metta_example,"collapse",2,130,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (valuation (state (save (collapse (eval (state (idx)) (stack A B))))))\n              (superpose ((on A B) (handempty)\n                          (clear A) (clear C)\n                          (ontable B) (ontable C))))")
found_search_result(metta_example,"collapse",2,138,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"  (save (collapse (eval (state $idx) $action)))")
found_search_result(metta_example,"collapse",2,155,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (can-apply (state $idx) $action) (subset (collapse (pre $action)) (collapse (valuation (state $idx)))))")
found_search_result(metta_example,"match",2,168,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (all-actions) (match &self (action $name) $name))")
found_search_result(metta_example,"match",2,175,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (oftype $type) (match &self (isa $name $type) $name))")
found_search_result(metta_example,"match",2,184,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"; (= (ground $action) (fmap oftype (match &self (types $action ($x $y)) ($action $x $y))))")
found_search_result(metta_example,"match",2,186,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ()) ($action)))")
found_search_result(metta_example,"match",2,187,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x)) ($action (oftype $x))))")
found_search_result(metta_example,"match",2,188,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x $y)) ($action (oftype $x) (oftype $y))))")
found_search_result(metta_example,"match",2,189,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x $y $z)) ($action (oftype $x) (oftype $y) (oftype $z))))")
found_search_result(metta_example,"collapse",2,221,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (partial-apply-test $a) (if (can-apply (state 0) $a) ($a (collapse (eval (state 0) $a))) (empty)))")
found_search_result(metta_example,"let*",2,233,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"        (let* (($idx2 (save_if_new (collapse (eval (state $idx) $a))))\n              ($_1 (add-atom &self (edge (state $idx) (state $idx2) $a))))\n              (edge (state $idx) (state $idx2) $a))")
found_search_result(metta_example,"new-state",2,249,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(bind! expand# (new-state 0))")
found_search_result(metta_example,"get-state",2,250,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"(= (expand) (if (< (get-state expand#) (get-state state#))\n                (let* (($_1 (add-edge (state (get-state expand#))(ground (all-actions))))\n                      ($_2 (change-state! expand# (+ (get-state expand#) 1)))\n                      ($_3 (expand)))\n                      (get-state expand#)\n                )\n             ()\n            )\n)")
found_search_result(metta_example,"get-state",2,263,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(get-state expand#)")
found_search_result(metta_example,"get-state",2,264,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(get-state state#)")
found_search_result(metta_example,"match",2,267,'../../../metta-examples-main/strips/strips-to-metta-improved/queries.metta',"!(match &self (edge $x $y $z) (edge $x $y $z))")
found_search_result(metta_example,"import!",2,1,'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta',"; !(import! &self blocks-domain.metta)")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta',"!(import! &self logistics-i-1_flat.metta)")
found_search_result(metta_example,"match",2,6,'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta'," (match &self (precondition $action $y) $y))\n\n; !(preconditions pick-up)\n!(preconditions FLY-AIRPLANE)       ; > (at airplane loc-from)\n\n\n; GET ARITY OF PROPOSITION\n(= (arity $prop)")
found_search_result(metta_example,"match",2,14,'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (arity $prop $n) $n))\n!(arity at)                         ; > 2\n\n\n; GET ALL PROPOSITIONS THAT HOLD IN A STATE\n(= (holds $state)")
found_search_result(metta_example,"match",2,20,'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (holds $state $p) $p))\n\n !(holds init)                  ; >[(in-city pos2 cit2), (at obj23 pos2), (in-city pos1 cit1), (at tru1 pos1), (at obj11 pos1), (in-city apt1 cit1), (at obj21 pos2), (at tru2 pos2), (at apn1 apt2), (at obj13 pos1), (at obj22 pos2), (in-city apt2 cit2), (at obj12 pos1)]\n\n\n\n; CHECK WHETHER PROPOSITION HOLDS IN A STATE\n(= (holds $state $prop)")
found_search_result(metta_example,"match",2,28,'../../../metta-examples-main/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (holds $state $prop) $prop))\n\n!(holds init (at obj13 pos1))           ; > [(at obj13 pos1)]\n!(holds init (at smt pos1))             ; > []")
found_search_result(metta_example,"import!",2,4,'../../../metta-examples-main/sumo/located/located-test.metta',"!(import! &self ../../synthesis/Synthesize.metta)")
found_search_result(metta_example,"import!",2,7,'../../../metta-examples-main/sumo/located/located-test.metta',"!(import! &kb located.kif.metta)")
found_search_result(metta_example,"import!",2,10,'../../../metta-examples-main/sumo/located/located-test.metta',"!(import! &rb ../rule-base.metta)")
found_search_result(metta_example,"bind!",2,24,'../../../metta-examples-main/sumo/located/located-test.metta',"!(bind! &labelled-kb (new-space))")
found_search_result(metta_example,"match",2,25,'../../../metta-examples-main/sumo/located/located-test.metta',"!(match &kb $x (add-atom &labelled-kb (: (WitnessOf $x) $x)))")
found_search_result(metta_example,"match",2,29,'../../../metta-examples-main/sumo/located/located-test.metta',"(= (kb) (match &labelled-kb $x $x))")
found_search_result(metta_example,"match",2,33,'../../../metta-examples-main/sumo/located/located-test.metta',"(= (rb) (match &rb $x $x))")
found_search_result(metta_example,"fromnumber",2,57,'../../../metta-examples-main/sumo/located/located-test.metta',"!(synthesize (: $proof (located John SanJose)) kb rb (fromNumber 3))")
found_search_result(metta_example,"import!",2,7,'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(import! &self ../../synthesis/Synthesize.metta)")
found_search_result(metta_example,"import!",2,10,'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(import! &kb orientation.kif.metta)")
found_search_result(metta_example,"import!",2,13,'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(import! &rb ../rule-base.metta)")
found_search_result(metta_example,"bind!",2,27,'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(bind! &labelled-kb (new-space))")
found_search_result(metta_example,"match",2,28,'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(match &kb $x (add-atom &labelled-kb (: (WitnessOf $x) $x)))")
found_search_result(metta_example,"match",2,32,'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"(= (kb) (match &labelled-kb $x $x))")
found_search_result(metta_example,"match",2,36,'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"(= (rb) (match &rb $x $x))")
found_search_result(metta_example,"fromnumber",2,42,'../../../metta-examples-main/sumo/orientation/orientation-test.metta',"!(synthesize (: $proof (orientation A C Right)) kb rb (fromNumber 2))")
found_search_result(metta_example,"import!",2,18,'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatch.metta',"!(import! &self metta:common:OrderedSet)")
found_search_result(metta_example,"import!",2,19,'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatch.metta',"!(import! &self metta:common:truthvalue:EvidentialTruthValue)")
found_search_result(metta_example,"import!",2,20,'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatch.metta',"!(import! &self metta:common:formula:ImplicationDirectIntroductionFormula)")
found_search_result(metta_example,"match",2,64,'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatch.metta',"   (match $kb\n      ;; Premises\n      (, (â\u0089\u009E ($p $a) $patv)\n         (â\u0089\u009E ($q $a) $qatv)\n         (â\u0089\u009E (â\u0086\u0092 $p $q) (ETV $ev $pqtv))\n         (â\u0088\u0089 $a $ev))  \n      ;; Conclusion\n      (idi_induction (â\u0089\u009E ($p $a) $patv) (â\u0089\u009E ($q $a) $qatv) (â\u0089\u009E (â\u0086\u0092 $p $q) (ETV $ev $pqtv)) (â\u0088\u0089 $a $ev))))")
found_search_result(metta_example,"import!",2,3,'../../../metta-examples-main/pln/match/DeductionImplicationDirectIntroductionMatchTest.metta',"!(import! &self metta:pln:match:ImplicationDirectIntroductionMatch)")
found_search_result(metta_example,"import!",2,4,'../../../metta-examples-main/pln/match/DeductionImplicationDirectIntroductionMatchTest.metta',"!(import! &self metta:pln:match:DeductionMatch)")
found_search_result(metta_example,"match",2,20,'../../../metta-examples-main/pln/match/DeductionImplicationDirectIntroductionMatchTest.metta',"!(match &self\n    ;; Premises\n    (, (â\u0089\u009E $p $ptv)\n       (â\u0089\u009E $q $qtv)\n       (â\u0089\u009E $r $rtv)\n       (â\u0089\u009E ($p $a) $patv)\n       (â\u0089\u009E ($q $a) $qatv)\n       (â\u0088\u0089 $a $ev)\n       (â\u0089\u009E (â\u0086\u0092 $q $r) $qrtv))")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/pln/match/DeductionMatchTest.metta',"!(import! &self metta:pln:match:DeductionMatch)")
found_search_result(metta_example,"&self",2,10,'../../../metta-examples-main/pln/match/DeductionMatchTest.metta',"!(deduction_match &self)")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatchTest.metta',"!(import! &self metta:pln:match:ImplicationDirectIntroductionMatch)")
found_search_result(metta_example,"&self",2,9,'../../../metta-examples-main/pln/match/ImplicationDirectIntroductionMatchTest.metta',"!(idi_induction_match &self)")
found_search_result(metta_example,"import!",2,17,'../../../metta-examples-main/pln/match/DeductionMatch.metta',"!(import! &self metta:common:formula:DeductionFormula)")
found_search_result(metta_example,"let*",2,42,'../../../metta-examples-main/pln/match/DeductionMatch.metta',"   (let* (($prem1 (â\u0089\u009E $p $ptv))\n          ($prem2 (â\u0089\u009E $q $qtv))\n          ($prem3 (â\u0089\u009E $r $rtv))\n          ($prem4 (â\u0089\u009E (â\u0086\u0092 $p $q) $pqtv))\n          ($prem5 (â\u0089\u009E (â\u0086\u0092 $q $r) $qrtv)))\n     (match $kb\n       ;; Premises\n       (, $prem1 $prem2 $prem3 $prem4 $prem5)\n       ;; Conclusion")
found_search_result(metta_example,"pragma!",2,2,'../../../metta-examples-main/pln/dependent-types/DeductionDTLTest.metta',";; !(pragma! type-check auto)")
found_search_result(metta_example,"import!",2,8,'../../../metta-examples-main/pln/dependent-types/DeductionDTLTest.metta',"!(import! &self metta:pln:dependent-types:DeductionDTL)")
found_search_result(metta_example,"import!",2,9,'../../../metta-examples-main/pln/dependent-types/DeductionDTLTest.metta',"!(import! &self metta:synthesis:Synthesize)")
found_search_result(metta_example,"import!",2,10,'../../../metta-examples-main/pln/dependent-types/DeductionDTLTest.metta',"!(import! &self metta:common:Record)")
found_search_result(metta_example,"get-type",2,43,'../../../metta-examples-main/pln/dependent-types/DeductionDTLTest.metta',";; !(get-type deduction_prf)")
found_search_result(metta_example,"import!",2,31,'../../../metta-examples-main/pln/dependent-types/ModusPonensDTL.metta',"!(import! &self metta:common:truthvalue:MeasEq)")
found_search_result(metta_example,"import!",2,32,'../../../metta-examples-main/pln/dependent-types/ModusPonensDTL.metta',"!(import! &self metta:common:formula:ModusPonensFormula)")
found_search_result(metta_example,"import!",2,45,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTL.metta',"!(import! &self metta:common:truthvalue:EvidentialTruthValue)")
found_search_result(metta_example,"import!",2,46,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTL.metta',"!(import! &self metta:common:formula:ImplicationDirectIntroductionFormula)")
found_search_result(metta_example,"import!",2,4,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(import! &self metta:pln:dependent-types:ImplicationDirectIntroductionDTL)")
found_search_result(metta_example,"import!",2,5,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(import! &self metta:synthesis:Synthesize)")
found_search_result(metta_example,"fromnumber",2,9,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"(= (kb) (superpose ((: P2 (â\u008A· P (fromNumber 2) True))\n                    (: Q2 (â\u008A· Q (fromNumber 2) False))\n                    (: P3 (â\u008A· P (fromNumber 3) True))\n                    (: Q3 (â\u008A· Q (fromNumber 3) True))\n                    (: P5 (â\u008A· P (fromNumber 5) False))\n                    (: Q5 (â\u008A· Q (fromNumber 5) True))\n                    (: P7 (â\u008A· P (fromNumber 7) True))\n                    (: Q7 (â\u008A· Q (fromNumber 7) True)))))")
found_search_result(metta_example,"fromnumber",2,35,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"(: base_prf (â\u0089\u009E (â\u0086\u0092 P Q) (ETV (:: (fromNumber 2) â\u0088\u0085) (STV 0 (count->confidence 1)))))")
found_search_result(metta_example,"get-type",2,38,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(get-type base_prf)")
found_search_result(metta_example,"get-type",2,63,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(get-type recursive_prf)")
found_search_result(metta_example,"fromnumber",2,67,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u008D\u0083 (fromNumber 2) (fromNumber 7))) kb rb (fromNumber 2))")
found_search_result(metta_example,"fromnumber",2,70,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u008D\u0083 (fromNumber 2) (fromNumber 3))) kb rb (fromNumber 2))")
found_search_result(metta_example,"fromnumber",2,73,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u008D\u0083 (fromNumber 3) (fromNumber 7))) kb rb (fromNumber 3))")
found_search_result(metta_example,"fromnumber",2,77,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (â\u0086\u0092 P Q) $etv)) kb rb (fromNumber 1))")
found_search_result(metta_example,"fromnumber",2,111,'../../../metta-examples-main/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (â\u0086\u0092 P Q) $etv)) kb rb (fromNumber 4))")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/pln/dependent-types/ModusPonensDTLTest.metta',"!(import! &self metta:pln:dependent-types:ModusPonensDTL)")
found_search_result(metta_example,"import!",2,3,'../../../metta-examples-main/pln/dependent-types/ModusPonensDTLTest.metta',"!(import! &self metta:synthesis:Synthesize)")
found_search_result(metta_example,"fromnumber",2,44,'../../../metta-examples-main/pln/dependent-types/ModusPonensDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (big cow) (STV $s $c))) kb rb (fromNumber 0))   ;; (: cow_is_big (â\u0089\u009E (big cow) (STV 0.99 0.99)))")
found_search_result(metta_example,"fromnumber",2,45,'../../../metta-examples-main/pln/dependent-types/ModusPonensDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (chase cow dog) (STV $s $c))) kb rb (fromNumber 1))   ;; (: (ModusPonens cow_is_big x_is_big_chases_dog) (â\u0089\u009E (chase cow dog) (STV 0.9821 0.99)))")
found_search_result(metta_example,"fromnumber",2,46,'../../../metta-examples-main/pln/dependent-types/ModusPonensDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (see cow rabbit) (STV $s $c))) kb rb (fromNumber 2))   ;; (: (ModusPonens (ModusPonens cow_is_big x_is_big_chases_dog) cow_chases_dog_sees_rabbit) (â\u0089\u009E (see cow rabbit) (STV 0.975859 0.99)))")
found_search_result(metta_example,"import!",2,17,'../../../metta-examples-main/pln/dependent-types/DeductionDTL.metta',"!(import! &self metta:common:truthvalue:MeasEq)")
found_search_result(metta_example,"import!",2,18,'../../../metta-examples-main/pln/dependent-types/DeductionDTL.metta',"!(import! &self metta:common:formula:DeductionFormula)")
found_search_result(metta_example,"import!",2,4,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(import! &self metta:pln:dependent-types:ImplicationDirectIntroductionDTL)")
found_search_result(metta_example,"import!",2,5,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(import! &self metta:pln:dependent-types:DeductionDTL)")
found_search_result(metta_example,"import!",2,6,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(import! &self metta:synthesis:Synthesize)")
found_search_result(metta_example,"fromnumber",2,13,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"                    (: P2 (â\u008A· P (fromNumber 2) True))")
found_search_result(metta_example,"fromnumber",2,14,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"                    (: Q2 (â\u008A· Q (fromNumber 2) False))")
found_search_result(metta_example,"fromnumber",2,15,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"                    (: P7 (â\u008A· P (fromNumber 7) True))")
found_search_result(metta_example,"fromnumber",2,16,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"                    (: Q7 (â\u008A· Q (fromNumber 7) True))")
found_search_result(metta_example,"get-type",2,49,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(get-type deduction_idi_prf)")
found_search_result(metta_example,"fromnumber",2,52,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (â\u0086\u0092 P Q) $etv)) kb rb (fromNumber 1))")
found_search_result(metta_example,"fromnumber",2,58,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (â\u0086\u0092 P Q) $etv)) kb rb (fromNumber 3))")
found_search_result(metta_example,"fromnumber",2,67,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',"!(synthesize (: $proof (â\u0089\u009E (â\u0086\u0092 P R) $etv)) kb rb (fromNumber 3))")
found_search_result(metta_example,"fromnumber",2,74,'../../../metta-examples-main/pln/dependent-types/DeductionImplicationDirectIntroductionDTLTest.metta',";; !(synthesize (: (Deduction Pm Qm Rm $PQ QRm) (â\u0089\u009E (â\u0086\u0092 P R) $etv)) kb rb (fromNumber 5))")
found_search_result(metta_example,"import!",2,17,'../../../metta-examples-main/pln/equal/DeductionEqual.metta',"!(import! &self metta:common:formula:DeductionFormula)")
found_search_result(metta_example,"import!",2,18,'../../../metta-examples-main/pln/equal/ImplicationDirectIntroductionEqual.metta',"!(import! &self  metta:common:OrderedSet)")
found_search_result(metta_example,"import!",2,19,'../../../metta-examples-main/pln/equal/ImplicationDirectIntroductionEqual.metta',"!(import! &self  metta:common:truthvalue:EvidentialTruthValue)")
found_search_result(metta_example,"import!",2,20,'../../../metta-examples-main/pln/equal/ImplicationDirectIntroductionEqual.metta',"!(import! &self metta:common:formula:ImplicationDirectIntroductionFormula)")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/pln/equal/ImplicationDirectIntroductionEqualTest.metta',"!(import! &self metta:common:formula:ImplicationDirectIntroductionEqual.metta)")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/pln/equal/DeductionEqualTest.metta',"!(import! &self  metta:pln:equal:DeductionEqual)")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntailTest.metta',"!(import! &self  metta:pln:entail:ImplicationDirectIntroductionEntail)")
found_search_result(metta_example,"match",2,10,'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntailTest.metta',"!(match &self (â\u008A¢ (â\u0089\u009E (â\u0086\u0092 P Q) $tv)) $tv)")
found_search_result(metta_example,"let*",2,14,'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntailTest.metta',"!(let* (($pa (â\u0089\u009E (P 42) (Bl True)))\n        ($qa (â\u0089\u009E (Q 42) (Bl False)))\n        ($pq (â\u0089\u009E (â\u0086\u0092 P Q) (ETV Empty (STV 1 0))))\n        ($an (â\u0088\u0089 42 Empty)))\n   (match &self (â\u008A¢ $pa $qa $pq $an $conclusion) $conclusion))")
found_search_result(metta_example,"match",2,23,'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntailTest.metta',";; !(match &self (â\u008A¢ $p1 $p2 $p3 $p4 (â\u0089\u009E (â\u0086\u0092 P Q) $tv))\n;;         (Solution $p1 $p2 $p3 $p4 $tv))")
found_search_result(metta_example,"import!",2,18,'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntail.metta',"!(import! &self metta:common:OrderedSet)")
found_search_result(metta_example,"import!",2,19,'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntail.metta',"!(import! &self metta:common:truthvalue:EvidentialTruthValue)")
found_search_result(metta_example,"import!",2,20,'../../../metta-examples-main/pln/entail/ImplicationDirectIntroductionEntail.metta',"!(import! &self metta:common:formula:ImplicationDirectIntroductionFormula)")
found_search_result(metta_example,"import!",2,17,'../../../metta-examples-main/pln/entail/DeductionEntail.metta',"!(import! &self metta:common:formula:DeductionFormula)")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/pln/entail/DeductionEntailTest.metta',"!(import! &self metta:pln:entail:DeductionEntail)")
found_search_result(metta_example,"let*",2,11,'../../../metta-examples-main/pln/entail/DeductionEntailTest.metta',"!(let* (($p (P))\n        ($q (Q))\n        ($r (R))\n        ($pq (PQ))\n        ($qr (QR)))\n    (match &self (â\u008A¢ $p $q $r $pq $qr $res) $res))")
found_search_result(metta_example,"match",2,19,'../../../metta-examples-main/pln/entail/DeductionEntailTest.metta',";!(match &self (â\u008A¢ $p $q $r $pq $qr (â\u0089\u009E (â\u0086\u0092 P R) $tv)) (S $p $q $r $pq $qr $tv))")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(import! &self metta:synthesis:experiments:synthesize-via-case)")
found_search_result(metta_example,"import!",2,3,'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(import! &self metta:common:Record)")
found_search_result(metta_example,"fromnumber",2,12,'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(record syn ((: (. (. g f) h) (-> $in Bool)) (fromNumber 2))) ; (: (. (. g f) h) (-> Bool Bool))")
found_search_result(metta_example,"fromnumber",2,13,'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(record syn ((: (. $g h) (-> $in String)) (fromNumber 3))) ; (: (. f h) (-> Bool String)), (: (. (. (. f h) (. g f)) h) (-> Bool String))")
found_search_result(metta_example,"fromnumber",2,14,'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(record syn ((: (. $g h) (-> Number $out)) (fromNumber 3)))   ; No answer")
found_search_result(metta_example,"fromnumber",2,15,'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(record syn ((: (. g $f) (-> $in String)) (fromNumber 3))) ; No answer")
found_search_result(metta_example,"fromnumber",2,16,'../../../metta-examples-main/synthesis/experiments/synthesize-via-case-test.metta',"!(record syn ((: (. g $f) (-> $in Bool)) (fromNumber 3)))   ; (: (. g f) (-> Number Bool)), (: (. g (. f h)) (-> Bool Bool)), (: (. g (. f (. h g))) (-> String Bool)), (: (. g (. (. f h) g)) (-> String Bool)), (. g (. (. f h) (. g f))) (-> Number Bool))\n!(record syn ((: $term $type) (fromNumber 4)))     ; Too long to list\n;; !(record syn ((: $term (-> Number Number)) (fromNumber 6))) ; Too long to run")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/synthesis/experiments/synthesize-via-case.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"case",2,18,'../../../metta-examples-main/synthesis/experiments/synthesize-via-case.metta',"(= (syn $query $depth) (case (facts) (($query $query))))")
found_search_result(metta_example,"case",2,21,'../../../metta-examples-main/synthesis/experiments/synthesize-via-case.metta',"(= (syn $query (S $k)) (case (rules)\n                         (((: $rule (-> $premise1 $premise2 $conclusion))\n                           (case $query\n                             (((: ($rule $prf1 $prf2) $conclusion)\n                               (case (syn (: $prf1 $premise1) $k)\n                                 (((: $prf1 $premise1)\n                                   (case (syn (: $prf2 $premise2) $k)\n                                     (((: $prf2 $premise2)\n                                       $query)))))))))))))")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"import!",2,3,'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify.metta',"!(import! &self metta:synthesis:Unify)")
found_search_result(metta_example,"unify",2,40,'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify.metta',"   (unify $query ($axiom) $query))\n;; Binary rule\n(= (synthesize $query $axiom $rule (S $k))")
found_search_result(metta_example,"unify",2,43,'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify.metta',"   (unify* (((: $ructor (-> $premise1 $premise2 $conclusion)) ($rule))\n            ((: ($ructor $proof1 $proof2) $conclusion) $query)\n            ((: $proof1 $premise1) (synthesize (: $proof1 $premise1) $axiom $rule $k))\n            ((: $proof2 $premise2) (synthesize (: $proof2 $premise2) $axiom $rule $k)))\n           $query))")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/synthesis/experiments/synthesize-via-let.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"let*",2,23,'../../../metta-examples-main/synthesis/experiments/synthesize-via-let.metta',"(= (syn $query (S $k)) (let* (((: $rule (-> $premise1 $premise2 $conclusion)) (rules))\n                              ((: ($rule $prf1 $prf2) $conclusion) $query)\n                              ((: $prf1 $premise1) (syn (: $prf1 $premise1) $k))\n                              ((: $prf2 $premise2) (syn (: $prf2 $premise2) $k)))\n                         $query))")
found_search_result(metta_example,"case",2,2,'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (Link $x B) (((Link A $y) (Link $x $y))))  ; [(Link A B)]")
found_search_result(metta_example,"case",2,5,'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (-> $x B) (((-> A $y) (-> $x $y))))  ; [(-> A B)]")
found_search_result(metta_example,"case",2,9,'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (f $x) (((Link A $y) (Link $x $y))))  ; [(Link A B)]")
found_search_result(metta_example,"case",2,14,'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (Link $x B) (((g $y) (Link $x $y))))  ; []")
found_search_result(metta_example,"case",2,17,'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (superpose ((Link $x B) (Node A) (Link $x C))) (((Link A $y) (Link $x $y))))  ; [(Link A B), (Link A C)]")
found_search_result(metta_example,"case",2,20,'../../../metta-examples-main/synthesis/experiments/unify-via-case.metta',"!(case (g $y) (($z (case (f $x) (($z $z))))))  ; [(Link A B)]")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify-test.metta',"!(import! &self metta:synthesis:experiments:synthesize-via-unify)")
found_search_result(metta_example,"import!",2,3,'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify-test.metta',"!(import! &self metta:common:Record)")
found_search_result(metta_example,"fromnumber",2,25,'../../../metta-examples-main/synthesis/experiments/synthesize-via-unify-test.metta',"!(record synthesize ((: (. (. g f) h) (-> $in Bool)) kb rb (fromNumber 2))) ; (: (. (. g f) h) (-> Bool Bool)) (fromNumber 3))\n!(record synthesize ((: (. $g h) $type) kb rb (fromNumber 3))) ; (: (. f h) (-> Bool String))\n!(record synthesize ((: (. $g h) (-> Number $out)) kb rb (fromNumber 3)))   ; No answer\n!(record synthesize ((: (. g $f) (-> $in String)) kb rb (fromNumber 3))) ; No answer\n!(record synthesize ((: (. g $f) (-> $in Bool)) kb rb (fromNumber 3)))   ; (: (. g f) (-> Number Bool)), (: (. g (. f h)) (-> Bool Bool)), (: (. g (. f (. h g))) (-> String Bool))\n!(record synthesize ((: $term $type) kb rb (fromNumber 4)))     ; Too long to list\n;; !(record synthesize ((: $term (-> Number Number)) kb rb (fromNumber 6))) ; Too long to run")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(import! &self metta:synthesis:experiments:synthesize-via-let)")
found_search_result(metta_example,"import!",2,3,'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(import! &self metta:common:Record)")
found_search_result(metta_example,"fromnumber",2,12,'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(record syn ((: (. (. g f) h) (-> $in Bool)) (fromNumber 2))) ; (: (. (. g f) h) (-> Bool Bool))")
found_search_result(metta_example,"fromnumber",2,13,'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(record syn ((: (. $g h) (-> $in String)) (fromNumber 3))) ; (: (. f h) (-> Bool String)), (: (. (. (. f h) (. g f)) h) (-> Bool String))")
found_search_result(metta_example,"fromnumber",2,14,'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(record syn ((: (. $g h) (-> Number $out)) (fromNumber 3)))   ; No answer")
found_search_result(metta_example,"fromnumber",2,15,'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(record syn ((: (. g $f) (-> $in String)) (fromNumber 3))) ; No answer")
found_search_result(metta_example,"fromnumber",2,16,'../../../metta-examples-main/synthesis/experiments/synthesize-via-let-test.metta',"!(record syn ((: (. g $f) (-> $in Bool)) (fromNumber 3)))   ; (: (. g f) (-> Number Bool)), (: (. g (. f h)) (-> Bool Bool)), (: (. g (. f (. h g))) (-> String Bool)), (: (. g (. (. f h) g)) (-> String Bool)), (. g (. (. f h) (. g f))) (-> Number Bool))\n!(record syn ((: $term $type) (fromNumber 4)))     ; Too long to list\n;; !(record syn ((: $term (-> Number Number)) (fromNumber 6))) ; Too long to run")
found_search_result(metta_example,"let*",2,19,'../../../metta-examples-main/synthesis/experiments/unify-via-let.metta',"!(let* (($gy (g $y))\n        ($gy (Link $x B)))\n       (Link $x $y))  ; [(Link A B)]")
found_search_result(metta_example,"let*",2,27,'../../../metta-examples-main/synthesis/experiments/unify-via-let.metta',"!(let* (($z (g $y)) ($z (f $x))) $z)  ; [(Link A B)]")
found_search_result(metta_example,"fromnumber",2,12,'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"(= (fromNumber $n) (if (<= $n 0) Z (S (fromNumber (- $n 1)))))")
found_search_result(metta_example,"case",2,60,'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"(= (synthesize $query $axiom $rule $depth) (case ($axiom) (($query $query))))")
found_search_result(metta_example,"case",2,63,'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"   (case ($rule)\n     (((: $ructor (-> $premise1 $premise2 $conclusion))\n       (case $query\n         (((: ($ructor $proof1 $proof2) $conclusion)\n           (case (synthesize (: $proof1 $premise1) $axiom $rule $k)\n             (((: $proof1 $premise1)\n               (case (synthesize (: $proof2 $premise2) $axiom $rule $k)\n                 (((: $proof2 $premise2)\n                   $query)))))))))))))")
found_search_result(metta_example,"fromnumber",2,93,'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: (. (. g f) h) (-> $in Bool)) kb rb (fromNumber 2))) ; (: (. (. g f) h) (-> Bool Bool))")
found_search_result(metta_example,"fromnumber",2,94,'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: (. $g h) $type) kb rb (fromNumber 3))) ; (: (. f h) (-> Bool String)), (: (. (. g f) h) (-> Bool Bool)), (: (. (. h (. g f)) h) (-> Bool Number)), (: (. (. (. f h) (. g f)) h) (-> Bool String)), (: (. (. (. h g) f) h) (-> Bool Number))")
found_search_result(metta_example,"fromnumber",2,95,'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: (. $g h) (-> Number $out)) kb rb (fromNumber 3)))   ; No answer")
found_search_result(metta_example,"fromnumber",2,96,'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: (. g $f) (-> $in String)) kb rb (fromNumber 3))) ; No answer")
found_search_result(metta_example,"fromnumber",2,97,'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: (. g $f) (-> $in Bool)) kb rb (fromNumber 3)))   ; (: (. g f) (-> Number Bool)), (: (. g (. f h)) (-> Bool Bool)), (: (. g (. f (. h g))) (-> String Bool)), (: (. g (. (. f h) g)) (-> String Bool)), (: (. g (. (. f h) (. g f))) (-> Number Bool))")
found_search_result(metta_example,"fromnumber",2,98,'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',"!(record synthesize ((: $term $type) kb rb (fromNumber 4)))     ; Too long to list")
found_search_result(metta_example,"fromnumber",2,99,'../../../metta-examples-main/synthesis/experiments/self-contained-synthesize.metta',";; !(record synthesize ((: $term (-> Number Number)) (fromNumber 6) kb rb)) ; Too long to run")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"pragma!",2,5,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',";; !(pragma! type-check auto)")
found_search_result(metta_example,"cons",2,18,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (map $fn (Cons $head $tail)) (Cons ($fn $head) (map $fn $tail)))")
found_search_result(metta_example,"cons",2,23,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (filter $prd (Cons $head $tail)) (if ($prd $head)\n                                        (Cons $head (filter $prd $tail))\n                                        (filter $prd $tail)))")
found_search_result(metta_example,"cons",2,40,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (interleave (Cons $head $tail) $ys) (Cons $head (interleave $ys $tail)))")
found_search_result(metta_example,"cons",2,45,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (prodWith $op Nil (Cons $head $tail)) Nil)")
found_search_result(metta_example,"cons",2,46,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (prodWith $op (Cons $head $tail) Nil) Nil)")
found_search_result(metta_example,"cons",2,47,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (prodWith $op (Cons $xhd $xtl) (Cons $yhd $ytl))\n   (Cons ($op $xhd $yhd) (interleave (map (curry $op $xhd) $ytl)\n                                     (prodWith $op $xtl (Cons $yhd $ytl)))))")
found_search_result(metta_example,"case",2,57,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (well-typed $x) (case $x\n                     (((Error $v $m) False)\n                      ($_ True))))")
found_search_result(metta_example,"trace!",2,65,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (synthesize $fns Z) (trace! (synthesize= $fns Z Nil) Nil))")
found_search_result(metta_example,"trace!",2,66,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (synthesize $fns (S Z)) (trace! (synthesize= $fns (S Z) $fns) $fns))")
found_search_result(metta_example,"let*",2,67,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (synthesize $fns (S (S $k))) (let* (($prgs (synthesize $fns (S $k)))\n                                       ($cmbs (prodWith . $fns $prgs))\n                                       ($vld (filter well-typed $cmbs)))\n                                  ; TODO: should be concatenated with $prgs?\n                                  (trace! (info (variables (prgs $prgs) (cmbs $cmbs))\n                                                (synthesize= $fns (S (S $k)) $vld))\n                                          $vld)))")
found_search_result(metta_example,"cons",2,83,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(map inc (Cons 2 (Cons 3 (Cons 1 Nil))))  ; (Cons 3 (Cons 4 (Cons 2 Nil)))")
found_search_result(metta_example,"cons",2,88,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(filter even (Cons 2 (Cons 3 (Cons 1 Nil))))  ; (Cons 2 Nil)")
found_search_result(metta_example,"cons",2,92,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(interleave (Cons 1 (Cons 2 Nil)) (Cons \"a\" (Cons \"b\" Nil)))  ; (Cons 1 (Cons \"a\" (Cons 2 (Cons \"b\" Nil))))")
found_search_result(metta_example,"cons",2,95,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith * Nil (Cons 2 Nil))  ; Nil")
found_search_result(metta_example,"cons",2,96,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith * (Cons 1 Nil) Nil)  ; Nil")
found_search_result(metta_example,"cons",2,97,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith * (Cons 1 Nil) (Cons 2 Nil))  ; (Cons 2 Nil)")
found_search_result(metta_example,"cons",2,98,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith * (Cons 1 (Cons 2 Nil)) (Cons 3 (Cons 4 Nil)))  ; (Cons 3 (Cons 4 (Cons 6 (Cons 8 Nil))))")
found_search_result(metta_example,"cons",2,113,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"(= (functions) (Cons f (Cons g Nil)))")
found_search_result(metta_example,"cons",2,115,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',";; (= (functions) (Cons f (Cons g (Cons h Nil))))")
found_search_result(metta_example,"cons",2,117,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith . (Cons g Nil) (Cons f Nil))  ; (Cons (. g f) Nil)")
found_search_result(metta_example,"cons",2,118,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith . (Cons f Nil) (Cons g Nil))  ; (Cons (. f g) Nil)")
found_search_result(metta_example,"cons",2,119,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(prodWith . (Cons f (Cons g Nil)) (Cons f (Cons g Nil)))  ; (Cons (. f f) (Cons (. f g) (Cons (. g f) (Cons (. g g) Nil))))")
found_search_result(metta_example,"cons",2,120,'../../../metta-examples-main/synthesis/experiments/synthesize-via-type-checking.metta',"!(synthesize (functions) (fromNumber 2))  ; (Cons (. f f) (Cons (. f g) (Cons (. g f) (Cons (. g g) Nil))))")
found_search_result(metta_example,"case",2,10,'../../../metta-examples-main/synthesis/experiments/synthesize-via-superpose.metta',"(= (well-typed $x) (case $x\n                     (((Error $v $m) False)\n                      ($_ True))))")
found_search_result(metta_example,"collapse",2,25,'../../../metta-examples-main/synthesis/experiments/synthesize-via-superpose.metta',";; !(collapse (. (superpose (f g)) (superpose (f g))))")
found_search_result(metta_example,"get-type",2,27,'../../../metta-examples-main/synthesis/experiments/synthesize-via-superpose.metta',";; !(get-type (. (superpose (f g)) (superpose (f g))))")
found_search_result(metta_example,"get-type",2,36,'../../../metta-examples-main/synthesis/experiments/synthesize-via-superpose.metta',"!(get-type (. (fns) (fns)))")
found_search_result(metta_example,"match",2,23,'../../../metta-examples-main/metta_amr/metta_to_amr/instances.metta',"    (match &self\n            (, (is-a $r $rel)\n               (is-a $s $subj)\n               ($r :ARG0 $s)\n               (Fact $r $tv))\n            (, (match &self ($r $role $res)\n                     ($r $role $res))\n                $tv)\n    )")
found_search_result(metta_example,"match",2,13,'../../../metta-examples-main/metta_amr/metta_to_amr/amr-connect.metta',"   (match &self (ROLE $concept $role $v) $role))\n\n(= (tell ($pred $arg0 $arg1))")
found_search_result(metta_example,"match",2,16,'../../../metta-examples-main/metta_amr/metta_to_amr/amr-connect.metta',"   (match &self (CONNECT ($pred $v0 $v1) $concept)\n          ($concept ((get-role $concept $v0) $arg0)\n                    ((get-role $concept $v1) $arg1))))\n\n!(tell (has-name I Sophia))")
found_search_result(metta_example,"match",2,5,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"(= (match-else $pattern $template $else)\n   (let $r (match &self $pattern $template)\n        (if (== $r (superpose ()))\n            $else\n            $r)))")
found_search_result(metta_example,"match",2,11,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',";!(match-else (likes-001 $x $y) (its $x $y) nothing)")
found_search_result(metta_example,"collapse",2,12,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',";!(== (collapse (match &self (likes-01 $x $y) (its $x $y))) ())")
found_search_result(metta_example,"match",2,13,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',";!(let $r (match &self (likes-01 $x $y) (its $x $y)) 1)")
found_search_result(metta_example,"match",2,15,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',";!(match &self (likes-001 $x $y) (its $x $y))")
found_search_result(metta_example,"bind!",2,17,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"!(bind! &bk (new-space))")
found_search_result(metta_example,"match",2,29,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',";!(match &self (: $fact (Father person-001 $father)) $father)")
found_search_result(metta_example,"&self",2,30,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"; it's wrong, because Father takes exeplar of (Person $x), not itself")
found_search_result(metta_example,"let*",2,35,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta'," (let* (($f (father person-001))\n        ($t (get-type $f))\n        ((Father $p1 $p2) $t))\n       $p2)")
found_search_result(metta_example,"get-type",2,40,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"(let (Father $x $y) (get-type (father person-001)) $y)")
found_search_result(metta_example,"get-type",2,41,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"(get-type father)")
found_search_result(metta_example,"get-type",2,42,'../../../metta-examples-main/metta_amr/metta_to_amr/dep-types.metta',"!(get-type (father person-001))")
found_search_result(metta_example,"match",2,9,'../../../metta-examples-main/metta_amr/metta_to_amr/user.metta',"   (match &self (, (is-a $x $Role)\n                   (Has $Role $Prop))\n                $Prop))\n\n(find-prop user)\n\n(is-a person-001 Person)\n(Mother user person-001)\n(Name user \"Bill\")")
found_search_result(metta_example,"match",2,23,'../../../metta-examples-main/metta_amr/metta_to_amr/user.metta',"     (match &self ($prop $x $y) ($prop $y))))\n\n(= (get-prop-value $prop $x)\n   (match &self ($prop $x $y) $y))\n\n;!(get-prop user)\n;!(find-prop person-001)\n\n(= (amr (Name $x))")
found_search_result(metta_example,"import!",2,4,'../../../metta-examples-main/common/truthvalue/TruthValue.metta',"!(import! &self  metta:common:Num)")
found_search_result(metta_example,"let*",2,69,'../../../metta-examples-main/common/truthvalue/TruthValue.metta',"(= (inc-neg-count (STV $s $c)) (let* (($tot_cnt (confidence->count $c))\n                                      ($pos_cnt (* $s $tot_cnt))\n                                      ($new_tot_cnt (+ $tot_cnt 1)))\n                                 (STV (/ $pos_cnt $new_tot_cnt)\n                                      (count->confidence $new_tot_cnt))))")
found_search_result(metta_example,"let*",2,78,'../../../metta-examples-main/common/truthvalue/TruthValue.metta',"(= (inc-pos-count (STV $s $c)) (let* (($tot_cnt (confidence->count $c))\n                                      ($pos_cnt (* $s $tot_cnt))\n                                      ($new_pos_cnt (+ $pos_cnt 1))\n                                      ($new_tot_cnt (+ $tot_cnt 1)))\n                                 (STV (/ $new_pos_cnt $new_tot_cnt)\n                                      (count->confidence $new_tot_cnt))))")
found_search_result(metta_example,"let*",2,140,'../../../metta-examples-main/common/truthvalue/TruthValue.metta',"   (let* (($a (post-alpha (STV $pr $conf)))\n          ($b (post-beta (STV $pr $conf))))\n     (/ $a (+ $a $b))))")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/common/truthvalue/EvidentialTruthValueTest.metta',"!(import! &self metta:common:truthvalue:EvidentialTruthValue)")
found_search_result(metta_example,"import!",2,4,'../../../metta-examples-main/common/truthvalue/EvidentialTruthValue.metta',"!(import! &self metta:common:truthvalue:TruthValue)")
found_search_result(metta_example,"import!",2,5,'../../../metta-examples-main/common/truthvalue/EvidentialTruthValue.metta',"!(import! &self metta:common:OrderedSet)")
found_search_result(metta_example,"import!",2,2,'../../../metta-examples-main/common/truthvalue/TruthValueTest.metta',"!(import! &self metta:common:truthvalue:TruthValue)")
found_search_result(metta_example,"import!",2,8,'../../../metta-examples-main/common/truthvalue/TemporalTruthValue.metta',"!(import! &self metta:common:truthvalue:EvidentialTruthValue)")
found_search_result(metta_example,"import!",2,4,'../../../metta-examples-main/common/formula/ModusPonensFormula.metta',"!(import! &self metta:common:truthvalue:TruthValue)")
found_search_result(metta_example,"import!",2,5,'../../../metta-examples-main/common/formula/ModusPonensFormula.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"let*",2,9,'../../../metta-examples-main/common/formula/ModusPonensFormula.metta',"   (let*\n       (($notABs 0.2)   ; temporary hack\n        ($notABc 1))\n       (STV\n           (+ (* $ABs $As) (* $notABs (- 1 $As)))\n           (min (min $ABc $notABc) $Ac))))")
found_search_result(metta_example,"import!",2,4,'../../../metta-examples-main/common/formula/DeductionFormula.metta',"!(import! &self metta:common:truthvalue:TruthValue)")
found_search_result(metta_example,"import!",2,5,'../../../metta-examples-main/common/formula/DeductionFormula.metta',"!(import! &self metta:common:Num)")
found_search_result(metta_example,"import!",2,1,'../../../metta-examples-main/common/formula/DeductionFormulaTest.metta',"!(import! &self metta:common:formula:DeductionFormula)")
found_search_result(metta_example,"import!",2,4,'../../../metta-examples-main/common/formula/ImplicationDirectIntroductionFormula.metta',"!(import! &self metta:common:truthvalue:TruthValue)")
found_search_result(metta_example,"transfer!",3,1,'../../../metta-examples-main/recursion-schemes/src/examples/benchmark.metta',"!(transfer! \"schemes.metta\")")
found_search_result(metta_example,"cons",3,5,'../../../metta-examples-main/recursion-schemes/src/examples/benchmark.metta',"(= (mapExpr $f (Const $x)) (Const $x))")
found_search_result(metta_example,"cons",3,12,'../../../metta-examples-main/recursion-schemes/src/examples/benchmark.metta',"(= (evalExpr (Const $x)) $x)")
found_search_result(metta_example,"cons",3,16,'../../../metta-examples-main/recursion-schemes/src/examples/benchmark.metta',"(= (nTimes (, $x (S Z))) (Const $x))")
found_search_result(metta_example,"cons",3,17,'../../../metta-examples-main/recursion-schemes/src/examples/benchmark.metta',"(= (nTimes (, $_ Z)) (Const 0))")
found_search_result(metta_example,"transfer!",3,1,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"!(transfer! \"schemes.metta\")")
found_search_result(metta_example,"cons",3,5,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (mapExpr $f (Const $x)) (Const $x))")
found_search_result(metta_example,"cons",3,10,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (evalExpr (Const $x)) $x)")
found_search_result(metta_example,"cons",3,16,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"!((cata mapExpr evalExpr) (Fix (Plus (Fix (Plus (Fix (Var X)) (Fix (Const 2)))) (Fix (Const 40)))))")
found_search_result(metta_example,"cons",3,20,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (nTimes (, $x (S Z))) (Const $x))")
found_search_result(metta_example,"cons",3,21,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (nTimes (, $_ Z)) (Const 0))")
found_search_result(metta_example,"cons",3,30,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (diff (Const $_)) (Fix (Const 0)))")
found_search_result(metta_example,"cons",3,31,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (diff (Var $_)) (Fix (Const 1)))")
found_search_result(metta_example,"cons",3,35,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"!((para mapExpr diff) (Fix (Plus (Fix (Var X)) (Fix (Const 1)))))")
found_search_result(metta_example,"cons",3,38,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"(= (expand (1p $x)) (Plus (Bind (Const 1)) (Pure $x)))")
found_search_result(metta_example,"match",3,43,'../../../metta-examples-main/recursion-schemes/src/examples/expression.metta',"!(match &self (= (expand $X) $Y) $X)")
found_search_result(metta_example,"import!",1,3,'../../tests/extended_compat/metta-examples/red-black-lambda/red-black.metta',"!(import! &LC lambda-theory)")
found_search_result(metta_example,"match",1,5,'../../tests/extended_compat/metta-examples/red-black-lambda/red-black.metta',"(= (RedLambda $RV $BLC) (RTheory (match &LC (LambdaTheory ($RV $BLC) $rhs) $rhs)))")
found_search_result(metta_example,"match",1,6,'../../tests/extended_compat/metta-examples/red-black-lambda/red-black.metta',"(= (BlackLambda $BV $RLC) (BTheory (match &LC (LambdaTheory ($BV $RLC) $rhs) $rhs)))")
found_search_result(metta_example,"match",1,51,'../../tests/extended_compat/metta-examples/red-black-lambda/red-black.metta',"; (RedBlackLambda (rc (match &self (LambdaTheory ($RV $BLC) $rhs) $rhs)))")
found_search_result(metta_example,"bind!",1,4,'../../tests/extended_compat/metta-examples/python_from_metta/default.metta',"    (bind! $x (py-atom $y))) \n<br>\n (= (import $x)  \n<br>\n     (import $x as $x))")
found_search_result(metta_example,"import!",1,1,'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"; > this !(import! a b) doesn't work exactly.")
found_search_result(metta_example,"import!",1,3,'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"!(import! &self default)")
found_search_result(metta_example,"bind!",1,7,'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"    (bind! $x (py-atom $y))) \n<br>\n (= (import $x)  \n<br>\n     (import $x as $x)) \n<br>\n  \n<br>\n ; > Python imports")
found_search_result(metta_example,"py-atom",1,27,'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"(= (::JSON $x) (py-atom (json.loads $x)))")
found_search_result(metta_example,"py-atom",1,35,'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"    ((py-dot (py-atom $dict) get) $key)) \n<br>\n  \n<br>\n (: get_index (-> JsonAtom Number JsonAtom)) \n<br>\n (= (get_index $list $index) \n<br>\n     ((py-dot (py-atom $list) __getitem__) $index))")
found_search_result(metta_example,"py-list",1,91,'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"(bash (py-list ( \n<br>\n     \"echo\" \"Hello this is a bash shell\" \n<br>\n     ))) \n<br>\n  \n<br>\n ; > string concatenation")
found_search_result(metta_example,"py-dot",1,108,'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"    (py-dot  \n<br>\n         (py-atom (::str ('\\x20')) join)  \n<br>\n         ($x $y))) \n<br>\n  \n<br>\n ; ---------------------------------------")
found_search_result(metta_example,"py-dict",1,123,'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"    (json (py-dict ( \n<br>\n         (\"model\" \"gpt-4o\") \n<br>\n         (\"messages\" (py-list ( \n<br>\n             (py-dict ( \n<br>\n                 (\"role\" \"system\")")
found_search_result(metta_example,"py-dict",1,130,'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"            (py-dict ( \n<br>\n                 (\"role\" \"user\") \n<br>\n                 (\"content\" $userPrompt) \n<br>\n             )) \n<br>\n         )))")
found_search_result(metta_example,"py-dict",1,136,'../../tests/extended_compat/metta-examples/python_from_metta/requests.metta',"    (headers (py-dict ( \n<br>\n         (\"Authorization\" (Bearer)) \n<br>\n     ))) \n<br>\n ))) \n<br>\n ")
found_search_result(metta_example,"py-list",1,12,'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',"(= (shell-command) (py-list ( \n<br>\n     \"echo\"  \n<br>\n     \"Hello this is a shell\" \n<br>\n     ))) \n<br>\n ")
found_search_result(metta_example,"bind!",1,21,'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',"    (bind! $x (py-atom $y))) \n<br>\n (= (import $x)  \n<br>\n     (import $x as $x)) \n<br>\n  \n<br>\n ; > Python imports")
found_search_result(metta_example,"py-atom",1,47,'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',"    (stdout (py-atom (PIPE)))")
found_search_result(metta_example,"bind!",1,59,'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',"    (bind! $name  \n<br>\n         (getattr $buffer $var) \n<br>\n         )) \n<br>\n (= (extract $buffer to $name ) \n<br>\n     (extract $buffer from (Literal $name) to $name))")
found_search_result(metta_example,"println!",1,115,'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',";;     (println! (hi))")
found_search_result(metta_example,"println!",1,116,'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',";;     (!(println! ($do)) (untill $stop $do))")
found_search_result(metta_example,"println!",1,121,'../../tests/extended_compat/metta-examples/python_from_metta/fs.metta',"    ;; (println! ($buf))")
found_search_result(metta_example,"sealed",1,10,'../../tests/extended_compat/metta-examples/SICP_book/chapter_1_3_2.metta',"    (let (quote ($v $b)) (sealed ($var) (quote ($var $body))) (let (quote $v) (quote $val) $b)) ) \n<br>\n  \n<br>\n ; For lambda with two inputs \n<br>\n (= ((lambda2 $var1 $var2 $body) $val1 $val2) \n<br>\n     (let (quote ($v1 $v2 $b)) (sealed ($var1 $var2) (quote ($var1 $var2 $body))) (let (quote ($v1 $v2)) (quote ($val1 $val2)) $b)) )")
found_search_result(metta_example,"sealed",1,20,'../../tests/extended_compat/metta-examples/SICP_book/chapter_1_3_2.metta',"    (let (quote ($v1 $v2 $v3 $b)) (sealed ($var1 $var2 $var3) (quote ($var1 $var2 $var3 $body))) (let (quote ($v1 $v2 $v3)) (quote ($val1 $val2 $val3)) $b)) ) \n<br>\n  \n<br>\n (= (sqr $x) (* $x $x)) \n<br>\n  \n<br>\n ; Cube can't be defined as (* $x $x $x) as in Scheme")
found_search_result(metta_example,"println!",1,93,'../../tests/extended_compat/metta-examples/SICP_book/chapter_1_3_2.metta',"                            (() (println! $next))")
found_search_result(metta_example,"&self",1,207,'../../tests/extended_compat/metta-examples/SICP_book/chapter_1_3_2.metta',"        ($self (/ $y 2) (inc $counter) $self))) \n<br>\n   ($iter $x 0 $iter))) \n<br>\n  \n<br>\n !(assertEqual \n<br>\n     (closest_pow2 12)")
found_search_result(metta_example,"&self",1,259,'../../tests/extended_compat/metta-examples/SICP_book/chapter_1_3_2.metta',"                ($self $next $self)))) \n<br>\n     (lambda1 $guess ($iter $guess $iter)))) \n<br>\n  \n<br>\n (= (ii_sqrt $x) \n<br>\n   ((iterative-improve close-enough? (lambda1 $y (average $y (/ $x $y)))) 1))")
found_search_result(metta_example,"new-state",1,37,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"                        (let $new-state (new-state $value) \n<br>\n                         (add-atom &self ((checked $var_name)  $new-state)) \n<br>\n  \n<br>\n                         )) \n<br>\n ;functions to get and set card state")
found_search_result(metta_example,"get-state",1,42,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"(= (get-card-state-value $var_name)(match &self ((checked $var_name) $x)  (get-state $x) ))")
found_search_result(metta_example,"change-state!",1,44,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"(= (set-card-state-value $var_name $value) (change-state! (match &self ((checked $var_name) $x)  $x) $value))")
found_search_result(metta_example,"match",1,47,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(match &self (character $t) (new-state-value! (character $t) False))")
found_search_result(metta_example,"match",1,48,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(match &self (weapon $t) (new-state-value! (weapon $t) False))")
found_search_result(metta_example,"match",1,49,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(match &self (room $t) (new-state-value! (room $t) False))")
found_search_result(metta_example,"new-state",1,55,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"                        (let $new-state (new-state $value) \n<br>\n                         (add-atom &self ((is_not_active $player)  $new-state)) \n<br>\n  \n<br>\n                         )) \n<br>\n ;functions to get and set player's state")
found_search_result(metta_example,"get-state",1,60,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"(= (get-player-state-value $player)(match &self ((is_not_active $player)  $x)  (get-state $x) ))")
found_search_result(metta_example,"change-state!",1,62,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"(= (set-player-state-value $player $value) (change-state! (match &self ((is_not_active $player)  $x)  $x) $value))")
found_search_result(metta_example,"match",1,66,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(match &self (player $t) (new-state-value! $t False))")
found_search_result(metta_example,"bind!",1,71,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',";!(bind! &target (character \"Colonel Mustard\") (weapon   \"dagger\") (room  \"The Ballroom\"))")
found_search_result(metta_example,"new-state",1,106,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(bind! &false (new-state False))")
found_search_result(metta_example,"case",1,114,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"         (case (match &self ($player left $next_player) $next_player) \n<br>\n             ( \n<br>\n                 ($next_player \n<br>\n                     (case (match &self ($next_player ($room_name $room)) $room_name) \n<br>\n                         (")
found_search_result(metta_example,"case",1,120,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"                                (case (match &self ($next_player ($weapon_name $weapon)) $weapon_name) \n<br>\n                                     ( \n<br>\n                                         (%void% \n<br>\n                                             (case (match &self ($next_player ($character_name $character)) $character_name) \n<br>\n                                                 (")
found_search_result(metta_example,"new-state",1,152,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"!(let $test (new-state ()) \n<br>\n     (add-atom &self ( = (test-state) $test) ) \n<br>\n ) \n<br>\n  \n<br>\n (= (set-test-state $val)")
found_search_result(metta_example,"change-state!",1,157,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"    (let() (change-state! (test-state) $val) (empty))")
found_search_result(metta_example,"get-state",1,161,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"   (get-state (test-state))")
found_search_result(metta_example,"match",1,168,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"    (let ($r $w $c) (match &self (, \n<br>\n                     (character $c) ((checked (character $c)) &false) \n<br>\n                     (room $r) ((checked (room $r)) &false) \n<br>\n                     (weapon $w) ((checked (weapon $w)) &false)) ($r $w $c) ) \n<br>\n         (case  (match &self ($player ($room_name $r)) $room_name)")
found_search_result(metta_example,"case",1,175,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"                     (case (match &self ($player ($character_name $c)) $character_name) \n<br>\n                         ( \n<br>\n                             (%void% \n<br>\n                                 (case (match &self ($player ($weapon_name $w)) $weapon_name) \n<br>\n                                     (")
found_search_result(metta_example,"match",1,207,'../../tests/extended_compat/metta-examples/game_of_clue/game_of_clue.metta',"                                (let $x (match &self (,($player left $x) ((is_not_active $x) &false)) $x) \n<br>\n                                      (process-game $x) \n<br>\n                                 ) \n<br>\n                             ) \n<br>\n                         )")
found_search_result(metta_example,"import!",1,2,'../../tests/extended_compat/metta-examples/traverser/basic.metta',"!(import! &self tinkerpop-modern.metta)")
found_search_result(metta_example,"match",1,4,'../../tests/extended_compat/metta-examples/traverser/basic.metta',"(= (transform_ $pattern $query) (match &self $pattern (let $_ (add-atom &self $query) $query)))")
found_search_result(metta_example,"match",1,5,'../../tests/extended_compat/metta-examples/traverser/basic.metta',"(= (transform $pattern $query) (match &self $pattern $query))")
found_search_result(metta_example,"add-atom",1,1,'../../tests/extended_compat/metta-examples/traverser/creation.metta',"(= (added-atom! $x) (let $_ (add-atom &self $x) $x))")
found_search_result(metta_example,"match",1,3,'../../tests/extended_compat/metta-examples/traverser/creation.metta',"(= (transform $pattern $query) (match &self $pattern $query))")
found_search_result(metta_example,"match",1,4,'../../tests/extended_compat/metta-examples/traverser/creation.metta',"(= (transform_ $pattern $query) (match &self $pattern (added-atom! $query)))")
found_search_result(metta_example,"new-state",1,18,'../../tests/extended_compat/metta-examples/traverser/creation.metta',"!(bind! node# (new-state 0))")
found_search_result(metta_example,"get-state",1,20,'../../tests/extended_compat/metta-examples/traverser/creation.metta',"(= (addV $label) (added-atom! (Node $label (get-state node#))))")
found_search_result(metta_example,"change-state!",1,21,'../../tests/extended_compat/metta-examples/traverser/creation.metta',"(= (addV $label) (let $_ (change-state! node# (+ (get-state node#) 1)) (empty)))")
found_search_result(metta_example,"bind!",1,26,'../../tests/extended_compat/metta-examples/traverser/creation.metta',"!(bind! v1 (property age 29 (property name marko (addV person))))")
found_search_result(metta_example,"bind!",1,28,'../../tests/extended_compat/metta-examples/traverser/creation.metta',"!(bind! v2 (property lang java (property name lop (addV software))))")
found_search_result(metta_example,"println!",1,3,'../../tests/extended_compat/metta-examples/stack-based/interpreter.metta',"(= ((basic ($s $x)) say) (let $_ (println! $x) (basic $s)))")
found_search_result(metta_example,"println!",1,33,'../../tests/extended_compat/metta-examples/stack-based/rewrites.metta',"(= (($s $x) say) (let  $_ (println! $x) $s))")
found_search_result(metta_example,"cons",1,39,'../../tests/extended_compat/metta-examples/stack-based/rewrites.metta',"(= (($s (Cons $f $r)) apply) ((($s $f) $r) apply))")
found_search_result(metta_example,"cons",1,41,'../../tests/extended_compat/metta-examples/stack-based/rewrites.metta',"!(((E 6) (Cons dup (Cons mul Nil))) apply)")
found_search_result(metta_example,"car-atom",1,10,'../../tests/extended_compat/metta-examples/perfect-numbers/basic.metta',"(= (sumh $xs) (if (== $xs ()) 0 (+ (sumh (cdr-atom $xs)) (car-atom $xs))))")
found_search_result(metta_example,"collapse",1,13,'../../tests/extended_compat/metta-examples/perfect-numbers/basic.metta',"(= (psum $x) (sumh (collapse (pcond (range 1 (- $x 1) 1) $x))))")
found_search_result(metta_example,"cons",1,8,'../../tests/extended_compat/metta-examples/logic/memb.metta'," (= (memb $X (Cons $H $Tail)) \n<br>\n     (or (eq $X $H) (memb $X $Tail))) \n<br>\n  \n<br>\n ; find X that is member of both lists \n<br>\n !(let $res (and (memb $X (Cons 0 (Cons 2 Nil))) (memb $X (Cons 2 (Cons 3 Nil))))   (if $res $X None))")
found_search_result(metta_example,"let*",1,4,'../../tests/extended_compat/metta-examples/logic/all_any.metta',"       (let* (($head (car-atom $list)) \n<br>\n               ($tail (cdr-atom $list))) \n<br>\n               ($op $head (foldl $tail $init $op))) \n<br>\n    ) \n<br>\n )")
found_search_result(metta_example,"let*",1,17,'../../tests/extended_compat/metta-examples/logic/all_any.metta',"        (let* ( ($tail (cdr-atom $A)) \n<br>\n                 ($head (car-atom $A)) \n<br>\n                ) \n<br>\n             (if $head True (any $tail)))) \n<br>\n )")
found_search_result(metta_example,"cons",1,15,'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"; convert (a b c) to (Cons a (Cons b (Cons c Nil)))")
found_search_result(metta_example,"cdr-atom",1,18,'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"    (if (== () $x) Nil (let $cdr (cdr-atom $x) \n<br>\n                                 (Cons (car-atom $x) (makelist $cdr))) \n<br>\n     ) \n<br>\n ) \n<br>\n ")
found_search_result(metta_example,"cons",1,32,'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (memb $X (Cons $X $Tail)) True)")
found_search_result(metta_example,"cons",1,36,'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (memb $X (Cons $H $Tail)) \n<br>\n     (memb $X $Tail)) \n<br>\n  \n<br>\n  \n<br>\n (= (same $X $X) True)")
found_search_result(metta_example,"get-metatype",1,46,'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"    (let $type (get-metatype $x) (if (== $type Variable) True False))) \n<br>\n (= (nth-var-iter $index (Cons $H $Tail) $item $base) \n<br>\n         (nth-var $Tail $item $H $base $index)) \n<br>\n (= (nth-var $List $item $item $base $base) True) \n<br>\n (= (nth-var (Cons $H $Tail) $item $prev_head $N $base)")
found_search_result(metta_example,"cons",1,55,'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (nth $index (Cons $H $Tail) $item $base) \n<br>\n     (if (is-variable $index) \n<br>\n             (nth-var-iter $index (Cons $H $Tail) $item $base) \n<br>\n             (nth-det $index (Cons $H $Tail) $item $base)) ) \n<br>\n ")
found_search_result(metta_example,"cons",1,62,'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (nth-det $index (Cons $H $Tail) $item $base) \n<br>\n         (if (eq $index $base) (eq $H $item) (nth-det (- $index 1) $Tail $item 1))) \n<br>\n  \n<br>\n  \n<br>\n (= (nth1 $index $list $item) (nth $index $list $item 1))")
found_search_result(metta_example,"cons",1,73,'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (nextto-impl $x $y (Cons $x (Cons $y $Tail))) True)")
found_search_result(metta_example,"cons",1,77,'../../tests/extended_compat/metta-examples/logic/puzzle.metta',"(= (nextto-impl $x $y (Cons $head $Tail)) \n<br>\n     (nextto-impl $x $y $Tail)) \n<br>\n  \n<br>\n  \n<br>\n ")
found_search_result(metta_example,"union",1,4,'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"; !(union (range 1 13 1) (range 10 20 2))")
found_search_result(metta_example,"intersection",1,5,'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"; !(intersection (range 1 13 1) (range 10 20 2))")
found_search_result(metta_example,"subtraction",1,6,'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"; !(subtraction (range 10 20 2) (range 1 16 1))")
found_search_result(metta_example,"let*",1,9,'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"  (let* (($m3 (collapse (range 3 $n 3))) \n<br>\n          ($m5 (collapse (range 5 $n 5))) \n<br>\n          ($r (collapse (range 1 $n 1))) \n<br>\n          ($m35 (collapse (intersection (superpose $m3) (superpose $m5)))) \n<br>\n          ($m3n5 (collapse (subtraction (superpose $m3) (superpose $m5))))")
found_search_result(metta_example,"collapse",1,14,'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"         ($m5n3 (collapse (subtraction (superpose $m5) (superpose $m3))))")
found_search_result(metta_example,"collapse",1,15,'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"         ($m3m5 (collapse (union (superpose $m3) (superpose $m5))))")
found_search_result(metta_example,"collapse",1,16,'../../tests/extended_compat/metta-examples/fizzbuzz/constructive.metta',"         ($n3n5 (collapse (subtraction (superpose $r) (superpose $m3m5))))) \n<br>\n         (union (union (FizzBuzz (superpose $m35)) (Nothing (superpose $n3n5))) (union (Fizz (superpose $m3n5)) (Buzz (superpose $m5n3)))))) \n<br>\n  \n<br>\n !(unique (fizzbuzz 50))")
found_search_result(metta_example,"case",1,4,'../../tests/extended_compat/metta-examples/fizzbuzz/simple.metta',"(= (fizzbuzz_ $fizz $buzz $n) (case ($fizz $buzz) ( \n<br>\n     ((0 0) (FizzBuzz $n)) \n<br>\n     ((0 $_1) (Fizz $n)) \n<br>\n     (($_2 0) (Buzz $n)) \n<br>\n     ($_3 (Nothing $n))")
found_search_result(metta_example,"union",1,3,'../../tests/extended_compat/metta-examples/prob-dep-types/prob_dep_types.metta',"(= (Union $t1 $t2) $t1)")
found_search_result(metta_example,"union",1,4,'../../tests/extended_compat/metta-examples/prob-dep-types/prob_dep_types.metta',"(= (Union $t1 $t2) $t2)")
found_search_result(metta_example,"union",1,5,'../../tests/extended_compat/metta-examples/prob-dep-types/prob_dep_types.metta',"(: random (-> $t1 $t2 (Union $t1 $t2)))")
found_search_result(metta_example,"union",1,45,'../../tests/extended_compat/metta-examples/prob-dep-types/prob_dep_types.metta',"(= (Bool_U_Color) (Union Bool Color))")
found_search_result(metta_example,"union",1,3,'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"(= (Union $t1 $t2) $t1)")
found_search_result(metta_example,"union",1,4,'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"(= (Union $t1 $t2) $t2)")
found_search_result(metta_example,"match",1,77,'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"!(match &self (: A $t) ($t))")
found_search_result(metta_example,"match",1,79,'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"  (match &self (: A $t) ($t))")
found_search_result(metta_example,"match",1,85,'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"!(match &self (: a $t) ($t))")
found_search_result(metta_example,"match",1,87,'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"  (match &self (: a $t) ($t))")
found_search_result(metta_example,"match",1,89,'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"!(match &self (: a' $t) ($t))")
found_search_result(metta_example,"match",1,91,'../../tests/extended_compat/metta-examples/prob-dep-types/inf_order_probs.metta',"  (match &self (: a' $t) ($t))")
found_search_result(metta_example,"transfer!",2,3,'../../tests/extended_compat/metta-examples/recursion-schemes/src/schemes.metta',"!(transfer! \"base.metta\")")
found_search_result(metta_example,"import!",2,1,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"; !(import! &self logistics-i-1)")
found_search_result(metta_example,"import!",2,2,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"; !(import! &self blocks-i-1)")
found_search_result(metta_example,"import!",2,3,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(import! &self blocks-i-0)")
found_search_result(metta_example,"collapse",2,9,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (subset $subset $set) (if (== (collapse (subtraction (superpose $subset) (intersection (superpose $set) (superpose $subset)))) ()) True False))")
found_search_result(metta_example,"collapse",2,15,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (subset (collapse (pre (pick-up A))) (collapse (valuation (state 0)))) \n<br>\n               True) \n<br>\n  \n<br>\n ; equality of two sets, returns True iff s1 == s2 \n<br>\n (= (seteq $set1 $set2) (and (subset $set1 $set2) (subset $set2 $set1)))")
found_search_result(metta_example,"match",2,34,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (arity $prop) (match &self (arity $prop $n) $n))")
found_search_result(metta_example,"subtraction",2,43,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"  (union (subtraction (valuation (state $idx)) (eff-neg $action)) (eff-pos $action))")
found_search_result(metta_example,"new-state",2,55,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(bind! state# (new-state 1))")
found_search_result(metta_example,"get-state",2,56,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (idx) (- (get-state state#) 1))")
found_search_result(metta_example,"let*",2,60,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"   (let* (($current_id (get-state state#)) \n<br>\n           ($_1 (add-atom &self (= (valuation (state $current_id)) \n<br>\n                                (superpose $conditions)))) \n<br>\n           ($_2 (change-state! state# (+ (get-state state#) 1)))) \n<br>\n     $current_id))")
found_search_result(metta_example,"collapse",2,74,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (seteq (collapse (valuation (state 0))) \n<br>\n                      ((ontable A) (ontable B) (ontable C) (clear A) (clear B) (clear C) (handempty))) \n<br>\n                True) \n<br>\n  \n<br>\n !(assertEqual (match &self (= (valuation (state $idx)) $props) (if (seteq (collapse $props) (collapse (valuation (state 0)))) $idx (empty)))")
found_search_result(metta_example,"match",2,83,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (find_state $props) (match &self (= (valuation (state $idx)) $props2) \n<br>\n                        (if (seteq $props (collapse $props2)) $idx (empty)))) \n<br>\n  \n<br>\n  \n<br>\n !(assertEqual (find_state (collapse (valuation (state 0))))")
found_search_result(metta_example,"case",2,101,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"    (case (find_state $conditions) \n<br>\n          ((Empty (save $conditions)) \n<br>\n           ($idx $idx)) \n<br>\n     ) \n<br>\n )")
found_search_result(metta_example,"get-state",2,108,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',";               (- (get-state state#) 1)) \n<br>\n  \n<br>\n ; !(assertEqual (valuation (state (- (get-state state#) 1))) \n<br>\n ;               (superpose ((test s3)))) \n<br>\n ")
found_search_result(metta_example,"match",2,120,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (match &self (= (valuation (state $n)) $r) $n) \n<br>\n               (superpose (0 1))) \n<br>\n  \n<br>\n  \n<br>\n ; EXAMPLE: STACK BLOCKS A AND B")
found_search_result(metta_example,"collapse",2,127,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(assertEqual (valuation (state (save (collapse (eval (state 0) (pick-up A)))))) \n<br>\n               (superpose ((holding A) (ontable B) (ontable C) (clear B) (clear C)))) \n<br>\n ; stack A on B \n<br>\n !(assertEqual (valuation (state (save (collapse (eval (state (idx)) (stack A B)))))) \n<br>\n               (superpose ((on A B) (handempty)")
found_search_result(metta_example,"collapse",2,138,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"  (save (collapse (eval (state $idx) $action)))")
found_search_result(metta_example,"collapse",2,155,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (can-apply (state $idx) $action) (subset (collapse (pre $action)) (collapse (valuation (state $idx)))))")
found_search_result(metta_example,"match",2,168,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (all-actions) (match &self (action $name) $name))")
found_search_result(metta_example,"match",2,175,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (oftype $type) (match &self (isa $name $type) $name))")
found_search_result(metta_example,"match",2,184,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"; (= (ground $action) (fmap oftype (match &self (types $action ($x $y)) ($action $x $y))))")
found_search_result(metta_example,"match",2,186,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ()) ($action)))")
found_search_result(metta_example,"match",2,187,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x)) ($action (oftype $x))))")
found_search_result(metta_example,"match",2,188,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x $y)) ($action (oftype $x) (oftype $y))))")
found_search_result(metta_example,"match",2,189,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (ground $action) (match &self (types $action ($x $y $z)) ($action (oftype $x) (oftype $y) (oftype $z))))")
found_search_result(metta_example,"collapse",2,221,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (partial-apply-test $a) (if (can-apply (state 0) $a) ($a (collapse (eval (state 0) $a))) (empty)))")
found_search_result(metta_example,"let*",2,233,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"        (let* (($idx2 (save_if_new (collapse (eval (state $idx) $a)))) \n<br>\n               ($_1 (add-atom &self (edge (state $idx) (state $idx2) $a)))) \n<br>\n               (edge (state $idx) (state $idx2) $a)) \n<br>\n         (empty) \n<br>\n     )")
found_search_result(metta_example,"new-state",2,249,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(bind! expand# (new-state 0))")
found_search_result(metta_example,"get-state",2,250,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"(= (expand) (if (< (get-state expand#) (get-state state#)) \n<br>\n                 (let* (($_1 (add-edge (state (get-state expand#))(ground (all-actions)))) \n<br>\n                       ($_2 (change-state! expand# (+ (get-state expand#) 1))) \n<br>\n                       ($_3 (expand))) \n<br>\n                       (get-state expand#)")
found_search_result(metta_example,"get-state",2,263,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(get-state expand#)")
found_search_result(metta_example,"get-state",2,264,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(get-state state#)")
found_search_result(metta_example,"match",2,267,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-improved/queries.metta',"!(match &self (edge $x $y $z) (edge $x $y $z))")
found_search_result(metta_example,"import!",2,1,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta',"; !(import! &self blocks-domain.metta)")
found_search_result(metta_example,"import!",2,2,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta',"!(import! &self logistics-i-1_flat.metta)")
found_search_result(metta_example,"match",2,6,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta'," (match &self (precondition $action $y) $y)) \n<br>\n  \n<br>\n ; !(preconditions pick-up) \n<br>\n !(preconditions FLY-AIRPLANE)       ; > (at airplane loc-from) \n<br>\n ")
found_search_result(metta_example,"match",2,14,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (arity $prop $n) $n)) \n<br>\n !(arity at)                         ; > 2 \n<br>\n  \n<br>\n  \n<br>\n ; GET ALL PROPOSITIONS THAT HOLD IN A STATE")
found_search_result(metta_example,"match",2,20,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (holds $state $p) $p)) \n<br>\n  \n<br>\n  !(holds init)                  ; >[(in-city pos2 cit2), (at obj23 pos2), (in-city pos1 cit1), (at tru1 pos1), (at obj11 pos1), (in-city apt1 cit1), (at obj21 pos2), (at tru2 pos2), (at apn1 apt2), (at obj13 pos1), (at obj22 pos2), (in-city apt2 cit2), (at obj12 pos1)] \n<br>\n  \n<br>\n ")
found_search_result(metta_example,"match",2,28,'../../tests/extended_compat/metta-examples/strips/strips-to-metta-flat/queries_flat.metta',"    (match &self (holds $state $prop) $prop)) \n<br>\n  \n<br>\n !(holds init (at obj13 pos1))           ; > [(at obj13 pos1)] \n<br>\n !(holds init (at smt pos1))             ; > []")
found_search_result(metta_example,"match",2,23,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/instances.metta',"    (match &self \n<br>\n             (, (is-a $r $rel) \n<br>\n                (is-a $s $subj) \n<br>\n                ($r :ARG0 $s) \n<br>\n                (Fact $r $tv))")
found_search_result(metta_example,"match",2,28,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/instances.metta',"            (, (match &self ($r $role $res) \n<br>\n                      ($r $role $res)) \n<br>\n                 $tv) \n<br>\n     ) \n<br>\n )")
found_search_result(metta_example,"match",2,13,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/amr-connect.metta',"   (match &self (ROLE $concept $role $v) $role)) \n<br>\n  \n<br>\n (= (tell ($pred $arg0 $arg1)) \n<br>\n    (match &self (CONNECT ($pred $v0 $v1) $concept) \n<br>\n           ($concept ((get-role $concept $v0) $arg0)")
found_search_result(metta_example,"match",2,6,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',"   (let $r (match &self $pattern $template) \n<br>\n         (if (== $r (superpose ())) \n<br>\n             $else \n<br>\n             $r))) \n<br>\n ")
found_search_result(metta_example,"collapse",2,12,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',";!(== (collapse (match &self (likes-01 $x $y) (its $x $y))) ())")
found_search_result(metta_example,"match",2,13,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',";!(let $r (match &self (likes-01 $x $y) (its $x $y)) 1)")
found_search_result(metta_example,"match",2,15,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',";!(match &self (likes-001 $x $y) (its $x $y))")
found_search_result(metta_example,"bind!",2,17,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',"!(bind! &bk (new-space))")
found_search_result(metta_example,"match",2,29,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',";!(match &self (: $fact (Father person-001 $father)) $father)")
found_search_result(metta_example,"let*",2,35,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta'," (let* (($f (father person-001)) \n<br>\n         ($t (get-type $f)) \n<br>\n         ((Father $p1 $p2) $t)) \n<br>\n        $p2) \n<br>\n ")
found_search_result(metta_example,"get-type",2,40,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',"(let (Father $x $y) (get-type (father person-001)) $y)")
found_search_result(metta_example,"get-type",2,41,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',"(get-type father)")
found_search_result(metta_example,"get-type",2,42,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/dep-types.metta',"!(get-type (father person-001))")
found_search_result(metta_example,"match",2,9,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/user.metta',"   (match &self (, (is-a $x $Role) \n<br>\n                    (Has $Role $Prop)) \n<br>\n                 $Prop)) \n<br>\n  \n<br>\n (find-prop user)")
found_search_result(metta_example,"match",2,23,'../../tests/extended_compat/metta-examples/metta_amr/metta_to_amr/user.metta',"     (match &self ($prop $x $y) ($prop $y)))) \n<br>\n  \n<br>\n (= (get-prop-value $prop $x) \n<br>\n    (match &self ($prop $x $y) $y)) \n<br>\n ")
found_search_result(metta_example,"transfer!",3,1,'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/benchmark.metta',"; !(transfer! \"../schemes.metta\")")
found_search_result(metta_example,"transfer!",3,2,'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/benchmark.metta',"!(transfer! \"schemes.metta\")")
found_search_result(metta_example,"import!",3,1,'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/expression.metta',"; !(import! &self \"../schemes.metta\")")
found_search_result(metta_example,"import!",3,2,'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/expression.metta',"; !(import! &self ../schemes.metta)")
found_search_result(metta_example,"transfer!",3,3,'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/expression.metta',"!(transfer! \"schemes.metta\")")
found_search_result(metta_example,"match",3,45,'../../tests/extended_compat/metta-examples/recursion-schemes/src/examples/expression.metta',"!(match &self (= (expand $X) $Y) $X)")
