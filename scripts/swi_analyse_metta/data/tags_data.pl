eval_tag(python_src_metta_test,10,"program = '''",'../../../hyperon-experimental/python/tests/test_run_metta.py',"        program = '''\n            (isa red color)\n            (isa green color)\n            (isa blue color)\n            ;(isa comment color)\n            !(match &self (isa $color color) $color)\n\n            (= (f) (+ 2 3))\n            !(f)\n        '''\n\n        metta = MeTTa(env_builder=Environment.test_env())\n        self.assertEqualMettaRunnerResults(metta.run(program),\n            [metta.parse_all('red  green  blue'), metta.parse_all('5')])\n\n    def test_run_complex_query(self):\n        program = '''\n            (A B)\n            (C B)\n\n            !(match &self (, (A $x) (C $x)) $x)\n        '''\n\n        result = MeTTa(env_builder=Environment.test_env()).run(program)\n        self.assertEqual('[[B]]', repr(result))\n",0)
eval_tag(python_src_metta_test,37,"program = '''",'../../../hyperon-experimental/python/tests/test_run_metta.py',"        program = '''\n            (= (Concat (Cons $head1 Nil) $list2)\n               (Cons $head1 $list2))\n\n            (= (Concat (Cons $head1 (Cons $t1 $t11)) $list2)\n               (Cons $head1 (Concat (Cons $t1 $t11) $list2)))\n\n            (= (lst1) (Cons a1 (Cons a2 Nil)))\n            (= (lst2) (Cons b1 (Cons b2 Nil)))\n            !(Concat (lst1) (lst2))\n        '''\n\n        result = MeTTa(env_builder=Environment.test_env()).run(program)\n        self.assertEqual('[[(Cons a1 (Cons a2 (Cons b1 (Cons b2 Nil))))]]', repr(result))\n\n    def test_comments(self):\n        program = '''\n                (a ; 4)\n                  5)\n                !(match &self (a $W) $W)\n            '''\n\n        result = MeTTa(env_builder=Environment.test_env()).run(program)\n        self.assertEqual('[[5]]', repr(result))\n\n        program = '''",0)
eval_tag(python_src_metta_test,69,"assertequal(",'../../../hyperon-experimental/python/tests/test_run_metta.py',"        self.assertEqual('[[1]]', repr(result))",0)
eval_tag(python_src_metta_test,10,"metta.run(",'../../../hyperon-experimental/python/tests/test_pln_tv.py',"        metta.run('''\n                (= (min $a $b) (if (< $a $b) $a $b))\n                (= (s-tv (stv $s $c)) $s)\n                (= (c-tv (stv $s $c)) $c)\n                (= (stv (And $a $b))\n                   (stv (min (s-tv (stv $a)) (s-tv (stv $b)))\n                        (min (c-tv (stv $a)) (c-tv (stv $b)))))\n                (= (stv (P A)) (stv 0.5 0.8))\n                (= (stv (P B)) (stv 0.3 0.9))\n        ''')",0)
eval_tag(python_src_metta_test,20,"metta.run(",'../../../hyperon-experimental/python/tests/test_pln_tv.py',"        metta.run('''\n                (: A Concept)\n                (: B Concept)\n                (: P Predicate)\n        ''')",0)
eval_tag(python_src_metta_test,25,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_pln_tv.py',"        self.assertEqualMettaRunnerResults(\n            metta.run('!(stv (And (P A) (P B)))'),\n            [metta.parse_all('(stv 0.3 0.8)')])",0)
eval_tag(python_src_metta_test,28,"metta.run(",'../../../hyperon-experimental/python/tests/test_pln_tv.py',"        metta.run('''\n                (= (pln $expr) ($expr (stv $expr)))\n        ''')",0)
eval_tag(python_src_metta_test,31,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_pln_tv.py',"        self.assertEqualMettaRunnerResults(\n            metta.run('!(pln (And (P A) (P $x)))'),\n            [metta.parse_all('''\n                ((And (P A) (P A)) (stv 0.5 0.8))\n                ((And (P A) (P B)) (stv 0.3 0.8))\n            ''')])",0)
eval_tag(python_src_metta_test,12,"assertequal(",'../../../hyperon-experimental/python/tests/test_environment.py',"        self.assertEqual(Environment.config_dir(), \"/tmp/hyperon-test\")",0)
eval_tag(python_src_metta_test,63,"assertequal(",'../../../hyperon-experimental/python/tests/test_custom_space.py',"        self.assertEqual(kb.atom_count(), 2)",0)
eval_tag(python_src_metta_test,64,"assertequal(",'../../../hyperon-experimental/python/tests/test_custom_space.py',"        self.assertEqual(kb.get_payload().test_attrib, \"Test Space Payload Attrib\")",0)
eval_tag(python_src_metta_test,105,"assertequal(",'../../../hyperon-experimental/python/tests/test_custom_space.py',"        self.assertEqual(result_atom, space_atom)",0)
eval_tag(python_src_metta_test,121,"assertequal(",'../../../hyperon-experimental/python/tests/test_custom_space.py',"        self.assertEqual([[S(\"B\")]], result)",0)
eval_tag(python_src_metta_test,133,"assertequal(",'../../../hyperon-experimental/python/tests/test_custom_space.py',"        self.assertEqual(metta.space().get_payload().test_attrib, \"Test Space Payload Attrib\")",0)
eval_tag(python_src_metta_test,134,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_custom_space.py',"        self.assertEqualMettaRunnerResults(metta.run(\"!(match &self (= key $val) $val)\"),\n            [[S(\"val\")]]\n        )",0)
eval_tag(python_src_metta_test,10,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(\n            metta.parse_single(\"+\").get_grounded_type(),\n            metta.parse_single(\"*\").get_grounded_type())",0)
eval_tag(python_src_metta_test,13,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(\n            metta.run(\"!(+ (* 1 4) 2)\")[0][0].get_grounded_type(),\n            metta.parse_single(\"0\").get_grounded_type())",0)
eval_tag(python_src_metta_test,16,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(\n            metta.run(\"!(or True False)\")[0][0].get_grounded_type(),\n            metta.parse_single(\"False\").get_grounded_type())",0)
eval_tag(python_src_metta_test,19,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(\n            metta.run(\"!(> (* 2 2) 1)\")[0][0].get_grounded_type(),\n            metta.run(\"!(or True True)\")[0][0].get_grounded_type())",0)
eval_tag(python_src_metta_test,24,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(\n            metta.run(\"!(untop)\")[0][0],\n            metta.parse_single(\"()\"))",0)
eval_tag(python_src_metta_test,28,"metta.run(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"            metta.run(\"!(> 1 1)\")[0][0].get_grounded_type(),",0)
eval_tag(python_src_metta_test,29,"metta.run(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"            metta.run(\"!(+ 1 1)\")[0][0].get_grounded_type())\n\n    def test_higher_func(self):\n        metta = MeTTa(env_builder=Environment.test_env())\n        metta.register_atom(",0)
eval_tag(python_src_metta_test,42,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(metta.run(\"!((curry_num + 1) 2)\"),\n                         metta.run(\"! 3\"))",0)
eval_tag(python_src_metta_test,49,"metta.run(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        v1 = metta.run(\"!(id_num (+ 2 2))\")[0]",0)
eval_tag(python_src_metta_test,50,"metta.run(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        v2 = metta.run(\"! 4\")[0]",0)
eval_tag(python_src_metta_test,51,"metta.run(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        v3 = metta.run(\"!(as_int (+ 2 2))\")[0]",0)
eval_tag(python_src_metta_test,52,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(v1, v2)",0)
eval_tag(python_src_metta_test,53,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(v1[0].get_grounded_type(), v2[0].get_grounded_type())",0)
eval_tag(python_src_metta_test,55,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(metta.run(\"!(id_num untyp)\"), [metta.parse_all(\"(id_num untyp)\")])",0)
eval_tag(python_src_metta_test,56,"metta.run(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        metta.run(\"(: myAtom myType)\")",0)
eval_tag(python_src_metta_test,57,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(metta.run('''\n            !(id_num myAtom)\n            !(id_num False)\n            '''),\n            [[E(S('Error'), S('myAtom'), S('BadType'))]])",0)
eval_tag(python_src_metta_test,64,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(metta.run('''\n            !(id_atom 1)\n            !(id_atom myAtom)\n            !(id_atom untyp)\n            ''', flat=True),\n            metta.parse_all('''\n            1\n            myAtom\n            untyp\n            '''))",0)
eval_tag(python_src_metta_test,75,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(metta.run('''\n            !(id_poly_w 1)\n            !(id_poly_w myAtom)\n            !(id_poly_w untyp)\n            !(id_poly_w (+ 1 1))\n            !(+ 1 (id_poly_w 2))\n            ''', flat=True),\n            metta.parse_all('''\n             1\n             myAtom\n             untyp\n             2\n             3\n            ''')\n        )",0)
eval_tag(python_src_metta_test,92,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(metta.run('''\n            !(id_undef 1)\n            !(id_undef False)\n            !(id_undef (+ 1 1))\n            ''', flat=True),\n            metta.parse_all(\"1 False 2\"))",0)
eval_tag(python_src_metta_test,98,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounded_type.py',"        self.assertEqual(metta.run('''\n            !(id_undef myAtom)\n            !(id_undef untyp)\n            ''', flat=True),\n            metta.parse_all('''\n             (id_undef myAtom)\n             (id_undef untyp)\n            ''')\n        )",0)
eval_tag(python_src_metta_test,11,"assertequal(",'../../../hyperon-experimental/python/tests/test_metta.py',"        self.assertEqual(atom, E(S('A'), S('B')))",0)
eval_tag(python_src_metta_test,15,"assertequal(",'../../../hyperon-experimental/python/tests/test_metta.py',"        self.assertEqual(atom, E(S('C'), S('B')))",0)
eval_tag(python_src_metta_test,19,"assertequal(",'../../../hyperon-experimental/python/tests/test_metta.py',"        self.assertEqual(atom, E(S('F'), S('B')))",0)
eval_tag(python_src_metta_test,22,"program = '''",'../../../hyperon-experimental/python/tests/test_metta.py',"        program = '''\n            (= (And T T) T)\n            (= (frog $x)\n                (And (croaks $x)\n                     (eat_flies $x)))\n            (= (croaks Fritz) T)\n            (= (eat_flies Fritz) T)\n            (= (green $x) (frog $x))\n            !(green Fritz)\n        '''\n        runner = MeTTa(env_builder=Environment.test_env())\n        result = runner.run(program)\n\n        self.assertEqual([[S('T')]], result)\n\n    def test_metta_evaluate_atom(self):\n        program = '''\n            (= (And T T) T)\n            (= (frog $x)\n                (And (croaks $x)\n                     (eat_flies $x)))\n            (= (croaks Fritz) T)\n            (= (eat_flies Fritz) T)\n            (= (green $x) (frog $x))\n        '''\n        runner = MeTTa(env_builder=Environment.test_env())",0)
eval_tag(python_src_metta_test,51,"assertequal(",'../../../hyperon-experimental/python/tests/test_metta.py',"        self.assertEqual([S('T')], result)",0)
eval_tag(python_src_metta_test,54,"program = '''",'../../../hyperon-experimental/python/tests/test_metta.py',"        program = '''\n            !(+ 1 (+ 2 (+ 3 4)))\n        '''\n        runner = MeTTa(env_builder=Environment.test_env())\n        runner_state = RunnerState(runner, program)\n\n        step_count = 0\n        while not runner_state.is_complete():\n            runner_state.run_step()\n            step_count += 1\n\n        results = runner_state.current_results()\n        self.assertEqual(repr(results), \"[[10]]\")\n\n    def test_gnd_type_error(self):\n        program = '''\n          !(+ 2 \"String\")\n        '''\n        runner = MeTTa(env_builder=Environment.test_env())\n        result = runner.run(program)\n\n        self.assertEqual([[E(S('Error'), ValueAtom('String'), S('BadType'))]], result)\n\n    def test_runner_error(self):\n        program = '''\n          !(+ 2 3",0)
eval_tag(python_src_metta_test,86,"assertequal(",'../../../hyperon-experimental/python/tests/test_metta.py',"            self.assertEqual(e.args[0], 'Unexpected end of expression')",0)
eval_tag(python_src_metta_test,89,"program = '''",'../../../hyperon-experimental/python/tests/test_metta.py',"        program = '''\n          ; True is used as a Python grounded object\n          (grounded True)\n          ; import! is used as a Rust grounded object which can be\n          ; received from Python\n          !(match &self (grounded import!) Ok)\n        '''\n        runner = MeTTa(env_builder=Environment.test_env())\n        result = runner.run(program)\n\n        self.assertEqual([[]], result)\n",0)
eval_tag(python_src_metta_test,10,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqualMettaRunnerResults(metta.run(\"!(repr (my atom))\"),\n                                           [[ValueAtom(\"(my atom)\")]])",0)
eval_tag(python_src_metta_test,13,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqualMettaRunnerResults(metta.run(\"!(parse \\\"(my atom)\\\")\"),\n                                           [[E(S(\"my\"), S(\"atom\"))]])",0)
eval_tag(python_src_metta_test,17,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqualMettaRunnerResults(metta.run('!(parse \"\\\\\"A\\\\\"\")'),\n                                           [[(ValueAtom(\"A\"))]])",0)
eval_tag(python_src_metta_test,21,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqualMettaRunnerResults(metta.run('!(parse \"(A 2 \\'S\\')\")'),\n                                   [[E(S(\"A\"), ValueAtom(2), ValueAtom(Char(\"S\")))]])",0)
eval_tag(python_src_metta_test,24,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqualMettaRunnerResults(metta.run('!(stringToChars \"ABC\")'),\n                                           [[E(ValueAtom(Char(\"A\")), ValueAtom(Char(\"B\")), ValueAtom(Char(\"C\")))]])",0)
eval_tag(python_src_metta_test,27,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqualMettaRunnerResults(metta.run(\"!(charsToString ('A' 'B' 'C'))\"),\n                                           [[ValueAtom(\"ABC\")]])",0)
eval_tag(python_src_metta_test,32,"metta.run(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        metta.run('''\n                  ! (bind! &pow (py-atom math.pow (-> Number Number Number)))\n                  ! (bind! &math (py-atom math))\n        ''')",0)
eval_tag(python_src_metta_test,36,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('! (&pow 2 3)'),\n                         metta.run('! ((py-dot &math pow) 2 3)'))",0)
eval_tag(python_src_metta_test,38,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual([[ValueAtom(3)]],\n            metta.run('! ((py-dot &math floor) (py-dot &math pi))'))",0)
eval_tag(python_src_metta_test,40,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual([[ValueAtom('f')]],\n                         metta.run('! ((py-dot (py-atom \"{5: \\'f\\'}\") get) 5)'))",0)
eval_tag(python_src_metta_test,42,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual([[ValueAtom('5')]],\n                         metta.run('! ((py-atom str) 5)'))",0)
eval_tag(python_src_metta_test,44,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual([[ValueAtom(\"/usr\")]],\n            metta.run('''\n                ! ((py-dot (py-atom os) path.commonpath)\n                   (py-atom \"['/usr/lib', '/usr/local/lib']\"))\n        '''))",0)
eval_tag(python_src_metta_test,53,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqualMettaRunnerResults(metta.run(\"!(+ 1 2)\"), [[ValueAtom(3)]])",0)
eval_tag(python_src_metta_test,54,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqualMettaRunnerResults(metta.run(\"!(+ 5.0 -2.0)\"), [[ValueAtom(3.0)]])",0)
eval_tag(python_src_metta_test,55,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqualMettaRunnerResults(metta.run(\"!(+ 1.0e3 2.0e3)\"), [[ValueAtom(3e3)]])",0)
eval_tag(python_src_metta_test,56,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqualMettaRunnerResults(metta.run(\"!(+ 5e-3 -2e-3)\"), [[ValueAtom(3e-3)]])",0)
eval_tag(python_src_metta_test,60,"metta.run(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        metta.run('''(= (intent regex:\"^Hello[[\\.|!]]?$\") (Intent Hello))\n                    (= (intent regex:\"Good~morning.*[[\\\\.|!]]?\") (Intent Hello))\n                    (= (intent $x) (empty))''')",0)
eval_tag(python_src_metta_test,63,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(intent \"hello\")', True), [E(S(\"Intent\"), S(\"Hello\"))])",0)
eval_tag(python_src_metta_test,65,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(intent \"Good morning my friend!\")', True),\n                                           [E(S(\"Intent\"), S(\"Hello\"))])",0)
eval_tag(python_src_metta_test,68,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(intent \"Hi\")', True), [])",0)
eval_tag(python_src_metta_test,72,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(py-list ())'), [[ValueAtom( [] )]])",0)
eval_tag(python_src_metta_test,73,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(py-tuple ())'), [[ValueAtom( () )]])",0)
eval_tag(python_src_metta_test,74,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(py-dict ())'), [[ValueAtom( {} )]])",0)
eval_tag(python_src_metta_test,75,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(py-tuple (1 (2 (3 \"3\")) (py-atom list)))'), [[ValueAtom((1,(2,(3, \"3\")), list))]])",0)
eval_tag(python_src_metta_test,76,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(py-list (1 2 (4.5 3)))'), [[ValueAtom( [1,2,[4.5,3]] )]])",0)
eval_tag(python_src_metta_test,77,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(py-list (1 2 (py-tuple (3 4))))'), [[ValueAtom( [1,2, (3,4)] )]])",0)
eval_tag(python_src_metta_test,79,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(py-dict ((a \"b\") (\"b\" \"c\")))'), [[ValueAtom( {\"a\":\"b\", \"b\":\"c\"} )]])",0)
eval_tag(python_src_metta_test,81,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(str(metta.run('!(py-list (a b c))')[0][0].get_object().content[2]), \"c\")",0)
eval_tag(python_src_metta_test,83,"assertequal(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertEqual(metta.run('!(py-chain (1 2 3 4))'), [[ValueAtom( 7 )]])",0)
eval_tag(python_src_metta_test,85,"metta.run(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertRaises(Exception, metta.run('!(py-dict ((\"a\" \"b\" \"c\") (\"b\" \"c\")))'))",0)
eval_tag(python_src_metta_test,88,"metta.run(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertRaises(Exception, metta.run('!(py-dict ((\"a\") (\"b\" \"c\")))'))",0)
eval_tag(python_src_metta_test,91,"metta.run(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertRaises(Exception, metta.run('!(py-dict (\"a\" \"b\") (\"b\" \"c\"))'))",0)
eval_tag(python_src_metta_test,94,"metta.run(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertRaises(Exception, metta.run('!(py-list 1 2)'))",0)
eval_tag(python_src_metta_test,97,"metta.run(",'../../../hyperon-experimental/python/tests/test_stdlib.py',"        self.assertRaises(Exception, metta.run('!(py-list 1)'))",0)
eval_tag(python_src_metta_test,42,"metta.run(",'../../../hyperon-experimental/python/tests/test_minecraft.py',"        metta.run('''\n            (= (wood) (spruce-wood))\n            (= (spruce-wood) (mine spruce-tree hand))\n\n            (= (four-planks) (craft four-planks inventory (wood)))\n            (= (pack $n planks) (if (> $n 0) (allof (four-planks) (pack (- $n 4) planks)) nop))\n\n            (= (crafting-table) (craft crafting-table inventory  (pack 4 planks)))\n\n            (= (stick) (craft stick inventory (pack 2 planks)))\n            (= (pack $n sticks) (if (> $n 0) (allof (stick) (pack (- $n 1) sticks)) nop))\n\n            (= (wooden-pickaxe) (craft wooden-pickaxe\n                           (crafting-table) (allof (pack 3 planks) (pack 2 sticks))))\n\n            (= (cobblestone) (mine cobble-ore (wooden-pickaxe)))\n            (= (pack $n cobblestones) (if (> $n 0) (allof (cobblestone) (pack (- $n 1) cobblestones)) nop))\n\n            (= (stone-pickaxe) (craft stone-pickaxe (crafting-table)\n                           (allof (pack 3 cobblestones) (pack 2 sticks))))\n        ''')",0)
eval_tag(python_src_metta_test,65,"metta.run(",'../../../hyperon-experimental/python/tests/test_minecraft.py',"        metta.run('!(wooden-pickaxe)')",0)
eval_tag(python_src_metta_test,77,"metta.run(",'../../../hyperon-experimental/python/tests/test_minecraft.py',"        metta.run('''\n            (= (can-be-mined diamond) True)\n            (= (can-be-made diamond) False)\n            (= (diamond mined-using iron-pickaxe) True)\n            (= (diamond mined-from diamond-ore) True)\n\n            (= (can-be-made iron-pickaxe) True)\n            (= (can-be-mined iron-pickaxe) False)\n            (= (iron-pickaxe made-from\n                (, stick stick iron-ingot iron-ingot iron-ingot)) True)\n            (= (iron-pickaxe made-at crafting-table) True)\n\n            (= (can-be-made crafting-table) True)\n            (= (can-be-mined crafting-table) False)\n            (= (crafting-table made-from (pack 4 plank)) True)\n            (= (crafting-table made-at inventory) True)\n\n            (= (can-be-made inventory) False)\n            (= (can-be-mined inventory) False)\n\n            (= (make $x) (if (and ($x made-from $comp) ($x made-at $tool))\n                             (, (get $tool) (get $comp) (do-make $x $tool $comp)) (empty)))\n\n            (= (mine $x) (if (and ($x mined-using $tool) ($x mined-from $source))\n                             (, (get $tool) (find $source) (do-mine $x $source $tool)) (empty)))\n",0)
eval_tag(python_src_metta_test,107,"metta.run(",'../../../hyperon-experimental/python/tests/test_minecraft.py',"        metta.run('!(get diamond)')",0)
eval_tag(python_src_metta_test,18,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(result, [Atoms.UNIT])",0)
eval_tag(python_src_metta_test,20,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(repr(result), '[((py-dot &obj foo))]')",0)
eval_tag(python_src_metta_test,27,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(\n            metta.run('''\n             ! (&f 2 4 6)\n             ! (&f 0)\n             ! (&f (Kwargs (y 4)))\n             ! (&f 2 (Kwargs (z 1)))\n             ! (&f 0 (Kwargs (z 1) (y 1)))\n            '''),\n            [[ValueAtom(12)],\n             [ValueAtom(6)],\n             [ValueAtom(9)],\n             [ValueAtom(5)],\n             [ValueAtom(2)]]\n            )",0)
eval_tag(python_src_metta_test,44,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run(\n        '''\n            (= (remove-st $var)\n               (match &self (state $var $y)\n                  (remove-atom &self (state $var $y))))\n            (= (change-st $var $value)\n               (superpose ((remove-st $var)\n                  (add-atom &self (state $var $value)))))\n            (= (get-st $var)\n               (match &self (state $var $value) $value))\n        ''')",0)
eval_tag(python_src_metta_test,55,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('!(change-st (name id-001) Fritz)')",0)
eval_tag(python_src_metta_test,56,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run('!(get-st (name id-001))'),\n                         [[S('Fritz')]])",0)
eval_tag(python_src_metta_test,58,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('!(change-st (name id-001) Sam)')",0)
eval_tag(python_src_metta_test,59,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run('!(get-st (name id-001))'),\n                         [[S('Sam')]])",0)
eval_tag(python_src_metta_test,70,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(metta.run('! pglob')[0][0].get_object().value.get(), 10)",0)
eval_tag(python_src_metta_test,71,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('!((py-dot (Setter pglob 5) act))')",0)
eval_tag(python_src_metta_test,72,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(pglob.get(), 5)",0)
eval_tag(python_src_metta_test,73,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(metta.run('! pglob')[0][0].get_object().value.get(), 5)",0)
eval_tag(python_src_metta_test,74,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('!((py-dot (Setter ploc 5) let))')",0)
eval_tag(python_src_metta_test,75,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(ploc, 10)",0)
eval_tag(python_src_metta_test,76,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(metta.run('! ploc')[0][0].get_object().value, 10)",0)
eval_tag(python_src_metta_test,81,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(t.get_children()[1].get_children()[1].get_object().value, 5)",0)
eval_tag(python_src_metta_test,82,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(metta.run('! ploc')[0][0].get_object().value, 10)",0)
eval_tag(python_src_metta_test,85,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('!((py-dot (Setter ploca 5) let))')",0)
eval_tag(python_src_metta_test,86,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(metta.run('! ploca')[0][0].get_object().value, 10)",0)
eval_tag(python_src_metta_test,87,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(ploca.get_object().value, 10)",0)
eval_tag(python_src_metta_test,88,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('!((py-dot (SetAtom ploca 5) latom))')",0)
eval_tag(python_src_metta_test,89,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(metta.run('! ploca')[0][0].get_object().value, 5)",0)
eval_tag(python_src_metta_test,90,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(ploca.get_object().value, 5)",0)
eval_tag(python_src_metta_test,95,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('''\n            (= (croaks Fritz) True)\n            (= (chirps Tweety) True)\n            (= (yellow Tweety) True)\n            (= (eats_flies Tweety) True)\n            (= (eats_flies Fritz) True)\n        ''')",0)
eval_tag(python_src_metta_test,103,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        fritz_frog = metta.run('!(if (and (croaks $x) (eats_flies $x)) (= (frog $x) True) nop)')[0]",0)
eval_tag(python_src_metta_test,104,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(metta.parse_all('(= (frog Fritz) True)'), fritz_frog)",0)
eval_tag(python_src_metta_test,107,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults([metta.parse_all('(= (green Fritz) True)')],\n                metta.run('!(if (frog $x) (= (green $x) True) nop)'))",0)
eval_tag(python_src_metta_test,113,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('''\n           (= (: (apply\\' $f $x) $r) (and (: $f (=> $a $r)) (: $x $a)))\n\n           (= (: reverse (=> String String)) True)\n           (= (: \"Hello\" String) True)\n        ''')",0)
eval_tag(python_src_metta_test,120,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        output = metta.run('!(if (: (apply\\' reverse \"Hello\") $t) $t Wrong)')",0)
eval_tag(python_src_metta_test,121,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(output, [[S('String')]])",0)
eval_tag(python_src_metta_test,126,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('''\n           (= (eq $x $x) True)\n           (= (plus Z $y) $y)\n           (= (plus (S $k) $y) (S (plus $k $y)))\n        ''')",0)
eval_tag(python_src_metta_test,132,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run('''\n            !(eq (+ 2 2) 4)\n            !(eq (+ 2 3) 4)\n            !(eq (plus Z $n) $n)\n            '''),\n            [[ValueAtom(True)],\n             metta.parse_all('(eq 5 4)'),\n             [ValueAtom(True)]\n            ]\n        )",0)
eval_tag(python_src_metta_test,142,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        output = metta.run('!(eq (plus (S Z) $n) $n)')",0)
eval_tag(python_src_metta_test,161,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta1.run('!(inverse B)'), [[S('A')]])",0)
eval_tag(python_src_metta_test,162,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta2.run('!(find-in &space1 B)'), [[S('A')]])",0)
eval_tag(python_src_metta_test,163,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta2.run('!(find-in &self B)'), [[S('C')]])",0)
eval_tag(python_src_metta_test,164,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta2.run('!(borrow &space1 (inverse B))'), [[S('A')]])",0)
eval_tag(python_src_metta_test,165,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta2.run('!(borrow &space1 (how-it-works?))'), [[S('success')]])",0)
eval_tag(python_src_metta_test,166,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta1.run('!(how-it-works?)'), [[S('failure')]])",0)
eval_tag(python_src_metta_test,170,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('''\n            (= (:? $c)\n               (match &self (:= $c $t) $t))\n            (= (:? ($c $a))\n               (let $at (:? $a)\n                    (match &self (:= ($c $at) $t) $t)))\n            (= (:? ($c $a $b))\n               (let* (($at (:? $a))\n                      ($bt (:? $b)))\n                     (match &self (:= ($c $at $bt) $t) $t)))\n\n            (= (:check $c $t)\n               (match &self (:= $c $t) T))\n            (= (:check ($c $a) $t)\n               (let $at (:? $a)\n                    (match &self (:= ($c $at) $t) T)))\n            (= (:check ($c $a $b) $t)\n               (let* (($at (:? $a))\n                      ($bt (:? $b)))\n                     (match &self (:= ($c $at $bt) $t) T)))\n\n            (:= (= $t $t) Prop)\n\n            (:= Entity Prop)\n            (:= (Human Entity) Prop)\n            (:= Socrates Entity)",0)
eval_tag(python_src_metta_test,211,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run('''\n            !(:? (HumansAreMortal SocratesIsHuman))\n            !(:check (HumansAreMortal SocratesIsHuman) (Mortal Socrates))\n            !(:? (= SocratesIsMortal (HumansAreMortal SocratesIsHuman)))\n            !(:check (= (Mortal Plato) (Mortal Socrates)) Prop)\n            !(:check (= (Human Socrates) (Mortal Socrates)) Prop)\n            !(:? (GreenAndCroaksIsFrog SamIsGreen SamCroaks))\n            '''),\n            [[E(S('Mortal'), S('Socrates'))],\n             [S('T')],\n             [S('Prop')],\n             [S('T')],\n             [S('T')], # they are both of Prop type and can be equated\n             [E(S('Frog'), S('Sam'))]\n            ]\n        )",0)
eval_tag(python_src_metta_test,227,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run('''\n            !(:check (= SocratesIsHuman SocratesIsMortal) Prop)\n            !(:? (SocratesIsHuman (Human Socrates)))\n            !(:? (Human Time))\n            '''),\n            [[], [], []]\n        )",0)
eval_tag(python_src_metta_test,236,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('''\n            (= (:? $c)\n               (match &self (:: $c $t) $t))\n            (= (:? ($c $a))\n               (let $at (:? $a)\n                    (match &self (:: $c (-> $at $t)) $t)))\n            (= (:? ($c $a $b))\n               (let* (($at (:? $a))\n                      ($bt (:? $b)))\n                     (match &self (:: $c (-> $at $bt $t)) $t)))\n\n            (:: = (-> $t $t Type))\n\n            (:: Entity Type)\n            (:: Human (-> Entity Type))\n            (:: Socrates Entity)\n            (:: Plato Entity)\n            (:: Mortal (-> Entity Type))\n            (:: HumansAreMortal (-> (Human $t) (Mortal $t)))\n            (:: SocratesIsHuman (Human Socrates))\n            (:: SocratesIsMortal (Mortal Socrates))\n        ''')",0)
eval_tag(python_src_metta_test,258,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run('''\n            !(:? (Human Plato))\n            !(:? (Human Time))\n            !(:? (HumansAreMortal SocratesIsHuman))\n            !(:? (= SocratesIsMortal (HumansAreMortal SocratesIsHuman)))\n            !(:? (= Human Entity))\n            !(:? (= (Human Socrates) Plato))\n            !(:? (= SocratesIsHuman SocratesIsMortal))\n            !(:? (= (Human Socrates) (Human Plato)))\n            !(:? (= Human Mortal))\n            !(:? (= HumansAreMortal Mortal))\n            '''),\n            [[S('Type')],\n             [],\n             [E(S('Mortal'), S('Socrates'))],\n             [S('Type')],\n             [],\n             [],\n             [],\n             [S('Type')],\n             [S('Type')],\n             []\n            ]\n        )",0)
eval_tag(python_src_metta_test,282,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run(\"!(:? (HumansAreMortal (Human Socrates)))\"), [[]])",0)
eval_tag(python_src_metta_test,286,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('''\n            (= (perform (visit $x)) (perform (lunch-order $x)))\n            (= (perform (visit $x)) (perform (health-check $x)))\n\n            (impl (is-achieved (visit $x))\n                (And (is-achieved (lunch-order $x)) (is-achieved (health-check $x))))\n\n            (= (achieve $goal)\n                (match &self (impl (is-achieved $goal)\n                                (And (is-achieved $subgoal1) (is-achieved $subgoal2)))\n                    (do $subgoal1 $subgoal2)))\n\n            (= (achieve (health-check Kim)) True)\n            (= (achieve (lunch-order Kim)) False)\n        ''')",0)
eval_tag(python_src_metta_test,301,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run('''\n            !(perform (visit Kim))\n            !(achieve (visit Kim))\n            '''),\n            [metta.parse_all('(perform (lunch-order Kim)) (perform (health-check Kim))'),\n             metta.parse_all('(do (lunch-order Kim) (health-check Kim))')]\n        )",0)
eval_tag(python_src_metta_test,308,"metta.run(",'../../../hyperon-experimental/python/tests/test_examples.py',"        metta.run('''\n            (= (do $goal1 $goal2) (achieve $goal1))\n            (= (do $goal1 $goal2) (achieve $goal2))\n        ''')",0)
eval_tag(python_src_metta_test,312,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run('!(achieve (visit Kim))'),\n            [metta.parse_all('False True')])",0)
eval_tag(python_src_metta_test,317,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(repr(metta.run(\"!('A')\")), \"[[('A')]]\")",0)
eval_tag(python_src_metta_test,318,"assertequal(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqual(repr(metta.run('!(\"A\")')), '[[(\"A\")]]')",0)
eval_tag(python_src_metta_test,319,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run(\"!(get-type 'A')\"), [[S('Char')]])",0)
eval_tag(python_src_metta_test,320,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_examples.py',"        self.assertEqualMettaRunnerResults(metta.run('!(get-type \"A\")'), [[S('String')]])",0)
eval_tag(python_src_metta_test,53,"assertequalmettarunnerresults(",'../../../hyperon-experimental/python/tests/test_common.py',"    def assertEqualMettaRunnerResults(self, left, right):",0)
eval_tag(python_src_metta_test,58,"assertequal(",'../../../hyperon-experimental/python/tests/test_common.py',"        self.assertEqual(len(actual), len(expected),\n                \"Actual and expected contains different number of atoms:\" +\n                f\"\\n{actual}\\n{expected}\")",0)
eval_tag(python_src_metta_test,110,"assertequal(",'../../../hyperon-experimental/python/tests/test_minelogy.py',"        self.assertEqual(repr(output),\n            '[(do-mine ((: stone type) (: stone variant)))]')",0)
eval_tag(python_src_metta_test,8,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(S(\"a\"), S(\"a\"))",0)
eval_tag(python_src_metta_test,12,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(str(S(\"a\")), \"a\")",0)
eval_tag(python_src_metta_test,15,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(S(\"a\").get_metatype(), AtomKind.SYMBOL)",0)
eval_tag(python_src_metta_test,18,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(S(\"a\").get_name(), \"a\")",0)
eval_tag(python_src_metta_test,21,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(S(\"Ð·Ð´Ñ\u0080Ð°Ð²Ñ\u0081Ñ\u0082Ð²Ñ\u0083Ð¹Ñ\u0082Ðµ\").get_name(), \"Ð·Ð´Ñ\u0080Ð°Ð²Ñ\u0081Ñ\u0082Ð²Ñ\u0083Ð¹Ñ\u0082Ðµ\")",0)
eval_tag(python_src_metta_test,24,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(V(\"x\"), V(\"x\"))",0)
eval_tag(python_src_metta_test,28,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(str(V(\"x\")), \"$x\")",0)
eval_tag(python_src_metta_test,31,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(V(\"x\").get_metatype(), AtomKind.VARIABLE)",0)
eval_tag(python_src_metta_test,34,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(V(\"x\").get_name(), \"x\")",0)
eval_tag(python_src_metta_test,37,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(ValueAtom(1.0), ValueAtom(1.0))",0)
eval_tag(python_src_metta_test,41,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(str(ValueAtom(1.0)), \"1.0\")",0)
eval_tag(python_src_metta_test,42,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(str(ValueAtom(\"1.0\")), '\"1.0\"')",0)
eval_tag(python_src_metta_test,45,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(ValueAtom(1.0).get_metatype(), AtomKind.GROUNDED)",0)
eval_tag(python_src_metta_test,49,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(atom.get_grounded_type(), S(\"Float\"))",0)
eval_tag(python_src_metta_test,54,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(\"Method copy should be implemented by grounded object\",\n                        str(context.exception))",0)
eval_tag(python_src_metta_test,60,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(res, [ValueAtom(2.0)])",0)
eval_tag(python_src_metta_test,63,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(E(S(\"+\"), S(\"1\"), S(\"2\")),\n                E(S(\"+\"), S(\"1\"), S(\"2\")))",0)
eval_tag(python_src_metta_test,67,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(E(x2Atom, ValueAtom(1.0)),\n                E(x2Atom, ValueAtom(1.0)))",0)
eval_tag(python_src_metta_test,71,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(str(E(x2Atom, ValueAtom(1.0))), \"(*2 1.0)\")",0)
eval_tag(python_src_metta_test,74,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(E(x2Atom, ValueAtom(1.0)).get_metatype(), AtomKind.EXPR)",0)
eval_tag(python_src_metta_test,77,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(E(x2Atom, ValueAtom(1.0)).get_children(),\n                [x2Atom, ValueAtom(1.0)])",0)
eval_tag(python_src_metta_test,86,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(kb_a.get_atoms(), kb_b.get_atoms())",0)
eval_tag(python_src_metta_test,87,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(kb_a, kb_c)",0)
eval_tag(python_src_metta_test,93,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(interpret(space, x2), [ValueAtom(2)])",0)
eval_tag(python_src_metta_test,102,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(interpret(space, E(Atoms.METTA, expr, AtomType.UNDEFINED, G(space))),\n                [E(S('Error'), expr, S('Grounded operation which is defined using unwrap=False should return atom instead of Python type'))])",0)
eval_tag(python_src_metta_test,115,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(interpret(space, printExpr), [E()])",0)
eval_tag(python_src_metta_test,121,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(interpret(space, expr),\n                [E(noReduceAtom, ValueAtom(1))])",0)
eval_tag(python_src_metta_test,129,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(AtomKind.SYMBOL.name, str(result[0]['atom_type']))",0)
eval_tag(python_src_metta_test,131,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(AtomKind.EXPR.name, str(result[0]['atom_type']))",0)
eval_tag(python_src_metta_test,134,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(AtomKind.GROUNDED.name, str(result[0]['atom_type']))",0)
eval_tag(python_src_metta_test,136,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom.py',"        self.assertEqual(S(\"MatchableAtom\").get_name(), str(result[0]['Z']))",0)
eval_tag(python_src_metta_test,16,"assertequal(",'../../../hyperon-experimental/python/tests/test_extend.py',"        self.assertEqual(\n            metta.run('''\n              !(import! &self extension)\n              !(get-by-key &my-dict \"A\")\n              !(get-by-key &my-dict 6)\n            '''),\n            [[E()],\n             [ValueAtom(5)],\n             [ValueAtom('B')]])",0)
eval_tag(python_src_metta_test,25,"assertequal(",'../../../hyperon-experimental/python/tests/test_extend.py',"        self.assertEqual(\n              metta.run('! &runner')[0][0].get_object().value, metta)",0)
eval_tag(python_src_metta_test,35,"assertequal(",'../../../hyperon-experimental/python/tests/test_extend.py',"        self.assertEqual(\n            metta.run('''\n              !(import! &self ext_dir)\n              !(get-by-key &my-dict \"A\")\n              !(get-by-key &my-dict 6)\n            '''),\n            [[E()],\n             [ValueAtom(5)],\n             [ValueAtom('B')]])",0)
eval_tag(python_src_metta_test,44,"assertequal(",'../../../hyperon-experimental/python/tests/test_extend.py',"        self.assertEqual(\n              metta.run('! &runner')[0][0].get_object().value, metta)",0)
eval_tag(python_src_metta_test,53,"assertequal(",'../../../hyperon-experimental/python/tests/test_extend.py',"        self.assertEqual(\n            metta.run('''\n              !(import! &self ext_recursive:level-2:ext_nested)\n              !(get-by-key &my-dict \"A\")\n              !(get-by-key &my-dict 6)\n            '''),\n            [[E()],\n             [ValueAtom(5)],\n             [ValueAtom('B')]])",0)
eval_tag(python_src_metta_test,62,"assertequal(",'../../../hyperon-experimental/python/tests/test_extend.py',"        self.assertEqual(\n              metta.run('! &runner')[0][0].get_object().value, metta)",0)
eval_tag(python_src_metta_test,73,"assertequal(",'../../../hyperon-experimental/python/tests/test_extend.py',"        self.assertEqual(g_object, None)",0)
eval_tag(python_src_metta_test,75,"metta.run(",'../../../hyperon-experimental/python/tests/test_extend.py',"        metta.run('''\n          !(import! &self extension)\n          !(set-global! 42)\n        ''')",0)
eval_tag(python_src_metta_test,79,"assertequal(",'../../../hyperon-experimental/python/tests/test_extend.py',"        self.assertEqual(\n          metta.run('!(get-global)'),\n          metta.run('! 42'))",0)
eval_tag(python_src_metta_test,83,"assertequal(",'../../../hyperon-experimental/python/tests/test_extend.py',"        self.assertEqual(g_object, 42)",0)
eval_tag(python_src_metta_test,92,"metta.run(",'../../../hyperon-experimental/python/tests/test_extend.py',"        result = metta.run(\"!(import! &self error_pyext)\")",0)
eval_tag(python_src_metta_test,93,"assertequal(",'../../../hyperon-experimental/python/tests/test_extend.py',"        self.assertEqual(S('Error'), result[0][0].get_children()[0])",0)
eval_tag(python_src_metta_test,20,"assertequal(",'../../../hyperon-experimental/python/tests/test_modules.py',"        self.assertEqual(result[0].get_object().content, 3.14159)",0)
eval_tag(python_src_metta_test,24,"metta.run(",'../../../hyperon-experimental/python/tests/test_modules.py',"        result = metta.run(\"\"\"\n            (three isprime)\n            !(match &self ($x isprime) $x)\n            !(include test_include)\n            !(match &self ($x isprime) $x)\n        \"\"\")",0)
eval_tag(python_src_metta_test,33,"metta.run(",'../../../hyperon-experimental/python/tests/test_modules.py',"        result = metta.run(\"!(match &self ($x notprime) $x)\")",0)
eval_tag(python_src_metta_test,34,"assertequal(",'../../../hyperon-experimental/python/tests/test_modules.py',"        self.assertEqual(result[0], [S(\"six\")])",0)
eval_tag(python_src_metta_test,54,"assertequal(",'../../../hyperon-experimental/python/tests/test_grounding_space.py',"        self.assertEqual([[S(\"B\")]], result)",0)
eval_tag(python_src_metta_test,15,"metta.run(",'../../../hyperon-experimental/python/tests/test_load.py',"        metta.run(f'''\n            !(bind! &space (new-space))\n            !(load-ascii &space {test_file})\n        ''')",0)
eval_tag(python_src_metta_test,19,"metta.run(",'../../../hyperon-experimental/python/tests/test_load.py',"        content = metta.run(\"!(match &space $x $x)\")[0]",0)
eval_tag(python_src_metta_test,29,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom_type.py',"        self.assertEqual(get_atom_types(space, E(S(\"foo\"), S(\"a\"))), [S(\"B\")])",0)
eval_tag(python_src_metta_test,30,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom_type.py',"        self.assertEqual(get_atom_types(space, E(S(\"foo\"), S(\"b\"))),\n                [])",0)
eval_tag(python_src_metta_test,32,"assertequal(",'../../../hyperon-experimental/python/tests/test_atom_type.py',"        self.assertEqual(get_atom_types(space, S(\"foo\")), [E(S(\"->\"), S(\"A\"), S(\"B\"))])",0)
eval_tag(python_src_metta_test,30,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(bindings_as_str, \"{ $x = y, $a = b }\")",0)
eval_tag(python_src_metta_test,38,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"            self.assertEqual(self.emptyBindings, cloned_empty)",0)
eval_tag(python_src_metta_test,42,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"                self.assertEqual(self.bindings, cloned)",0)
eval_tag(python_src_metta_test,43,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"                self.assertEqual(cloned, cloned_explicitly)",0)
eval_tag(python_src_metta_test,45,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(self.bindings, self.bindings)",0)
eval_tag(python_src_metta_test,46,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(self.emptyBindings, self.emptyBindings)",0)
eval_tag(python_src_metta_test,51,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(BindingsSet(self.emptyBindings), merged_empty)",0)
eval_tag(python_src_metta_test,55,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(merged_with_empty_rl, merged_with_empty_lr)",0)
eval_tag(python_src_metta_test,56,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(merged_with_empty_rl, BindingsSet(self.bindings))",0)
eval_tag(python_src_metta_test,59,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(merged_self, BindingsSet(self.bindings))",0)
eval_tag(python_src_metta_test,72,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(atom_expected, atom_resolved)",0)
eval_tag(python_src_metta_test,83,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"            self.assertEqual(expected_name, x[0])",0)
eval_tag(python_src_metta_test,84,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"            self.assertEqual(expected_atom, x[1])",0)
eval_tag(python_src_metta_test,105,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(set, no_longer_empty_set);",0)
eval_tag(python_src_metta_test,110,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(set, set_2)",0)
eval_tag(python_src_metta_test,113,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(set, cloned_set)",0)
eval_tag(python_src_metta_test,123,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(1, bindings_counter)",0)
eval_tag(python_src_metta_test,137,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(len(set_bindings_list), 1)",0)
eval_tag(python_src_metta_test,147,"assertequal(",'../../../hyperon-experimental/python/tests/test_bindings.py',"        self.assertEqual(new_set, expected_bindings_set)",0)
eval_tag(python_src_metta_test,26,"assertequal(",'../../../hyperon-experimental/python/tests/test_sexparser.py',"        self.assertEqual(leaf_node_types, expected_node_types)",0)
eval_tag(python_src_metta_test,35,"assertequal(",'../../../hyperon-experimental/python/tests/test_sexparser.py',"            self.assertEqual(e.args[0], 'Unclosed String Literal')",0)
eval_tag(python_src_metta_test,42,"assertequal(",'../../../hyperon-experimental/python/tests/test_sexparser.py',"            self.assertEqual(e.args[0], 'Unexpected end of expression')",0)
eval_tag(python_src_metta_test,35,"metta.run(",'../../../hyperon-experimental/python/hyperon/metta.py',"        for result in metta.run(program):",0)
eval_tag(python_src_metta_test,54,"metta.run(",'../../../hyperon-experimental/python/integration/test_torch.py',"            losses += [metta.run('''\n                ! (do-step-loss (loss-fn (classify &inputs) (get-labels &inputs)))\n            ''')[0][0].get_object().value]",0)
eval_tag(python_src_metta_test,18,"metta.run(",'../../../hyperon-experimental/python/sandbox/resolve/resolve.py',"        runner = metta.run('! ' + runner_name)[0][0].get_object()",0)
eval_tag(python_src_metta_test,72,"metta.run(",'../../../hyperon-experimental/python/sandbox/repl/metta_repl.py',"        runner = metta.run('! ' + runner_name)[0][0].get_object()",0)
