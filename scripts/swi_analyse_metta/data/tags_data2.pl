found_search_result(metta_lang_dev,"",1,9725,'Parsing grounded atoms _ MeTTa Language.html',"from hyperon import *")
found_search_result(metta_lang_dev,"",1,9726,'Parsing grounded atoms _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",1,9727,'Parsing grounded atoms _ MeTTa Language.html',"expr1 = metta.parse_single()")
found_search_result(metta_lang_dev,"",1,9728,'Parsing grounded atoms _ MeTTa Language.html',"expr2 = E(S(), S(), S())")
found_search_result(metta_lang_dev,"",1,9729,'Parsing grounded atoms _ MeTTa Language.html',"print(, expr1)")
found_search_result(metta_lang_dev,"",1,9730,'Parsing grounded atoms _ MeTTa Language.html',"print(, expr2)")
found_search_result(metta_lang_dev,"",1,9731,'Parsing grounded atoms _ MeTTa Language.html',"print(, expr1 == expr2)")
found_search_result(metta_lang_dev,"",1,9732,'Parsing grounded atoms _ MeTTa Language.html',"for atom in expr1.get_children():")
found_search_result(metta_lang_dev,"",1,9733,'Parsing grounded atoms _ MeTTa Language.html',"    print(f{atom}{type(atom)})")
found_search_result(metta_lang_dev,"",3,9744,'Parsing grounded atoms _ MeTTa Language.html',"from hyperon import *")
found_search_result(metta_lang_dev,"",3,9745,'Parsing grounded atoms _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",3,9746,'Parsing grounded atoms _ MeTTa Language.html',"expr1 = metta.parse_single()")
found_search_result(metta_lang_dev,"",3,9747,'Parsing grounded atoms _ MeTTa Language.html',"print(metta.evaluate_atom(expr1))")
found_search_result(metta_lang_dev,"",3,9748,'Parsing grounded atoms _ MeTTa Language.html',"expr2 = E(OperationAtom(, lambda a, b: a + b),")
found_search_result(metta_lang_dev,"",3,9749,'Parsing grounded atoms _ MeTTa Language.html',"          ValueAtom(1), ValueAtom(2))")
found_search_result(metta_lang_dev,"",3,9750,'Parsing grounded atoms _ MeTTa Language.html',"print(metta.evaluate_atom(expr2))")
found_search_result(metta_lang_dev,"",4,9757,'Parsing grounded atoms _ MeTTa Language.html',"from hyperon import *")
found_search_result(metta_lang_dev,"",4,9759,'Parsing grounded atoms _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",4,9761,'Parsing grounded atoms _ MeTTa Language.html',"# Getting a reference to a native GroundingSpace,")
found_search_result(metta_lang_dev,"",4,9762,'Parsing grounded atoms _ MeTTa Language.html',"# implemented by the MeTTa core library.")
found_search_result(metta_lang_dev,"",4,9763,'Parsing grounded atoms _ MeTTa Language.html',"grounding_space = GroundingSpaceRef()")
found_search_result(metta_lang_dev,"",4,9764,'Parsing grounded atoms _ MeTTa Language.html',"grounding_space.add_atom(E(S(), S()))")
found_search_result(metta_lang_dev,"",4,9765,'Parsing grounded atoms _ MeTTa Language.html',"space_atom = G(grounding_space)")
found_search_result(metta_lang_dev,"",4,9767,'Parsing grounded atoms _ MeTTa Language.html',"# Registering a new custom token based on a regular expression.")
found_search_result(metta_lang_dev,"",4,9768,'Parsing grounded atoms _ MeTTa Language.html',"# The new token can be used in a MeTTa program.")
found_search_result(metta_lang_dev,"",4,9769,'Parsing grounded atoms _ MeTTa Language.html',"metta.register_atom(, space_atom)")
found_search_result(metta_lang_dev,"",4,9770,'Parsing grounded atoms _ MeTTa Language.html',"print(metta.run())")
found_search_result(metta_lang_dev,"",5,9785,'Parsing grounded atoms _ MeTTa Language.html',"from hyperon import *")
found_search_result(metta_lang_dev,"",5,9787,'Parsing grounded atoms _ MeTTa Language.html',"# A function to be registered")
found_search_result(metta_lang_dev,"",5,9788,'Parsing grounded atoms _ MeTTa Language.html',"def dup_str(s, n):")
found_search_result(metta_lang_dev,"",5,9789,'Parsing grounded atoms _ MeTTa Language.html',"    r =")
found_search_result(metta_lang_dev,"",5,9790,'Parsing grounded atoms _ MeTTa Language.html',"    for i in range(n):")
found_search_result(metta_lang_dev,"",5,9791,'Parsing grounded atoms _ MeTTa Language.html',"        r += s")
found_search_result(metta_lang_dev,"",5,9792,'Parsing grounded atoms _ MeTTa Language.html',"    return r")
found_search_result(metta_lang_dev,"",5,9794,'Parsing grounded atoms _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",5,9795,'Parsing grounded atoms _ MeTTa Language.html',"# Create an atom. \"dup-str\" is its internal name")
found_search_result(metta_lang_dev,"",5,9796,'Parsing grounded atoms _ MeTTa Language.html',"dup_str_atom = OperationAtom(, dup_str)")
found_search_result(metta_lang_dev,"",5,9798,'Parsing grounded atoms _ MeTTa Language.html',"# Interpreter will call this operation atom provided directly")
found_search_result(metta_lang_dev,"",5,9799,'Parsing grounded atoms _ MeTTa Language.html',"print(metta.evaluate_atom(E(dup_str_atom, ValueAtom(), ValueAtom(3))))")
found_search_result(metta_lang_dev,"",5,9801,'Parsing grounded atoms _ MeTTa Language.html',"# Let us add a function calling `dup-str`")
found_search_result(metta_lang_dev,"",5,9802,'Parsing grounded atoms _ MeTTa Language.html',"metta.run(")
found_search_result(metta_lang_dev,"",5,9804,'Parsing grounded atoms _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",5,9806,'Parsing grounded atoms _ MeTTa Language.html',"# The parser doesn't know it, so dup-str will not be reduced")
found_search_result(metta_lang_dev,"",5,9807,'Parsing grounded atoms _ MeTTa Language.html',"print(metta.run(")
found_search_result(metta_lang_dev,"",5,9810,'Parsing grounded atoms _ MeTTa Language.html',"))")
found_search_result(metta_lang_dev,"",5,9812,'Parsing grounded atoms _ MeTTa Language.html',"# Now the token is registered. New expression will be reduced.")
found_search_result(metta_lang_dev,"",5,9813,'Parsing grounded atoms _ MeTTa Language.html',"# However, `(= (test-dup-str) (dup-str \"a\" 2))` was added")
found_search_result(metta_lang_dev,"",5,9814,'Parsing grounded atoms _ MeTTa Language.html',"# before `dup-str` token was introduced. Thus, it will still")
found_search_result(metta_lang_dev,"",5,9815,'Parsing grounded atoms _ MeTTa Language.html',"# remain not reduced.")
found_search_result(metta_lang_dev,"",5,9816,'Parsing grounded atoms _ MeTTa Language.html',"metta.register_atom(, dup_str_atom)")
found_search_result(metta_lang_dev,"",5,9817,'Parsing grounded atoms _ MeTTa Language.html',"print(metta.run(")
found_search_result(metta_lang_dev,"",6,9820,'Parsing grounded atoms _ MeTTa Language.html',"))from hyperon import *")
found_search_result(metta_lang_dev,"",6,9821,'Parsing grounded atoms _ MeTTa Language.html',"def print_all(*args):")
found_search_result(metta_lang_dev,"",6,9822,'Parsing grounded atoms _ MeTTa Language.html',"    for a in args:")
found_search_result(metta_lang_dev,"",6,9823,'Parsing grounded atoms _ MeTTa Language.html',"        print(a)")
found_search_result(metta_lang_dev,"",6,9824,'Parsing grounded atoms _ MeTTa Language.html',"    return [Atoms.UNIT]")
found_search_result(metta_lang_dev,"",6,9825,'Parsing grounded atoms _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",6,9826,'Parsing grounded atoms _ MeTTa Language.html',"metta.register_atom(, OperationAtom(, print_all))")
found_search_result(metta_lang_dev,"",6,9827,'Parsing grounded atoms _ MeTTa Language.html',"metta.run()")
found_search_result(metta_lang_dev,"",7,9832,'Parsing grounded atoms _ MeTTa Language.html',"from hyperon import *")
found_search_result(metta_lang_dev,"",7,9833,'Parsing grounded atoms _ MeTTa Language.html',"def find_pos(x:str, y=, left=True):")
found_search_result(metta_lang_dev,"",7,9834,'Parsing grounded atoms _ MeTTa Language.html',"    if left:")
found_search_result(metta_lang_dev,"",7,9835,'Parsing grounded atoms _ MeTTa Language.html',"        return x.find(y)")
found_search_result(metta_lang_dev,"",7,9836,'Parsing grounded atoms _ MeTTa Language.html',"    pos = x[-1:].find(y)")
found_search_result(metta_lang_dev,"",7,9837,'Parsing grounded atoms _ MeTTa Language.html',"    return len(x) - 1 - pos if pos &gt;= 0 else pos")
found_search_result(metta_lang_dev,"",7,9838,'Parsing grounded atoms _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",7,9839,'Parsing grounded atoms _ MeTTa Language.html',"metta.register_atom(, OperationAtom(, find_pos))")
found_search_result(metta_lang_dev,"",7,9840,'Parsing grounded atoms _ MeTTa Language.html',"print(metta.run(")
found_search_result(metta_lang_dev,"",7,9844,'Parsing grounded atoms _ MeTTa Language.html',"))")
found_search_result(metta_lang_dev,"",8,9850,'Parsing grounded atoms _ MeTTa Language.html',"def plus(atom1, atom2):")
found_search_result(metta_lang_dev,"",8,9851,'Parsing grounded atoms _ MeTTa Language.html',"    from hyperon import ValueAtom")
found_search_result(metta_lang_dev,"",8,9852,'Parsing grounded atoms _ MeTTa Language.html',"    sum = atom1.get_object().value + atom2.get_object().value")
found_search_result(metta_lang_dev,"",8,9853,'Parsing grounded atoms _ MeTTa Language.html',"    return [ValueAtom(sum, )]")
found_search_result(metta_lang_dev,"",8,9855,'Parsing grounded atoms _ MeTTa Language.html',"from hyperon import OperationAtom, MeTTa")
found_search_result(metta_lang_dev,"",8,9856,'Parsing grounded atoms _ MeTTa Language.html',"plus_atom = OperationAtom(, plus,")
found_search_result(metta_lang_dev,"",8,9857,'Parsing grounded atoms _ MeTTa Language.html',"    [, , ], unwrap=False)")
found_search_result(metta_lang_dev,"",8,9858,'Parsing grounded atoms _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",8,9859,'Parsing grounded atoms _ MeTTa Language.html',"metta.register_atom(, plus_atom)")
found_search_result(metta_lang_dev,"",8,9860,'Parsing grounded atoms _ MeTTa Language.html',"print(metta.run())")
found_search_result(metta_lang_dev,"",1,9733,'Running MeTTa in Python _ MeTTa Language.html',"from hyperon import MeTTa")
found_search_result(metta_lang_dev,"",1,9734,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",1,9735,'Running MeTTa in Python _ MeTTa Language.html',"result = metta.run(")
found_search_result(metta_lang_dev,"",1,9739,'Running MeTTa in Python _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",1,9740,'Running MeTTa in Python _ MeTTa Language.html',"print(result) # [[boo], [foo]]")
found_search_result(metta_lang_dev,"",2,9742,'Running MeTTa in Python _ MeTTa Language.html',"from hyperon import MeTTa")
found_search_result(metta_lang_dev,"",2,9743,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",2,9744,'Running MeTTa in Python _ MeTTa Language.html',"metta.run(")
found_search_result(metta_lang_dev,"",2,9749,'Running MeTTa in Python _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",2,9750,'Running MeTTa in Python _ MeTTa Language.html',"print(metta.run()) # [[Liz, Bob]]")
found_search_result(metta_lang_dev,"",2,9751,'Running MeTTa in Python _ MeTTa Language.html',"print(metta.run()) # [[Tom, Pam]]")
found_search_result(metta_lang_dev,"",3,9754,'Running MeTTa in Python _ MeTTa Language.html',"from hyperon import MeTTa")
found_search_result(metta_lang_dev,"",3,9755,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",3,9756,'Running MeTTa in Python _ MeTTa Language.html',"atom1 = metta.parse_single()")
found_search_result(metta_lang_dev,"",3,9757,'Running MeTTa in Python _ MeTTa Language.html',"atom2 = metta.parse_single()")
found_search_result(metta_lang_dev,"",3,9758,'Running MeTTa in Python _ MeTTa Language.html',"print(atom1) # (A B)")
found_search_result(metta_lang_dev,"",4,9759,'Running MeTTa in Python _ MeTTa Language.html',"print(atom2) # (A B)from hyperon import MeTTa")
found_search_result(metta_lang_dev,"",4,9760,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",4,9761,'Running MeTTa in Python _ MeTTa Language.html',"program = metta.parse_all()")
found_search_result(metta_lang_dev,"",4,9762,'Running MeTTa in Python _ MeTTa Language.html',"print(program) # [(A B), (C D)]")
found_search_result(metta_lang_dev,"",5,9769,'Running MeTTa in Python _ MeTTa Language.html',"from hyperon import MeTTa")
found_search_result(metta_lang_dev,"",5,9770,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",5,9771,'Running MeTTa in Python _ MeTTa Language.html',"atom = metta.parse_single()")
found_search_result(metta_lang_dev,"",5,9772,'Running MeTTa in Python _ MeTTa Language.html',"metta.space().add_atom(atom)")
found_search_result(metta_lang_dev,"",6,9773,'Running MeTTa in Python _ MeTTa Language.html',"print(metta.run()) # [[B]]")
found_search_result(metta_lang_dev,"",7,9774,'Running MeTTa in Python _ MeTTa Language.html',"from hyperon import MeTTa")
found_search_result(metta_lang_dev,"",7,9775,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",7,9776,'Running MeTTa in Python _ MeTTa Language.html',"print(metta.run()[0])    # [(A B)]")
found_search_result(metta_lang_dev,"",7,9777,'Running MeTTa in Python _ MeTTa Language.html',"print(metta.run()[0])  # [3]")
found_search_result(metta_lang_dev,"",7,9778,'Running MeTTa in Python _ MeTTa Language.html',"print(metta.parse_all())   # [(A B)]")
found_search_result(metta_lang_dev,"",7,9779,'Running MeTTa in Python _ MeTTa Language.html',"print(metta.parse_all()) # [(+ 1 2)]")
found_search_result(metta_lang_dev,"",8,9782,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",8,9783,'Running MeTTa in Python _ MeTTa Language.html',"metta.run(")
found_search_result(metta_lang_dev,"",8,9788,'Running MeTTa in Python _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",8,9789,'Running MeTTa in Python _ MeTTa Language.html',"pattern = metta.parse_single()")
found_search_result(metta_lang_dev,"",8,9790,'Running MeTTa in Python _ MeTTa Language.html',"print(metta.space().query(pattern)) # [{ $x &lt;- Pam }, { $x &lt;- Tom }]")
found_search_result(metta_lang_dev,"",9,9802,'Running MeTTa in Python _ MeTTa Language.html',"from hyperon import S, SymbolAtom, Atom")
found_search_result(metta_lang_dev,"",9,9803,'Running MeTTa in Python _ MeTTa Language.html',"symbol_atom = S()")
found_search_result(metta_lang_dev,"",9,9804,'Running MeTTa in Python _ MeTTa Language.html',"print(symbol_atom.get_name()) # MyAtom")
found_search_result(metta_lang_dev,"",9,9805,'Running MeTTa in Python _ MeTTa Language.html',"print(symbol_atom.get_metatype()) # AtomKind.SYMBOL")
found_search_result(metta_lang_dev,"",9,9806,'Running MeTTa in Python _ MeTTa Language.html',"print(type(symbol_atom)) # SymbolAtom")
found_search_result(metta_lang_dev,"",9,9807,'Running MeTTa in Python _ MeTTa Language.html',"print(isinstance(symbol_atom, SymbolAtom)) # True")
found_search_result(metta_lang_dev,"",9,9808,'Running MeTTa in Python _ MeTTa Language.html',"print(isinstance(symbol_atom, Atom)) # True")
found_search_result(metta_lang_dev,"",10,9810,'Running MeTTa in Python _ MeTTa Language.html',"from hyperon import V")
found_search_result(metta_lang_dev,"",10,9811,'Running MeTTa in Python _ MeTTa Language.html',"var_atom = V()")
found_search_result(metta_lang_dev,"",10,9812,'Running MeTTa in Python _ MeTTa Language.html',"print(var_atom) # $x")
found_search_result(metta_lang_dev,"",10,9813,'Running MeTTa in Python _ MeTTa Language.html',"print(var_atom.get_name()) # x")
found_search_result(metta_lang_dev,"",10,9814,'Running MeTTa in Python _ MeTTa Language.html',"print(var_atom.get_metatype()) # AtomKind.VARIABLE")
found_search_result(metta_lang_dev,"",10,9815,'Running MeTTa in Python _ MeTTa Language.html',"print(type(var_atom)) # VariableAtom")
found_search_result(metta_lang_dev,"",11,9819,'Running MeTTa in Python _ MeTTa Language.html',"from hyperon import E, S, V, MeTTa")
found_search_result(metta_lang_dev,"",11,9821,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",11,9822,'Running MeTTa in Python _ MeTTa Language.html',"expr_atom = E(S(), V(), S())")
found_search_result(metta_lang_dev,"",11,9823,'Running MeTTa in Python _ MeTTa Language.html',"print(expr_atom) # (Parent $x Bob)")
found_search_result(metta_lang_dev,"",11,9824,'Running MeTTa in Python _ MeTTa Language.html',"print(expr_atom.get_metatype()) # AtomKind.EXPR")
found_search_result(metta_lang_dev,"",11,9825,'Running MeTTa in Python _ MeTTa Language.html',"print(expr_atom.get_children()) # [Parent, $x, Bob]")
found_search_result(metta_lang_dev,"",11,9826,'Running MeTTa in Python _ MeTTa Language.html',"# Let us use expr_atom in the query")
found_search_result(metta_lang_dev,"",11,9827,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",11,9828,'Running MeTTa in Python _ MeTTa Language.html',"metta.run(")
found_search_result(metta_lang_dev,"",11,9833,'Running MeTTa in Python _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",11,9834,'Running MeTTa in Python _ MeTTa Language.html',"print(metta.space().query(expr_atom)) # [{ $x &lt;- Pam }, { $x &lt;- Tom }]")
found_search_result(metta_lang_dev,"",11,9835,'Running MeTTa in Python _ MeTTa Language.html',"result = metta.run()[0]")
found_search_result(metta_lang_dev,"",11,9836,'Running MeTTa in Python _ MeTTa Language.html',"print(result) # [(Retrieved Tom) (Retrieved Pam)]")
found_search_result(metta_lang_dev,"",11,9837,'Running MeTTa in Python _ MeTTa Language.html',"# Ignore 'Retrieved' in expressions and print Pam, Tom")
found_search_result(metta_lang_dev,"",11,9838,'Running MeTTa in Python _ MeTTa Language.html',"for r in result:")
found_search_result(metta_lang_dev,"",11,9839,'Running MeTTa in Python _ MeTTa Language.html',"\tprint(r.get_children()[1])")
found_search_result(metta_lang_dev,"",12,9851,'Running MeTTa in Python _ MeTTa Language.html',"from hyperon import *")
found_search_result(metta_lang_dev,"",12,9852,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",12,9853,'Running MeTTa in Python _ MeTTa Language.html',"entry = E(S(), G({: 1, : 2}))")
found_search_result(metta_lang_dev,"",12,9854,'Running MeTTa in Python _ MeTTa Language.html',"metta.space().add_atom(entry)")
found_search_result(metta_lang_dev,"",12,9855,'Running MeTTa in Python _ MeTTa Language.html',"result = metta.run()[0][0]")
found_search_result(metta_lang_dev,"",12,9856,'Running MeTTa in Python _ MeTTa Language.html',"print(type(result)) # GroundedAtom")
found_search_result(metta_lang_dev,"",12,9857,'Running MeTTa in Python _ MeTTa Language.html',"print(result.get_object()) # {'a': 1, 'b': 2}")
found_search_result(metta_lang_dev,"",13,9860,'Running MeTTa in Python _ MeTTa Language.html',"from hyperon import *")
found_search_result(metta_lang_dev,"",13,9861,'Running MeTTa in Python _ MeTTa Language.html',"metta = MeTTa()")
found_search_result(metta_lang_dev,"",13,9862,'Running MeTTa in Python _ MeTTa Language.html',"plus = metta.parse_single()")
found_search_result(metta_lang_dev,"",13,9863,'Running MeTTa in Python _ MeTTa Language.html',"print(type(plus.get_object())) # OperationObject")
found_search_result(metta_lang_dev,"",13,9864,'Running MeTTa in Python _ MeTTa Language.html',"print(plus.get_object().op) # some lambda")
found_search_result(metta_lang_dev,"",13,9865,'Running MeTTa in Python _ MeTTa Language.html',"print(plus.get_object()) # + as a representation of this operation")
found_search_result(metta_lang_dev,"",13,9866,'Running MeTTa in Python _ MeTTa Language.html',"calc = metta.run()[0][0]")
found_search_result(metta_lang_dev,"",13,9867,'Running MeTTa in Python _ MeTTa Language.html',"print(type(calc.get_object())) # ValueObject")
found_search_result(metta_lang_dev,"",13,9868,'Running MeTTa in Python _ MeTTa Language.html',"print(calc.get_object().value) # 3")
found_search_result(metta_lang_dev,"",13,9870,'Running MeTTa in Python _ MeTTa Language.html',"metta.run() # add the expression to the space")
found_search_result(metta_lang_dev,"",13,9871,'Running MeTTa in Python _ MeTTa Language.html',"pattern = E(V(), ValueAtom(42))")
found_search_result(metta_lang_dev,"",13,9872,'Running MeTTa in Python _ MeTTa Language.html',"print(metta.space().query(pattern)) # { $x &lt;- my-secret-symbol }")
found_search_result(metta_lang_dev,"",1,9724,'Concrete types _ MeTTa Language.html',"(: a A)")
found_search_result(metta_lang_dev,"",1,9725,'Concrete types _ MeTTa Language.html',"(: b B)")
found_search_result(metta_lang_dev,"",1,9726,'Concrete types _ MeTTa Language.html',"(: A Type)")
found_search_result(metta_lang_dev,"",1,9728,'Concrete types _ MeTTa Language.html',"! (get-type a) ; A")
found_search_result(metta_lang_dev,"",1,9729,'Concrete types _ MeTTa Language.html',"! (get-type b) ; B")
found_search_result(metta_lang_dev,"",1,9730,'Concrete types _ MeTTa Language.html',"! (get-type c) ; %Undefined%")
found_search_result(metta_lang_dev,"",1,9731,'Concrete types _ MeTTa Language.html',"! (get-type A) ; Type")
found_search_result(metta_lang_dev,"",2,9732,'Concrete types _ MeTTa Language.html',"! (get-type B) ; %Undefined%(: a A)")
found_search_result(metta_lang_dev,"",2,9733,'Concrete types _ MeTTa Language.html',"(: b B)")
found_search_result(metta_lang_dev,"",2,9734,'Concrete types _ MeTTa Language.html',"! (get-type (a b)) ; (A B)")
found_search_result(metta_lang_dev,"",3,9741,'Concrete types _ MeTTa Language.html',"(: a A)")
found_search_result(metta_lang_dev,"",3,9742,'Concrete types _ MeTTa Language.html',"(: foo (-&gt; A B))")
found_search_result(metta_lang_dev,"",3,9743,'Concrete types _ MeTTa Language.html',"! (get-type (foo a)) ; B")
found_search_result(metta_lang_dev,"",4,9745,'Concrete types _ MeTTa Language.html',"(= ($1 infix-f $2) ($2 $1))")
found_search_result(metta_lang_dev,"",4,9746,'Concrete types _ MeTTa Language.html',"! (match &amp;self (= (1 infix-f 2) $r) $r)")
found_search_result(metta_lang_dev,"",5,9752,'Concrete types _ MeTTa Language.html',"; This function accepts an atom of type A and returns an atom of type B")
found_search_result(metta_lang_dev,"",5,9753,'Concrete types _ MeTTa Language.html',"(: foo (-&gt; A B))")
found_search_result(metta_lang_dev,"",5,9754,'Concrete types _ MeTTa Language.html',"(: a A)")
found_search_result(metta_lang_dev,"",5,9755,'Concrete types _ MeTTa Language.html',"(: b B)")
found_search_result(metta_lang_dev,"",5,9757,'Concrete types _ MeTTa Language.html',"! (foo a) ; no error")
found_search_result(metta_lang_dev,"",5,9758,'Concrete types _ MeTTa Language.html',"! (get-type (foo b)) ; no result")
found_search_result(metta_lang_dev,"",5,9759,'Concrete types _ MeTTa Language.html',"! (b foo) ; notice: no error")
found_search_result(metta_lang_dev,"",5,9760,'Concrete types _ MeTTa Language.html',"! (get-type (b foo)) ; (B (-&gt; A B))")
found_search_result(metta_lang_dev,"",6,9761,'Concrete types _ MeTTa Language.html',"! (foo b) ; type error(: foo (-&gt; A B))")
found_search_result(metta_lang_dev,"",6,9762,'Concrete types _ MeTTa Language.html',"(: a A)")
found_search_result(metta_lang_dev,"",6,9763,'Concrete types _ MeTTa Language.html',"! (get-type (foo c))")
found_search_result(metta_lang_dev,"",6,9764,'Concrete types _ MeTTa Language.html',"! (get-type (g a))")
found_search_result(metta_lang_dev,"",7,9769,'Concrete types _ MeTTa Language.html',"; This function takes two atoms of type A and B and returns an atom of type C")
found_search_result(metta_lang_dev,"",7,9770,'Concrete types _ MeTTa Language.html',"(: foo2 (-&gt; A B C))")
found_search_result(metta_lang_dev,"",7,9771,'Concrete types _ MeTTa Language.html',"(: a A)")
found_search_result(metta_lang_dev,"",7,9772,'Concrete types _ MeTTa Language.html',"(: b B)")
found_search_result(metta_lang_dev,"",7,9774,'Concrete types _ MeTTa Language.html',"! (get-type (foo2 a b)) ; C")
found_search_result(metta_lang_dev,"",7,9775,'Concrete types _ MeTTa Language.html',"! (get-type (foo2 b a)) ; empty")
found_search_result(metta_lang_dev,"",7,9776,'Concrete types _ MeTTa Language.html',"! (get-type (foo2 a)) ; empty")
found_search_result(metta_lang_dev,"",7,9777,'Concrete types _ MeTTa Language.html',"! (foo2 a c) ; no error")
found_search_result(metta_lang_dev,"",7,9778,'Concrete types _ MeTTa Language.html',"! (foo2 b a) ; type error (the interpreter stops on error)")
found_search_result(metta_lang_dev,"",8,9779,'Concrete types _ MeTTa Language.html',"! (foo2 c) ; would also be type error")
found_search_result(metta_lang_dev,"",9,9784,'Concrete types _ MeTTa Language.html',"(: foo (-&gt; A B))")
found_search_result(metta_lang_dev,"",9,9785,'Concrete types _ MeTTa Language.html',"(: bar (-&gt; B B A))")
found_search_result(metta_lang_dev,"",9,9786,'Concrete types _ MeTTa Language.html',"(: a A)")
found_search_result(metta_lang_dev,"",9,9787,'Concrete types _ MeTTa Language.html',"! (get-type (bar (foo a) (foo a)))")
found_search_result(metta_lang_dev,"",10,9788,'Concrete types _ MeTTa Language.html',"! (get-type (foo (bar (foo a) (foo a))))(: foo-pair (-&gt; (A B) C))")
found_search_result(metta_lang_dev,"",10,9789,'Concrete types _ MeTTa Language.html',"(: a A)")
found_search_result(metta_lang_dev,"",10,9790,'Concrete types _ MeTTa Language.html',"(: b B)")
found_search_result(metta_lang_dev,"",10,9792,'Concrete types _ MeTTa Language.html',"! (get-type (foo-pair a b)) ; empty")
found_search_result(metta_lang_dev,"",10,9793,'Concrete types _ MeTTa Language.html',"! (get-type (foo-pair (a b))) ; C")
found_search_result(metta_lang_dev,"",11,9796,'Concrete types _ MeTTa Language.html',"(: foo (-&gt; (-&gt; A B) C))")
found_search_result(metta_lang_dev,"",11,9797,'Concrete types _ MeTTa Language.html',"(: bar (-&gt; A B))")
found_search_result(metta_lang_dev,"",11,9798,'Concrete types _ MeTTa Language.html',"(: a A)")
found_search_result(metta_lang_dev,"",11,9800,'Concrete types _ MeTTa Language.html',"! (get-type (foo bar)) ; C")
found_search_result(metta_lang_dev,"",11,9801,'Concrete types _ MeTTa Language.html',"! (get-type (foo (bar a))) ; empty")
found_search_result(metta_lang_dev,"",12,9804,'Concrete types _ MeTTa Language.html',"(: foo (-&gt; C (-&gt; A B)))")
found_search_result(metta_lang_dev,"",12,9805,'Concrete types _ MeTTa Language.html',"(: bar (-&gt; B A))")
found_search_result(metta_lang_dev,"",12,9806,'Concrete types _ MeTTa Language.html',"(: a A)")
found_search_result(metta_lang_dev,"",12,9807,'Concrete types _ MeTTa Language.html',"(: c C)")
found_search_result(metta_lang_dev,"",12,9809,'Concrete types _ MeTTa Language.html',"! (get-type (...))")
found_search_result(metta_lang_dev,"",13,9816,'Concrete types _ MeTTa Language.html',"! (get-type 1) ; Number")
found_search_result(metta_lang_dev,"",13,9817,'Concrete types _ MeTTa Language.html',"! (get-type 1.1) ; Number")
found_search_result(metta_lang_dev,"",13,9818,'Concrete types _ MeTTa Language.html',"! (get-type +) ; (-&gt; Number Number Number)")
found_search_result(metta_lang_dev,"",14,9819,'Concrete types _ MeTTa Language.html',"! (get-type (+ 1 2.1)) ; Number(: a A)")
found_search_result(metta_lang_dev,"",14,9820,'Concrete types _ MeTTa Language.html',"! (get-type (+ 1 a)) ; empty")
found_search_result(metta_lang_dev,"",14,9821,'Concrete types _ MeTTa Language.html',"! (get-type (+ 1 b)) ; Number")
found_search_result(metta_lang_dev,"",14,9822,'Concrete types _ MeTTa Language.html',"! (+ 1 b) ; no error, not reduced")
found_search_result(metta_lang_dev,"",14,9823,'Concrete types _ MeTTa Language.html',"! (+ 1 a) ; type error")
found_search_result(metta_lang_dev,"",1,9724,'Recursion and control _ MeTTa Language.html',"(= (length ()) 0)")
found_search_result(metta_lang_dev,"",1,9725,'Recursion and control _ MeTTa Language.html',"(= (length (:: $x $xs))")
found_search_result(metta_lang_dev,"",1,9726,'Recursion and control _ MeTTa Language.html',"   (+ 1 (length $xs)))")
found_search_result(metta_lang_dev,"",1,9727,'Recursion and control _ MeTTa Language.html',"! (length (:: A (:: B (:: C ()))))")
found_search_result(metta_lang_dev,"",2,9732,'Recursion and control _ MeTTa Language.html',"(= (length ...) 0)")
found_search_result(metta_lang_dev,"",2,9733,'Recursion and control _ MeTTa Language.html',"(= (length ...)")
found_search_result(metta_lang_dev,"",2,9734,'Recursion and control _ MeTTa Language.html',"   (+ 1 (length $xs)))")
found_search_result(metta_lang_dev,"",2,9735,'Recursion and control _ MeTTa Language.html',"! (length (Cons A (Cons B (Cons C Nil))))")
found_search_result(metta_lang_dev,"",3,9738,'Recursion and control _ MeTTa Language.html',"(= (apply-twice $f $x)")
found_search_result(metta_lang_dev,"",3,9739,'Recursion and control _ MeTTa Language.html',"   ($f ($f $x)))")
found_search_result(metta_lang_dev,"",3,9740,'Recursion and control _ MeTTa Language.html',"(= (square $x) (* $x $x))")
found_search_result(metta_lang_dev,"",3,9741,'Recursion and control _ MeTTa Language.html',"(= (duplicate $x) ($x $x))")
found_search_result(metta_lang_dev,"",3,9742,'Recursion and control _ MeTTa Language.html',"! (apply-twice square 2) ; 16")
found_search_result(metta_lang_dev,"",3,9743,'Recursion and control _ MeTTa Language.html',"! (apply-twice duplicate 2) ; ((2 2) (2 2))")
found_search_result(metta_lang_dev,"",3,9744,'Recursion and control _ MeTTa Language.html',"! (apply-twice 1 2) ; (1 (1 2))")
found_search_result(metta_lang_dev,"",4,9750,'Recursion and control _ MeTTa Language.html',"(= (map $f ()) ())")
found_search_result(metta_lang_dev,"",4,9751,'Recursion and control _ MeTTa Language.html',"(= (map $f (:: $x $xs))")
found_search_result(metta_lang_dev,"",4,9752,'Recursion and control _ MeTTa Language.html',"   (:: ($f $x) (map $f $xs)))")
found_search_result(metta_lang_dev,"",4,9753,'Recursion and control _ MeTTa Language.html',"(= (square $x) (* $x $x))")
found_search_result(metta_lang_dev,"",4,9754,'Recursion and control _ MeTTa Language.html',"(= (twice $x) (* $x 2))")
found_search_result(metta_lang_dev,"",4,9755,'Recursion and control _ MeTTa Language.html',"! (map square (:: 1 (:: 2 (:: 3 ())))) ; (:: 1 (:: 4 (:: 9 ())))")
found_search_result(metta_lang_dev,"",4,9756,'Recursion and control _ MeTTa Language.html',"! (map twice (:: 1 (:: 2 (:: 3 ())))) ; (:: 2 (:: 4 (:: 6 ())))")
found_search_result(metta_lang_dev,"",4,9757,'Recursion and control _ MeTTa Language.html',"! (map A (:: 1 (:: 2 (:: 3 ())))) ; (:: (A 1) (:: (A 2) (:: (A 3) ())))")
found_search_result(metta_lang_dev,"",5,9764,'Recursion and control _ MeTTa Language.html',"(= (factorial $x)")
found_search_result(metta_lang_dev,"",5,9765,'Recursion and control _ MeTTa Language.html',"   (if (&gt; $x 0)")
found_search_result(metta_lang_dev,"",5,9766,'Recursion and control _ MeTTa Language.html',"       (* $x (factorial (- $x 1)))")
found_search_result(metta_lang_dev,"",5,9767,'Recursion and control _ MeTTa Language.html',"       1))")
found_search_result(metta_lang_dev,"",6,9768,'Recursion and control _ MeTTa Language.html',"! (factorial 5) ; 120(= (loop) (loop)) ; this is an infinite loop ")
found_search_result(metta_lang_dev,"",6,9769,'Recursion and control _ MeTTa Language.html',"! (if True Success (loop)) ; Success")
found_search_result(metta_lang_dev,"",7,9772,'Recursion and control _ MeTTa Language.html',"(= (factorial $x)")
found_search_result(metta_lang_dev,"",7,9773,'Recursion and control _ MeTTa Language.html',"   (case $x")
found_search_result(metta_lang_dev,"",7,9774,'Recursion and control _ MeTTa Language.html',"     ((0 1)")
found_search_result(metta_lang_dev,"",7,9775,'Recursion and control _ MeTTa Language.html',"      ($_ (* $x (factorial (- $x 1)))))")
found_search_result(metta_lang_dev,"",7,9776,'Recursion and control _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",7,9777,'Recursion and control _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",7,9778,'Recursion and control _ MeTTa Language.html',"! (factorial 5) ; 120")
found_search_result(metta_lang_dev,"",8,9786,'Recursion and control _ MeTTa Language.html',"(= (zip () ()) ())")
found_search_result(metta_lang_dev,"",8,9787,'Recursion and control _ MeTTa Language.html',"(= (zip (:: $x $xs) (:: $y $ys))")
found_search_result(metta_lang_dev,"",8,9788,'Recursion and control _ MeTTa Language.html',"   (:: ($x $y) (zip $xs $ys)))")
found_search_result(metta_lang_dev,"",8,9789,'Recursion and control _ MeTTa Language.html',"! (zip (:: A (:: B ())) (:: 1 (:: 2 ()))) ; (:: (A 1) (:: (B 2) ()))")
found_search_result(metta_lang_dev,"",9,9790,'Recursion and control _ MeTTa Language.html',"! (zip (:: A (:: B ())) (:: 1 ())) ; (:: (A 1) (zip (:: B ()) ()))(= (zip $list1 $list2)")
found_search_result(metta_lang_dev,"",9,9791,'Recursion and control _ MeTTa Language.html',"   (case ($list1 $list2)")
found_search_result(metta_lang_dev,"",9,9792,'Recursion and control _ MeTTa Language.html',"         (((() ()) ())")
found_search_result(metta_lang_dev,"",9,9793,'Recursion and control _ MeTTa Language.html',"          (((:: $x $xs) (:: $y $ys)) (:: ($x $y) (zip $xs $ys)))")
found_search_result(metta_lang_dev,"",9,9794,'Recursion and control _ MeTTa Language.html',"          ($else ERROR)")
found_search_result(metta_lang_dev,"",9,9795,'Recursion and control _ MeTTa Language.html',"         )")
found_search_result(metta_lang_dev,"",9,9796,'Recursion and control _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",9,9797,'Recursion and control _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",9,9798,'Recursion and control _ MeTTa Language.html',"! (zip (:: A (:: B ())) (:: 1 (:: 2 ()))) ; (:: (A 1) (:: (B 2) ()))")
found_search_result(metta_lang_dev,"",9,9799,'Recursion and control _ MeTTa Language.html',"! (zip (:: A (:: B ())) (:: 1 ())) ; (:: (A 1) ERROR)")
found_search_result(metta_lang_dev,"",1,9723,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; Some facts as very basic equalities")
found_search_result(metta_lang_dev,"",1,9724,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (croaks Fritz) True)")
found_search_result(metta_lang_dev,"",1,9725,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (eats_flies Fritz) True)")
found_search_result(metta_lang_dev,"",1,9726,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (croaks Sam) True)")
found_search_result(metta_lang_dev,"",1,9727,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (eats_flies Sam) False)")
found_search_result(metta_lang_dev,"",1,9728,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; If something croaks and eats flies, it is a frog.")
found_search_result(metta_lang_dev,"",1,9729,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; Note that if either (croaks $x) or (eats_flies $x)")
found_search_result(metta_lang_dev,"",1,9730,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; is false, (frog $x) is also false.")
found_search_result(metta_lang_dev,"",1,9731,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (frog $x)")
found_search_result(metta_lang_dev,"",1,9732,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"   (and (croaks $x)")
found_search_result(metta_lang_dev,"",1,9733,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"        (eats_flies $x)))")
found_search_result(metta_lang_dev,"",1,9734,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"! (if (frog $x) ($x is Frog) ($x is-not Frog))")
found_search_result(metta_lang_dev,"",1,9735,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; (green $x) is true if (frog $x) is true,")
found_search_result(metta_lang_dev,"",1,9736,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; otherwise it is not calculated.")
found_search_result(metta_lang_dev,"",1,9737,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (green $x)")
found_search_result(metta_lang_dev,"",1,9738,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"   (if (frog $x) True (empty)))")
found_search_result(metta_lang_dev,"",1,9739,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"! (if (green $x) ($x is Green) ($x is-not Green))")
found_search_result(metta_lang_dev,"",3,9747,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; random bit")
found_search_result(metta_lang_dev,"",3,9748,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (bin) 0)")
found_search_result(metta_lang_dev,"",3,9749,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (bin) 1)")
found_search_result(metta_lang_dev,"",3,9750,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; binary list")
found_search_result(metta_lang_dev,"",3,9751,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (gen-bin $n)")
found_search_result(metta_lang_dev,"",3,9752,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"   (if (&gt; $n 0)")
found_search_result(metta_lang_dev,"",3,9753,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"       (:: (bin) (gen-bin (- $n 1)))")
found_search_result(metta_lang_dev,"",3,9754,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"       ()))")
found_search_result(metta_lang_dev,"",3,9755,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"! (gen-bin 3)")
found_search_result(metta_lang_dev,"",4,9760,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (bin) 0)")
found_search_result(metta_lang_dev,"",4,9761,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (bin) 1)")
found_search_result(metta_lang_dev,"",4,9762,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (gen-bin-list ()) ())")
found_search_result(metta_lang_dev,"",4,9763,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (gen-bin-list ...)")
found_search_result(metta_lang_dev,"",4,9764,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"   ...)")
found_search_result(metta_lang_dev,"",4,9766,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"! (gen-bin-list (:: 1 (:: 5 (:: 7 ()))))")
found_search_result(metta_lang_dev,"",5,9772,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; random bit")
found_search_result(metta_lang_dev,"",5,9773,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (bin) 0)")
found_search_result(metta_lang_dev,"",5,9774,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (bin) 1)")
found_search_result(metta_lang_dev,"",5,9775,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; binary list with the same number of elements")
found_search_result(metta_lang_dev,"",5,9776,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (gen-bin-list ()) ())")
found_search_result(metta_lang_dev,"",5,9777,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (gen-bin-list (:: $x $xs))")
found_search_result(metta_lang_dev,"",5,9778,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"   (:: (bin) (gen-bin-list $xs))")
found_search_result(metta_lang_dev,"",5,9779,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",5,9780,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; sum of products of elements of two lists")
found_search_result(metta_lang_dev,"",5,9781,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (scalar-product () ()) 0)")
found_search_result(metta_lang_dev,"",5,9782,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (scalar-product (:: $x $xs) (:: $y $ys))")
found_search_result(metta_lang_dev,"",5,9783,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"   (+ (* $x $y) (scalar-product $xs $ys))")
found_search_result(metta_lang_dev,"",5,9784,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",5,9785,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; check the candidate solution")
found_search_result(metta_lang_dev,"",5,9786,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (test-solution $numbers $solution $target-sum)")
found_search_result(metta_lang_dev,"",5,9787,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"   (if (== (scalar-product $numbers $solution)")
found_search_result(metta_lang_dev,"",5,9788,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"           $target-sum)")
found_search_result(metta_lang_dev,"",5,9789,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"       $solution")
found_search_result(metta_lang_dev,"",5,9790,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"       (empty)")
found_search_result(metta_lang_dev,"",5,9791,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",5,9792,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",5,9793,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"; task")
found_search_result(metta_lang_dev,"",5,9794,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"(= (task) (:: 8 (:: 3 (:: 10 (:: 17 ())))))")
found_search_result(metta_lang_dev,"",5,9795,'Free variables and nondeterminism again, recursively _ MeTTa Language.html',"! (test-solution (task) (gen-bin-list (task)) 20)")
found_search_result(metta_lang_dev,"",1,9720,'Metatypes _ MeTTa Language.html',"! (get-metatype 1) ; Grounded")
found_search_result(metta_lang_dev,"",1,9721,'Metatypes _ MeTTa Language.html',"! (get-metatype +) ; Grounded")
found_search_result(metta_lang_dev,"",1,9722,'Metatypes _ MeTTa Language.html',"! (get-metatype (+ 1 2)) ; Expression")
found_search_result(metta_lang_dev,"",1,9723,'Metatypes _ MeTTa Language.html',"! (get-metatype a) ; Symbol")
found_search_result(metta_lang_dev,"",1,9724,'Metatypes _ MeTTa Language.html',"! (get-metatype (a b)) ; Expression")
found_search_result(metta_lang_dev,"",1,9725,'Metatypes _ MeTTa Language.html',"! (get-metatype $x) ; Variable")
found_search_result(metta_lang_dev,"",2,9730,'Metatypes _ MeTTa Language.html',"! (get-type get-type) ; (-&gt; Atom Atom)")
found_search_result(metta_lang_dev,"",2,9731,'Metatypes _ MeTTa Language.html',"! (get-type get-metatype) ; (-&gt; Atom Atom)")
found_search_result(metta_lang_dev,"",3,9733,'Metatypes _ MeTTa Language.html',"! (get-type Error) ; (-&gt; Atom Atom ErrorType)")
found_search_result(metta_lang_dev,"",3,9734,'Metatypes _ MeTTa Language.html',"! (get-metatype Error) ; just Symbol")
found_search_result(metta_lang_dev,"",3,9735,'Metatypes _ MeTTa Language.html',"! (get-type (Error Foo Boo)) ; ErrorType")
found_search_result(metta_lang_dev,"",3,9736,'Metatypes _ MeTTa Language.html',"! (Error (+ 1 2) (+ 1 +)) ; arguments are not evaluated")
found_search_result(metta_lang_dev,"",4,9740,'Metatypes _ MeTTa Language.html',"! (get-type quote)")
found_search_result(metta_lang_dev,"",4,9741,'Metatypes _ MeTTa Language.html',"! (quote (+ 1 2))")
found_search_result(metta_lang_dev,"",4,9742,'Metatypes _ MeTTa Language.html',"! (get-type if)")
found_search_result(metta_lang_dev,"",6,9754,'Metatypes _ MeTTa Language.html',"(: my-if (-&gt; Bool Atom Atom Atom))")
found_search_result(metta_lang_dev,"",6,9755,'Metatypes _ MeTTa Language.html',"(= (my-if True $then $else) $then)")
found_search_result(metta_lang_dev,"",6,9756,'Metatypes _ MeTTa Language.html',"(= (my-if False $then $else) $else)")
found_search_result(metta_lang_dev,"",6,9757,'Metatypes _ MeTTa Language.html',"(= (loop) (loop))")
found_search_result(metta_lang_dev,"",6,9758,'Metatypes _ MeTTa Language.html',"(= (OK) OK!)")
found_search_result(metta_lang_dev,"",6,9759,'Metatypes _ MeTTa Language.html',"! (my-if (&gt; 0 1) (loop) (OK))")
found_search_result(metta_lang_dev,"",7,9761,'Metatypes _ MeTTa Language.html',"(: seq-and (-&gt; ... ... Bool))")
found_search_result(metta_lang_dev,"",7,9762,'Metatypes _ MeTTa Language.html',"(= (seq-and ... ...) ...)")
found_search_result(metta_lang_dev,"",7,9763,'Metatypes _ MeTTa Language.html',"(= (seq-and ... ...) ...)")
found_search_result(metta_lang_dev,"",7,9764,'Metatypes _ MeTTa Language.html',"(: loop (-&gt; Bool Bool))")
found_search_result(metta_lang_dev,"",7,9765,'Metatypes _ MeTTa Language.html',"! (seq-and False (loop)) ; should be False")
found_search_result(metta_lang_dev,"",8,9766,'Metatypes _ MeTTa Language.html',"! (seq-and True True) ; should be True(: swap-arguments-atom (-&gt; Atom Atom))")
found_search_result(metta_lang_dev,"",8,9767,'Metatypes _ MeTTa Language.html',"(= (swap-arguments-atom ($op $arg1 $arg2))")
found_search_result(metta_lang_dev,"",8,9768,'Metatypes _ MeTTa Language.html',"   ($op $arg2 $arg1)")
found_search_result(metta_lang_dev,"",8,9769,'Metatypes _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",9,9770,'Metatypes _ MeTTa Language.html',"! (swap-arguments-atom (- 15 8))(= (swap-arguments ($op $arg1 $arg2))")
found_search_result(metta_lang_dev,"",9,9771,'Metatypes _ MeTTa Language.html',"   ($op $arg2 $arg1)")
found_search_result(metta_lang_dev,"",9,9772,'Metatypes _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",10,9773,'Metatypes _ MeTTa Language.html',"! (swap-arguments (- 15 8)); `atom-eq` returns True, when arguments are identical")
found_search_result(metta_lang_dev,"",10,9774,'Metatypes _ MeTTa Language.html',"; (can be unified with the same variable)")
found_search_result(metta_lang_dev,"",10,9775,'Metatypes _ MeTTa Language.html',"(: atom-eq (-&gt; Atom Atom Bool))")
found_search_result(metta_lang_dev,"",10,9776,'Metatypes _ MeTTa Language.html',"(= (atom-eq $x $x) True)")
found_search_result(metta_lang_dev,"",10,9778,'Metatypes _ MeTTa Language.html',"; These expressions are identical:")
found_search_result(metta_lang_dev,"",10,9779,'Metatypes _ MeTTa Language.html',"! (atom-eq (+ 1 2) (+ 1 2))")
found_search_result(metta_lang_dev,"",10,9781,'Metatypes _ MeTTa Language.html',"; the following will not be reduced because the expressions are not the same ")
found_search_result(metta_lang_dev,"",10,9782,'Metatypes _ MeTTa Language.html',"; (even though the result of their evaluation would be)")
found_search_result(metta_lang_dev,"",10,9783,'Metatypes _ MeTTa Language.html',"! (atom-eq 3 (+ 1 2))")
found_search_result(metta_lang_dev,"",1,9724,'Functions and unification _ MeTTa Language.html',"(= (only-a A) (Input A is accepted))")
found_search_result(metta_lang_dev,"",1,9725,'Functions and unification _ MeTTa Language.html',"! (only-a A)")
found_search_result(metta_lang_dev,"",1,9726,'Functions and unification _ MeTTa Language.html',"! (only-a B)")
found_search_result(metta_lang_dev,"",1,9727,'Functions and unification _ MeTTa Language.html',"! (only-a $x)")
found_search_result(metta_lang_dev,"",2,9730,'Functions and unification _ MeTTa Language.html',"(= (only-a A) (Input A is accepted))")
found_search_result(metta_lang_dev,"",2,9731,'Functions and unification _ MeTTa Language.html',"! (match &amp;self (= (only-a A) $result) $result)")
found_search_result(metta_lang_dev,"",2,9732,'Functions and unification _ MeTTa Language.html',"! (match &amp;self (= (only-a B) $result) $result)")
found_search_result(metta_lang_dev,"",2,9733,'Functions and unification _ MeTTa Language.html',"! (match &amp;self (= (only-a $x) $result) $result)")
found_search_result(metta_lang_dev,"",3,9740,'Functions and unification _ MeTTa Language.html',"(Parent Tom Bob)")
found_search_result(metta_lang_dev,"",3,9741,'Functions and unification _ MeTTa Language.html',"(Parent Pam Bob)")
found_search_result(metta_lang_dev,"",3,9742,'Functions and unification _ MeTTa Language.html',"(Parent Tom Liz)")
found_search_result(metta_lang_dev,"",3,9743,'Functions and unification _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",3,9744,'Functions and unification _ MeTTa Language.html',"(= (get-parent-entries $x $y)")
found_search_result(metta_lang_dev,"",3,9745,'Functions and unification _ MeTTa Language.html',"   (match &amp;self (Parent $x $y) (Parent $x $y)))")
found_search_result(metta_lang_dev,"",3,9746,'Functions and unification _ MeTTa Language.html',"(= (get-parents $x)")
found_search_result(metta_lang_dev,"",3,9747,'Functions and unification _ MeTTa Language.html',"   (match &amp;self (Parent $y $x) $y))")
found_search_result(metta_lang_dev,"",3,9748,'Functions and unification _ MeTTa Language.html',"! (get-parent-entries Tom $_)")
found_search_result(metta_lang_dev,"",4,9749,'Functions and unification _ MeTTa Language.html',"! (get-parents Bob)(Parent Tom Bob)")
found_search_result(metta_lang_dev,"",4,9750,'Functions and unification _ MeTTa Language.html',"(Parent Pam Bob)")
found_search_result(metta_lang_dev,"",4,9751,'Functions and unification _ MeTTa Language.html',"(Parent Tom Liz)")
found_search_result(metta_lang_dev,"",4,9752,'Functions and unification _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",4,9753,'Functions and unification _ MeTTa Language.html',"(Parent Bob Pat)")
found_search_result(metta_lang_dev,"",4,9754,'Functions and unification _ MeTTa Language.html',"(Parent Pat Jim)")
found_search_result(metta_lang_dev,"",4,9756,'Functions and unification _ MeTTa Language.html',"(= (get-parents $x)")
found_search_result(metta_lang_dev,"",4,9757,'Functions and unification _ MeTTa Language.html',"   (match &amp;self (Parent $y $x) $y))")
found_search_result(metta_lang_dev,"",4,9758,'Functions and unification _ MeTTa Language.html',"(= (get-grand-parents $x)")
found_search_result(metta_lang_dev,"",4,9759,'Functions and unification _ MeTTa Language.html',"   (...))")
found_search_result(metta_lang_dev,"",4,9760,'Functions and unification _ MeTTa Language.html',"! (get-grand-parents Pat)")
found_search_result(metta_lang_dev,"",5,9765,'Functions and unification _ MeTTa Language.html',"(Parent Tom Bob)")
found_search_result(metta_lang_dev,"",5,9766,'Functions and unification _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",5,9767,'Functions and unification _ MeTTa Language.html',"(Implies (Parent $x $y) (Child $y $x))")
found_search_result(metta_lang_dev,"",5,9768,'Functions and unification _ MeTTa Language.html',"(= (deduce $B)")
found_search_result(metta_lang_dev,"",5,9769,'Functions and unification _ MeTTa Language.html',"   (match &amp;self (Implies $A $B)")
found_search_result(metta_lang_dev,"",5,9770,'Functions and unification _ MeTTa Language.html',"          (match &amp;self $A $B))")
found_search_result(metta_lang_dev,"",5,9771,'Functions and unification _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",5,9772,'Functions and unification _ MeTTa Language.html',"(= (conclude $A)")
found_search_result(metta_lang_dev,"",5,9773,'Functions and unification _ MeTTa Language.html',"   (match &amp;self (Implies $A $B)")
found_search_result(metta_lang_dev,"",5,9774,'Functions and unification _ MeTTa Language.html',"          (match &amp;self $A $B))")
found_search_result(metta_lang_dev,"",5,9775,'Functions and unification _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",5,9776,'Functions and unification _ MeTTa Language.html',"! (deduce (Child $x Tom))    ; [(Child Bob Tom)]")
found_search_result(metta_lang_dev,"",5,9777,'Functions and unification _ MeTTa Language.html',"! (conclude (Parent Bob $y)) ; [(Child Ann Bob)]")
found_search_result(metta_lang_dev,"",6,9787,'Functions and unification _ MeTTa Language.html',"! (unify (parent $x Bob) ; the first pattern")
found_search_result(metta_lang_dev,"",6,9788,'Functions and unification _ MeTTa Language.html',"         (parent Tom $y) ; the second pattern")
found_search_result(metta_lang_dev,"",6,9789,'Functions and unification _ MeTTa Language.html',"         ($x $y) ; the output for successful unification")
found_search_result(metta_lang_dev,"",7,9790,'Functions and unification _ MeTTa Language.html',"         Fail) ; fallback(Parent Tom Bob)")
found_search_result(metta_lang_dev,"",7,9791,'Functions and unification _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",8,9792,'Functions and unification _ MeTTa Language.html',"! (unify &amp;self (Parent $x Bob) $x Fail) ; [Tom]")
found_search_result(metta_lang_dev,"",1,9729,'Recursive and parametric types _ MeTTa Language.html',"(: Z Nat) ; Z is \"zero\"")
found_search_result(metta_lang_dev,"",1,9730,'Recursive and parametric types _ MeTTa Language.html',"(: S (-&gt; Nat Nat)) ; S \"constructs\" the next number")
found_search_result(metta_lang_dev,"",1,9731,'Recursive and parametric types _ MeTTa Language.html',"! (S Z) ; this is \"one\"")
found_search_result(metta_lang_dev,"",1,9732,'Recursive and parametric types _ MeTTa Language.html',"! (S (S Z)) ; this is \"two\"")
found_search_result(metta_lang_dev,"",1,9733,'Recursive and parametric types _ MeTTa Language.html',"! (get-type (S (S (S Z)))) ; Nat")
found_search_result(metta_lang_dev,"",2,9734,'Recursive and parametric types _ MeTTa Language.html',"! (get-type (S S)) ; not Nat(: Z Nat)")
found_search_result(metta_lang_dev,"",2,9735,'Recursive and parametric types _ MeTTa Language.html',"(: S (-&gt; Nat Nat))")
found_search_result(metta_lang_dev,"",2,9736,'Recursive and parametric types _ MeTTa Language.html',"(: Greater (-&gt; Nat Nat Bool))")
found_search_result(metta_lang_dev,"",2,9737,'Recursive and parametric types _ MeTTa Language.html',"(= (Greater (S $x) Z)")
found_search_result(metta_lang_dev,"",2,9738,'Recursive and parametric types _ MeTTa Language.html',"   True)")
found_search_result(metta_lang_dev,"",2,9739,'Recursive and parametric types _ MeTTa Language.html',"(= (Greater Z $x)")
found_search_result(metta_lang_dev,"",2,9740,'Recursive and parametric types _ MeTTa Language.html',"   False)")
found_search_result(metta_lang_dev,"",2,9741,'Recursive and parametric types _ MeTTa Language.html',"(= (Greater (S $x) (S $y))")
found_search_result(metta_lang_dev,"",2,9742,'Recursive and parametric types _ MeTTa Language.html',"   (Greater $x $y))")
found_search_result(metta_lang_dev,"",2,9743,'Recursive and parametric types _ MeTTa Language.html',"! (Greater (S Z) (S Z)) ; False")
found_search_result(metta_lang_dev,"",2,9744,'Recursive and parametric types _ MeTTa Language.html',"! (Greater (S (S Z)) (S Z)) ; True")
found_search_result(metta_lang_dev,"",3,9748,'Recursive and parametric types _ MeTTa Language.html',"(: NilNum ListNum)")
found_search_result(metta_lang_dev,"",3,9749,'Recursive and parametric types _ MeTTa Language.html',"(: ConsNum (-&gt; Number ListNum ListNum))")
found_search_result(metta_lang_dev,"",3,9750,'Recursive and parametric types _ MeTTa Language.html',"! (get-type (ConsNum 1 (ConsNum 2 (ConsNum 3 NilNum)))) ; ListNum")
found_search_result(metta_lang_dev,"",3,9751,'Recursive and parametric types _ MeTTa Language.html',"! (ConsNum 1 (ConsNum  NilNum)) ; BadType")
found_search_result(metta_lang_dev,"",4,9754,'Recursive and parametric types _ MeTTa Language.html',"! (get-type ==)")
found_search_result(metta_lang_dev,"",4,9755,'Recursive and parametric types _ MeTTa Language.html',"! (== 1)")
found_search_result(metta_lang_dev,"",5,9758,'Recursive and parametric types _ MeTTa Language.html',"(: apply (-&gt; (-&gt; $tx $ty) $tx $ty))")
found_search_result(metta_lang_dev,"",5,9759,'Recursive and parametric types _ MeTTa Language.html',"(= (apply $f $x) ($f $x))")
found_search_result(metta_lang_dev,"",5,9760,'Recursive and parametric types _ MeTTa Language.html',"! (apply not False) ; True")
found_search_result(metta_lang_dev,"",5,9761,'Recursive and parametric types _ MeTTa Language.html',"! (get-type (apply not False)) ; Bool")
found_search_result(metta_lang_dev,"",5,9762,'Recursive and parametric types _ MeTTa Language.html',"! (unify (-&gt; (-&gt; $tx  $ty)  $tx  $ty)")
found_search_result(metta_lang_dev,"",5,9763,'Recursive and parametric types _ MeTTa Language.html',"         (-&gt; (-&gt; Bool Bool) Bool $result)")
found_search_result(metta_lang_dev,"",5,9764,'Recursive and parametric types _ MeTTa Language.html',"         $result")
found_search_result(metta_lang_dev,"",5,9765,'Recursive and parametric types _ MeTTa Language.html',"         BadType) ; Bool")
found_search_result(metta_lang_dev,"",5,9766,'Recursive and parametric types _ MeTTa Language.html',"! (apply not 1) ; BadType")
found_search_result(metta_lang_dev,"",6,9770,'Recursive and parametric types _ MeTTa Language.html',"(: apply-twice (-&gt; ? ? ?))")
found_search_result(metta_lang_dev,"",6,9771,'Recursive and parametric types _ MeTTa Language.html',"(= (apply-twice $f $x)")
found_search_result(metta_lang_dev,"",6,9772,'Recursive and parametric types _ MeTTa Language.html',"   ($f ($f $x)))")
found_search_result(metta_lang_dev,"",6,9773,'Recursive and parametric types _ MeTTa Language.html',"(: greater-than-0 (-&gt; Number Bool))")
found_search_result(metta_lang_dev,"",6,9774,'Recursive and parametric types _ MeTTa Language.html',"(= (greater-than-0 $x) (&gt; $x 0))")
found_search_result(metta_lang_dev,"",6,9775,'Recursive and parametric types _ MeTTa Language.html',"! (get-type (apply-twice not True)) ; should be [Bool]")
found_search_result(metta_lang_dev,"",6,9776,'Recursive and parametric types _ MeTTa Language.html',"! (get-type (apply-twice greater-than-0 1)) ; should be []")
found_search_result(metta_lang_dev,"",7,9778,'Recursive and parametric types _ MeTTa Language.html',"(: Nil (List $t))")
found_search_result(metta_lang_dev,"",7,9779,'Recursive and parametric types _ MeTTa Language.html',"(: Cons (-&gt; $t (List $t) (List $t)))")
found_search_result(metta_lang_dev,"",7,9780,'Recursive and parametric types _ MeTTa Language.html',"! (get-type (Cons 1 (Cons 2 Nil)))")
found_search_result(metta_lang_dev,"",7,9781,'Recursive and parametric types _ MeTTa Language.html',"! (get-type (Cons False (Cons True Nil)))")
found_search_result(metta_lang_dev,"",7,9782,'Recursive and parametric types _ MeTTa Language.html',"! (get-type (Cons + (Cons - Nil)))")
found_search_result(metta_lang_dev,"",8,9783,'Recursive and parametric types _ MeTTa Language.html',"! (get-type (Cons True (Cons 1 Nil)))! (unify (-&gt; $t     (List $t) (List $t))")
found_search_result(metta_lang_dev,"",8,9784,'Recursive and parametric types _ MeTTa Language.html',"         (-&gt; Number (List $t) $result)")
found_search_result(metta_lang_dev,"",8,9785,'Recursive and parametric types _ MeTTa Language.html',"         $result")
found_search_result(metta_lang_dev,"",8,9786,'Recursive and parametric types _ MeTTa Language.html',"         BadType)")
found_search_result(metta_lang_dev,"",9,9788,'Recursive and parametric types _ MeTTa Language.html',"(: Nil (List $t))")
found_search_result(metta_lang_dev,"",9,9789,'Recursive and parametric types _ MeTTa Language.html',"(: Cons (-&gt; $t (List $t) (List $t)))")
found_search_result(metta_lang_dev,"",9,9790,'Recursive and parametric types _ MeTTa Language.html',"(: first (-&gt; (List $t) $t))")
found_search_result(metta_lang_dev,"",9,9791,'Recursive and parametric types _ MeTTa Language.html',"(: append (-&gt; (List $t) (List $t) (List $t)))")
found_search_result(metta_lang_dev,"",9,9792,'Recursive and parametric types _ MeTTa Language.html',"! (get-type")
found_search_result(metta_lang_dev,"",9,9793,'Recursive and parametric types _ MeTTa Language.html',"    (+ 1")
found_search_result(metta_lang_dev,"",9,9794,'Recursive and parametric types _ MeTTa Language.html',"      (first (append (Cons 1 Nil)")
found_search_result(metta_lang_dev,"",9,9795,'Recursive and parametric types _ MeTTa Language.html',"                     (Cons 2 Nil)))))")
found_search_result(metta_lang_dev,"",1,9725,'Basic grounded functions _ MeTTa Language.html',"; Addition")
found_search_result(metta_lang_dev,"",1,9726,'Basic grounded functions _ MeTTa Language.html',"! (+ 1 3) ; 4")
found_search_result(metta_lang_dev,"",1,9728,'Basic grounded functions _ MeTTa Language.html',"; Subtraction")
found_search_result(metta_lang_dev,"",1,9729,'Basic grounded functions _ MeTTa Language.html',"! (- 6 2.2) ; 3.8")
found_search_result(metta_lang_dev,"",1,9731,'Basic grounded functions _ MeTTa Language.html',"; Multiplication")
found_search_result(metta_lang_dev,"",1,9732,'Basic grounded functions _ MeTTa Language.html',"! (* 7.3 9) ; 65.7")
found_search_result(metta_lang_dev,"",1,9734,'Basic grounded functions _ MeTTa Language.html',"; Division")
found_search_result(metta_lang_dev,"",1,9735,'Basic grounded functions _ MeTTa Language.html',"! (/ 25 5) ; 5 or 5.0")
found_search_result(metta_lang_dev,"",1,9737,'Basic grounded functions _ MeTTa Language.html',"; Modulus")
found_search_result(metta_lang_dev,"",1,9738,'Basic grounded functions _ MeTTa Language.html',"! (% 24 5) ; 4")
found_search_result(metta_lang_dev,"",2,9740,'Basic grounded functions _ MeTTa Language.html',"! (+ 1 (+ 2 (+ 3 4))) ; 10")
found_search_result(metta_lang_dev,"",2,9741,'Basic grounded functions _ MeTTa Language.html',"! (- 8 (/ 6.4 4)) ; 6.4")
found_search_result(metta_lang_dev,"",3,9743,'Basic grounded functions _ MeTTa Language.html',"! (+ 2 S) ; (+ 2 S)")
found_search_result(metta_lang_dev,"",4,9744,'Basic grounded functions _ MeTTa Language.html',"! (+ 2) ; BadType; Less than")
found_search_result(metta_lang_dev,"",4,9745,'Basic grounded functions _ MeTTa Language.html',"! (&lt; 1 3)")
found_search_result(metta_lang_dev,"",4,9747,'Basic grounded functions _ MeTTa Language.html',"; Greater than")
found_search_result(metta_lang_dev,"",4,9748,'Basic grounded functions _ MeTTa Language.html',"! (&gt; 3 2)")
found_search_result(metta_lang_dev,"",4,9750,'Basic grounded functions _ MeTTa Language.html',"; Less than or equal to")
found_search_result(metta_lang_dev,"",4,9751,'Basic grounded functions _ MeTTa Language.html',"! (&lt;= 5 6.2)")
found_search_result(metta_lang_dev,"",4,9753,'Basic grounded functions _ MeTTa Language.html',"; Greater than or equal to")
found_search_result(metta_lang_dev,"",4,9754,'Basic grounded functions _ MeTTa Language.html',"! (&gt;= 4 (+ 2 (* 3 5)))")
found_search_result(metta_lang_dev,"",5,9759,'Basic grounded functions _ MeTTa Language.html',"! (&gt; $x (+ 8 2)) ; Inner expression is reduced, but the outer is not")
found_search_result(metta_lang_dev,"",5,9760,'Basic grounded functions _ MeTTa Language.html',"! (&gt;= 4 (+ Q 2)) ; Reduction stops in the inner expression")
found_search_result(metta_lang_dev,"",5,9761,'Basic grounded functions _ MeTTa Language.html',"(: R CustomType)")
found_search_result(metta_lang_dev,"",5,9762,'Basic grounded functions _ MeTTa Language.html',"! (&gt;= 4 R) ; BadType")
found_search_result(metta_lang_dev,"",6,9764,'Basic grounded functions _ MeTTa Language.html',"! (== 4 (+ 2 2)) ; True")
found_search_result(metta_lang_dev,"",6,9765,'Basic grounded functions _ MeTTa Language.html',"! (==) ; False")
found_search_result(metta_lang_dev,"",6,9766,'Basic grounded functions _ MeTTa Language.html',"! (== (A B) (A B)) ; True")
found_search_result(metta_lang_dev,"",7,9767,'Basic grounded functions _ MeTTa Language.html',"! (== (A B) (A (B C))) ; False! (== 4 (+ Q 2)) ; False")
found_search_result(metta_lang_dev,"",7,9768,'Basic grounded functions _ MeTTa Language.html',"(: R CustomType)")
found_search_result(metta_lang_dev,"",7,9769,'Basic grounded functions _ MeTTa Language.html',"! (== 4 R) ; BadType")
found_search_result(metta_lang_dev,"",8,9778,'Basic grounded functions _ MeTTa Language.html',"; Test if both the given expressions are True")
found_search_result(metta_lang_dev,"",8,9779,'Basic grounded functions _ MeTTa Language.html',"! (and (&gt; 4 2) (==)) ; False")
found_search_result(metta_lang_dev,"",8,9781,'Basic grounded functions _ MeTTa Language.html',"; Test if any of the given expressions is True")
found_search_result(metta_lang_dev,"",8,9782,'Basic grounded functions _ MeTTa Language.html',"! (or (&gt; 4 2) (==)) ; True")
found_search_result(metta_lang_dev,"",8,9784,'Basic grounded functions _ MeTTa Language.html',"; Negates the result of a given Bool value")
found_search_result(metta_lang_dev,"",8,9785,'Basic grounded functions _ MeTTa Language.html',"! (not (== 5 5)) ; False")
found_search_result(metta_lang_dev,"",8,9786,'Basic grounded functions _ MeTTa Language.html',"! (not (and (&gt; 4 2) (&lt; 4 3))) ; True")
found_search_result(metta_lang_dev,"",1,9728,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! ((py-atom numpy.absolute) -5) ; 5! (bind! abs (py-atom numpy.absolute (-&gt; Number Number)))")
found_search_result(metta_lang_dev,"",2,9729,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! (+ (abs -5) 10) ; 15! (bind! np-array (py-atom numpy.array))")
found_search_result(metta_lang_dev,"",2,9730,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! (np-array (py-atom )) ; array([1, 2, 3])")
found_search_result(metta_lang_dev,"",3,9732,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! (bind! np-arange (py-atom numpy.arange)) ; ()")
found_search_result(metta_lang_dev,"",3,9733,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! (np-arange 4) ; array([0, 1, 2, 3])")
found_search_result(metta_lang_dev,"",3,9734,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! (np-arange (Kwargs (step 2) (stop 8))) ; array([0, 2, 4, 6])")
found_search_result(metta_lang_dev,"",4,9735,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! (np-arange (Kwargs (start 2) (stop 10) (step 3))) ; array([2, 5, 8])! (bind! np-rnd (py-atom numpy.random))")
found_search_result(metta_lang_dev,"",4,9736,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! ((py-dot np-rnd randint) 25)")
found_search_result(metta_lang_dev,"",5,9740,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! (bind! np (py-atom numpy))")
found_search_result(metta_lang_dev,"",5,9741,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! ((py-dot np abs) -5)")
found_search_result(metta_lang_dev,"",5,9742,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! ((py-dot np random.randint) -25 0)")
found_search_result(metta_lang_dev,"",6,9743,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! ((py-dot np abs) ((py-dot np random.randint) -25 0))! ((py-dot  swapcase)) ; \"hELLO wORLD\"! ((py-dot (py-atom \\'\\'\\'\\') get) 5)")
found_search_result(metta_lang_dev,"",7,9745,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! ((py-atom max) (py-list (-5 5 -3 10 8))) ; 10")
found_search_result(metta_lang_dev,"",7,9746,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! ((py-atom numpy.inner)")
found_search_result(metta_lang_dev,"",8,9747,'Embedding Python objects into MeTTa _ MeTTa Language.html',"     (py-list (1 2)) (py-list (3 4))) ; 1 * 3 + 2 * 4 = 11! (py-dict (() ())) ; creates a dict {\"a\":\"b\", \"b\":\"c\"}")
found_search_result(metta_lang_dev,"",8,9748,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! (py-tuple (1 5)) ; creates a tuple (1, 5)")
found_search_result(metta_lang_dev,"",8,9749,'Embedding Python objects into MeTTa _ MeTTa Language.html',"! (py-list (1 (2 (3)))) ; creates a nested list [1, [2, [3, '3']]]")
found_search_result(metta_lang_dev,"",1,9739,'Working with spaces _ MeTTa Language.html',"(: add-foo-eq (-&gt; Atom (-&gt;)))")
found_search_result(metta_lang_dev,"",1,9740,'Working with spaces _ MeTTa Language.html',"(= (add-foo-eq $x)")
found_search_result(metta_lang_dev,"",1,9741,'Working with spaces _ MeTTa Language.html',"   (add-atom &amp;self (= (foo) $x)))")
found_search_result(metta_lang_dev,"",1,9742,'Working with spaces _ MeTTa Language.html',"! (foo) ; (foo) - not reduced")
found_search_result(metta_lang_dev,"",1,9743,'Working with spaces _ MeTTa Language.html',"! (add-foo-eq (+ 1 2)) ; () - OK")
found_search_result(metta_lang_dev,"",1,9744,'Working with spaces _ MeTTa Language.html',"! (add-foo-eq (+ 3 4)) ; () - OK")
found_search_result(metta_lang_dev,"",1,9745,'Working with spaces _ MeTTa Language.html',"! (foo) ; [3, 7]")
found_search_result(metta_lang_dev,"",1,9746,'Working with spaces _ MeTTa Language.html',"! (match &amp;self (= (foo) $x)")
found_search_result(metta_lang_dev,"",2,9747,'Working with spaces _ MeTTa Language.html',"    (quote $x)) ; [(quote (+ 1 2)), (quote (+ 3 4))]! (add-reduct &amp;self (= (foo) (+ 3 4))) ; ()")
found_search_result(metta_lang_dev,"",2,9748,'Working with spaces _ MeTTa Language.html',"! (foo) ; 7")
found_search_result(metta_lang_dev,"",2,9749,'Working with spaces _ MeTTa Language.html',"! (match &amp;self (= (foo) $x)")
found_search_result(metta_lang_dev,"",2,9750,'Working with spaces _ MeTTa Language.html',"    (quote $x)) ; (quote 7)")
found_search_result(metta_lang_dev,"",3,9753,'Working with spaces _ MeTTa Language.html',"(Atom to remove)")
found_search_result(metta_lang_dev,"",3,9754,'Working with spaces _ MeTTa Language.html',"! (match &amp;self (Atom to remove)) ; \"Atom exists\"")
found_search_result(metta_lang_dev,"",3,9755,'Working with spaces _ MeTTa Language.html',"! (remove-atom &amp;self (Atom to remove)) ; ()")
found_search_result(metta_lang_dev,"",3,9756,'Working with spaces _ MeTTa Language.html',"! (match &amp;self (Atom to remove)) ; nothing")
found_search_result(metta_lang_dev,"",4,9757,'Working with spaces _ MeTTa Language.html',"! (remove-atom &amp;self (Atom to remove)) ; ()(link A B)")
found_search_result(metta_lang_dev,"",4,9758,'Working with spaces _ MeTTa Language.html',"(link B C)")
found_search_result(metta_lang_dev,"",4,9759,'Working with spaces _ MeTTa Language.html',"(link C A)")
found_search_result(metta_lang_dev,"",4,9760,'Working with spaces _ MeTTa Language.html',"(link C E)")
found_search_result(metta_lang_dev,"",4,9762,'Working with spaces _ MeTTa Language.html',"! (match &amp;self (, (link $x $y)")
found_search_result(metta_lang_dev,"",4,9763,'Working with spaces _ MeTTa Language.html',"                  (link $y $z)")
found_search_result(metta_lang_dev,"",4,9764,'Working with spaces _ MeTTa Language.html',"                  (link $z $x))")
found_search_result(metta_lang_dev,"",4,9765,'Working with spaces _ MeTTa Language.html',"               (let () (remove-atom &amp;self (link $x $y))")
found_search_result(metta_lang_dev,"",4,9766,'Working with spaces _ MeTTa Language.html',"                       (add-atom &amp;self (link $y $x)))")
found_search_result(metta_lang_dev,"",4,9767,'Working with spaces _ MeTTa Language.html',"  ) ; [(), (), ()]")
found_search_result(metta_lang_dev,"",4,9768,'Working with spaces _ MeTTa Language.html',"! (match &amp;self (link $x $y)")
found_search_result(metta_lang_dev,"",4,9769,'Working with spaces _ MeTTa Language.html',"    (link $x $y)) ; [(link A C), (link C B), (link B A), (link C E)]")
found_search_result(metta_lang_dev,"",5,9775,'Working with spaces _ MeTTa Language.html',"! (new-space)")
found_search_result(metta_lang_dev,"",6,9778,'Working with spaces _ MeTTa Language.html',"(= (get-space) (new-space))")
found_search_result(metta_lang_dev,"",6,9779,'Working with spaces _ MeTTa Language.html',"! (add-atom (get-space) (Parent Bob Ann)) ; ()")
found_search_result(metta_lang_dev,"",6,9780,'Working with spaces _ MeTTa Language.html',"! (match (get-space) (Parent $x $y) ($x $y)) ; nothing")
found_search_result(metta_lang_dev,"",7,9783,'Working with spaces _ MeTTa Language.html',"(= (main $space)")
found_search_result(metta_lang_dev,"",7,9784,'Working with spaces _ MeTTa Language.html',"   (let () (add-atom $space (Parent Bob Ann))")
found_search_result(metta_lang_dev,"",7,9785,'Working with spaces _ MeTTa Language.html',"     (match $space (Parent $x $y) ($x $y))")
found_search_result(metta_lang_dev,"",7,9786,'Working with spaces _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",7,9787,'Working with spaces _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",8,9788,'Working with spaces _ MeTTa Language.html',"! (main (new-space)) ; (Bob Ann)! (add-reduct &amp;self (= (get-space) (new-space))) ; ()")
found_search_result(metta_lang_dev,"",8,9789,'Working with spaces _ MeTTa Language.html',"! (add-atom (get-space) (Parent Bob Ann)) ; ()")
found_search_result(metta_lang_dev,"",8,9790,'Working with spaces _ MeTTa Language.html',"! (get-space) ; GroundingSpace-addr")
found_search_result(metta_lang_dev,"",9,9791,'Working with spaces _ MeTTa Language.html',"! (match (get-space) (Parent $x $y) ($x $y)) ; (Bob Ann)")
found_search_result(metta_lang_dev,"",10,9803,'Working with spaces _ MeTTa Language.html',"(= (get-hello) &amp;hello)")
found_search_result(metta_lang_dev,"",10,9804,'Working with spaces _ MeTTa Language.html',"! (bind! &amp;hello (Hello world)) ; ()")
found_search_result(metta_lang_dev,"",10,9805,'Working with spaces _ MeTTa Language.html',"! (get-metatype &amp;hello) ; Expression")
found_search_result(metta_lang_dev,"",10,9806,'Working with spaces _ MeTTa Language.html',"! &amp;hello ; (Hello world)")
found_search_result(metta_lang_dev,"",11,9807,'Working with spaces _ MeTTa Language.html',"! (get-hello) ; &amp;hello! (bind! &amp;x (foo1 (foo2 3) 45 (A (v))))")
found_search_result(metta_lang_dev,"",12,9808,'Working with spaces _ MeTTa Language.html',"! &amp;x! (bind! &amp;res (println!))")
found_search_result(metta_lang_dev,"",12,9809,'Working with spaces _ MeTTa Language.html',"! &amp;res")
found_search_result(metta_lang_dev,"",13,9810,'Working with spaces _ MeTTa Language.html',"! &amp;res! (bind! &amp;space (new-space)) ; ()")
found_search_result(metta_lang_dev,"",13,9811,'Working with spaces _ MeTTa Language.html',"! (add-atom &amp;space (Parent Bob Ann)) ; ()")
found_search_result(metta_lang_dev,"",13,9812,'Working with spaces _ MeTTa Language.html',"! &amp;space ; GroundingSpace-addr")
found_search_result(metta_lang_dev,"",13,9813,'Working with spaces _ MeTTa Language.html',"! (match &amp;space (Parent $x $y) ($x $y)) ; (Bob Ann)")
found_search_result(metta_lang_dev,"",13,9814,'Working with spaces _ MeTTa Language.html',"! (match &amp;self (Parent $x $y) ($x $y)) ; empty")
found_search_result(metta_lang_dev,"",16,9847,'Working with spaces _ MeTTa Language.html',"! (get-atoms &amp;self)! (match &amp;self")
found_search_result(metta_lang_dev,"",16,9848,'Working with spaces _ MeTTa Language.html',"          (= (if $cond $then $else) $result)")
found_search_result(metta_lang_dev,"",16,9849,'Working with spaces _ MeTTa Language.html',"   (quote (= (if $cond $then $else) $result))")
found_search_result(metta_lang_dev,"",16,9850,'Working with spaces _ MeTTa Language.html',"  )")
found_search_result(metta_lang_dev,"",17,9853,'Working with spaces _ MeTTa Language.html',"! (mod-space! stdlib)")
found_search_result(metta_lang_dev,"",17,9854,'Working with spaces _ MeTTa Language.html',"! (match (mod-space! stdlib)")
found_search_result(metta_lang_dev,"",17,9855,'Working with spaces _ MeTTa Language.html',"          (= (if $cond $then $else) $result)")
found_search_result(metta_lang_dev,"",17,9856,'Working with spaces _ MeTTa Language.html',"   (quote (= (if $cond $then $else) $result))")
found_search_result(metta_lang_dev,"",17,9857,'Working with spaces _ MeTTa Language.html',"  )")
found_search_result(metta_lang_dev,"",1,9737,'Basic evaluation _ MeTTa Language.html',"; This line will be ignored.")
found_search_result(metta_lang_dev,"",1,9738,'Basic evaluation _ MeTTa Language.html',"Hello ; This symbol will be added to the Space")
found_search_result(metta_lang_dev,"",1,9739,'Basic evaluation _ MeTTa Language.html',"(Hello World) ; This expression will also be added")
found_search_result(metta_lang_dev,"",1,9740,'Basic evaluation _ MeTTa Language.html',"! (+ 1 2) ; This expression will be immediatedly evaluated")
found_search_result(metta_lang_dev,"",1,9741,'Basic evaluation _ MeTTa Language.html',"! (Hi there) ; as well as this one")
found_search_result(metta_lang_dev,"",2,9751,'Basic evaluation _ MeTTa Language.html',"(= (h) (Hello world))")
found_search_result(metta_lang_dev,"",2,9752,'Basic evaluation _ MeTTa Language.html',"! (h)")
found_search_result(metta_lang_dev,"",3,9755,'Basic evaluation _ MeTTa Language.html',"(= (only-a A) (Input A is accepted))")
found_search_result(metta_lang_dev,"",3,9756,'Basic evaluation _ MeTTa Language.html',"! (only-a A)")
found_search_result(metta_lang_dev,"",3,9757,'Basic evaluation _ MeTTa Language.html',"! (only-a B)")
found_search_result(metta_lang_dev,"",4,9760,'Basic evaluation _ MeTTa Language.html',"! (respond me)")
found_search_result(metta_lang_dev,"",4,9761,'Basic evaluation _ MeTTa Language.html',"(= (respond me) (OK, I will respond))")
found_search_result(metta_lang_dev,"",5,9762,'Basic evaluation _ MeTTa Language.html',"! (respond me)(= (duplicate $x) ($x $x))")
found_search_result(metta_lang_dev,"",5,9763,'Basic evaluation _ MeTTa Language.html',"! (duplicate A)")
found_search_result(metta_lang_dev,"",6,9764,'Basic evaluation _ MeTTa Language.html',"! (duplicate 1.05)(= (swap (Pair $x $y)) (Pair $y $x))")
found_search_result(metta_lang_dev,"",7,9765,'Basic evaluation _ MeTTa Language.html',"! (swap (Pair A B)) ; evaluates to (Pair B A)(= (Cdr (Cons $x $xs)) $xs)")
found_search_result(metta_lang_dev,"",7,9766,'Basic evaluation _ MeTTa Language.html',"! (Cdr (Cons A (Cons B Nil))) ; outputs (Cons B Nil)")
found_search_result(metta_lang_dev,"",8,9769,'Basic evaluation _ MeTTa Language.html',"(= (check ($x $y $x)) ($x $y))")
found_search_result(metta_lang_dev,"",8,9770,'Basic evaluation _ MeTTa Language.html',"! (check (B A B)) ; reduced to (B A)")
found_search_result(metta_lang_dev,"",9,9771,'Basic evaluation _ MeTTa Language.html',"! (check (B A A)) ; not reduced(= (bin) 0)")
found_search_result(metta_lang_dev,"",9,9772,'Basic evaluation _ MeTTa Language.html',"(= (bin) 1)")
found_search_result(metta_lang_dev,"",10,9773,'Basic evaluation _ MeTTa Language.html',"! (bin) ; both 0 and 1(= (f special-value) catched)")
found_search_result(metta_lang_dev,"",10,9774,'Basic evaluation _ MeTTa Language.html',"(= (f $x) $x)")
found_search_result(metta_lang_dev,"",10,9775,'Basic evaluation _ MeTTa Language.html',"! (f A) ; A")
found_search_result(metta_lang_dev,"",10,9776,'Basic evaluation _ MeTTa Language.html',"! (f special-value) ; both catched and special-value")
found_search_result(metta_lang_dev,"",11,9779,'Basic evaluation _ MeTTa Language.html',"(= (brother Mike) Tom)")
found_search_result(metta_lang_dev,"",11,9780,'Basic evaluation _ MeTTa Language.html',"(= (brother Sam) Bob)")
found_search_result(metta_lang_dev,"",11,9781,'Basic evaluation _ MeTTa Language.html',"! (brother $x) ; just Tom and Bob are returned")
found_search_result(metta_lang_dev,"",12,9782,'Basic evaluation _ MeTTa Language.html',"! ((brother $x) is the brother of $x) ; the binding for $x is not lost(= (square $x) (* $x $x))")
found_search_result(metta_lang_dev,"",13,9783,'Basic evaluation _ MeTTa Language.html',"! (square 3)(= (Car (Cons $x $xs)) $x)")
found_search_result(metta_lang_dev,"",13,9784,'Basic evaluation _ MeTTa Language.html',"(= (Second (Cons $x $xs)) (Car $xs))")
found_search_result(metta_lang_dev,"",13,9785,'Basic evaluation _ MeTTa Language.html',"! (Second (Cons A (Cons B Nil))) ; outputs B")
found_search_result(metta_lang_dev,"",14,9788,'Basic evaluation _ MeTTa Language.html',"! (* (+ 1 2) (- 8 3)) ; 15")
found_search_result(metta_lang_dev,"",14,9789,'Basic evaluation _ MeTTa Language.html',"(= (square $x) (* $x $x))")
found_search_result(metta_lang_dev,"",14,9790,'Basic evaluation _ MeTTa Language.html',"! (square (+ 2 3)) ; 25")
found_search_result(metta_lang_dev,"",14,9791,'Basic evaluation _ MeTTa Language.html',"(= (triple $x) ($x $x $x))")
found_search_result(metta_lang_dev,"",14,9792,'Basic evaluation _ MeTTa Language.html',"(= (grid3x3 $x) (triple (triple $x)))")
found_search_result(metta_lang_dev,"",14,9793,'Basic evaluation _ MeTTa Language.html',"! (grid3x3 (square (+ 1 2))) ; ((9 9 9) (9 9 9) (9 9 9))")
found_search_result(metta_lang_dev,"",15,9796,'Basic evaluation _ MeTTa Language.html',"; nondeterministic function")
found_search_result(metta_lang_dev,"",15,9797,'Basic evaluation _ MeTTa Language.html',"(= (bin) 0)")
found_search_result(metta_lang_dev,"",15,9798,'Basic evaluation _ MeTTa Language.html',"(= (bin) 1)")
found_search_result(metta_lang_dev,"",15,9799,'Basic evaluation _ MeTTa Language.html',"; deterministic triple")
found_search_result(metta_lang_dev,"",15,9800,'Basic evaluation _ MeTTa Language.html',"(= (triple $x) ($x $x $x))")
found_search_result(metta_lang_dev,"",15,9801,'Basic evaluation _ MeTTa Language.html',"! (triple (bin)) ; (0 0 0) and (1 1 1)")
found_search_result(metta_lang_dev,"",15,9802,'Basic evaluation _ MeTTa Language.html',"; nondeterministic pair")
found_search_result(metta_lang_dev,"",15,9803,'Basic evaluation _ MeTTa Language.html',"(= (bin2) ((bin) (bin)))")
found_search_result(metta_lang_dev,"",15,9804,'Basic evaluation _ MeTTa Language.html',"! (bin2) ; (0 0), (0 1), (1 0), (1 1)")
found_search_result(metta_lang_dev,"",15,9805,'Basic evaluation _ MeTTa Language.html',"; deterministic summation")
found_search_result(metta_lang_dev,"",15,9806,'Basic evaluation _ MeTTa Language.html',"(= (sum ($x $y)) (+ $x $y))")
found_search_result(metta_lang_dev,"",15,9807,'Basic evaluation _ MeTTa Language.html',"(= (sum ($x $y $z)) (+ $x (+ $y $z)))")
found_search_result(metta_lang_dev,"",15,9808,'Basic evaluation _ MeTTa Language.html',"! (sum (triple (bin))) ; 0, 3")
found_search_result(metta_lang_dev,"",15,9809,'Basic evaluation _ MeTTa Language.html',"! (sum (bin2)) ; 0, 1, 1, 2")
found_search_result(metta_lang_dev,"",15,9810,'Basic evaluation _ MeTTa Language.html',"; nondeterministic increment")
found_search_result(metta_lang_dev,"",15,9811,'Basic evaluation _ MeTTa Language.html',"(= (inc-flip $x) (+ 0 $x))")
found_search_result(metta_lang_dev,"",15,9812,'Basic evaluation _ MeTTa Language.html',"(= (inc-flip $x) (+ 1 $x))")
found_search_result(metta_lang_dev,"",15,9813,'Basic evaluation _ MeTTa Language.html',"! (inc-flip 1) ; 1, 2")
found_search_result(metta_lang_dev,"",15,9814,'Basic evaluation _ MeTTa Language.html',"! (inc-flip (bin)) ; 0, 1, 1, 2")
found_search_result(metta_lang_dev,"",2,9748,'Querying space content _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",2,9749,'Querying space content _ MeTTa Language.html',"; This match will be successful")
found_search_result(metta_lang_dev,"",2,9750,'Querying space content _ MeTTa Language.html',"! (match &amp;self (Parent Bob Ann) (Bob is Ann`s father))")
found_search_result(metta_lang_dev,"",2,9751,'Querying space content _ MeTTa Language.html',"; The following line will return []")
found_search_result(metta_lang_dev,"",2,9752,'Querying space content _ MeTTa Language.html',"! (match &amp;self (Parent Bob Joe) (Bob is Joe`s father))")
found_search_result(metta_lang_dev,"",3,9755,'Querying space content _ MeTTa Language.html',"(Parent Tom Bob)")
found_search_result(metta_lang_dev,"",3,9756,'Querying space content _ MeTTa Language.html',"(Parent Pam Bob)")
found_search_result(metta_lang_dev,"",3,9757,'Querying space content _ MeTTa Language.html',"(Parent Tom Liz)")
found_search_result(metta_lang_dev,"",3,9758,'Querying space content _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",4,9760,'Querying space content _ MeTTa Language.html',"! (match &amp;self (Parent $x Bob) $x) ; [Tom, Pam](Parent Bob Ann)")
found_search_result(metta_lang_dev,"",4,9761,'Querying space content _ MeTTa Language.html',"(Parent Pam (Parent Bob Pat))")
found_search_result(metta_lang_dev,"",5,9763,'Querying space content _ MeTTa Language.html',"! (match &amp;self (Parent Bob $x) $x) ; Ann(Parent Tom Bob)")
found_search_result(metta_lang_dev,"",5,9764,'Querying space content _ MeTTa Language.html',"(Parent Pam Bob)")
found_search_result(metta_lang_dev,"",5,9765,'Querying space content _ MeTTa Language.html',"(Parent Tom Liz)")
found_search_result(metta_lang_dev,"",5,9766,'Querying space content _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",5,9767,'Querying space content _ MeTTa Language.html',"(Parent Bob Pat)")
found_search_result(metta_lang_dev,"",5,9768,'Querying space content _ MeTTa Language.html',"(Parent Pat Pat)")
found_search_result(metta_lang_dev,"",5,9770,'Querying space content _ MeTTa Language.html',"! (match &amp;self (Parent $x $y) ($x $y))")
found_search_result(metta_lang_dev,"",5,9736,'MeTTa-Motto _ MeTTa Language.html',"!(import! &amp;self motto) ; ()")
found_search_result(metta_lang_dev,"",5,9737,'MeTTa-Motto _ MeTTa Language.html',"!((echo-agent)")
found_search_result(metta_lang_dev,"",5,9738,'MeTTa-Motto _ MeTTa Language.html',"      (user ))")
found_search_result(metta_lang_dev,"",5,9739,'MeTTa-Motto _ MeTTa Language.html',"      ; \"user The agent will return this text along with a role: user\"")
found_search_result(metta_lang_dev,"",9,9763,'MeTTa-Motto _ MeTTa Language.html',"!(import! &amp;self motto)")
found_search_result(metta_lang_dev,"",9,9764,'MeTTa-Motto _ MeTTa Language.html',"(= (doc get_current_weather)")
found_search_result(metta_lang_dev,"",9,9765,'MeTTa-Motto _ MeTTa Language.html',"   (Doc")
found_search_result(metta_lang_dev,"",9,9766,'MeTTa-Motto _ MeTTa Language.html',"     (description )")
found_search_result(metta_lang_dev,"",9,9767,'MeTTa-Motto _ MeTTa Language.html',"     (parameters")
found_search_result(metta_lang_dev,"",9,9768,'MeTTa-Motto _ MeTTa Language.html',"       (location  ())")
found_search_result(metta_lang_dev,"",9,9769,'MeTTa-Motto _ MeTTa Language.html',"     )")
found_search_result(metta_lang_dev,"",9,9770,'MeTTa-Motto _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",9,9771,'MeTTa-Motto _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",9,9772,'MeTTa-Motto _ MeTTa Language.html',"(= (get_current_weather ($arg) $msgs)")
found_search_result(metta_lang_dev,"",9,9773,'MeTTa-Motto _ MeTTa Language.html',"   (if (contains-str $arg)")
found_search_result(metta_lang_dev,"",9,9775,'MeTTa-Motto _ MeTTa Language.html',"       (if (contains-str $arg)")
found_search_result(metta_lang_dev,"",9,9777,'MeTTa-Motto _ MeTTa Language.html',"           (concat-str (concat-str  $arg)")
found_search_result(metta_lang_dev,"",9,9778,'MeTTa-Motto _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",9,9779,'MeTTa-Motto _ MeTTa Language.html',"    )")
found_search_result(metta_lang_dev,"",9,9780,'MeTTa-Motto _ MeTTa Language.html',"  )")
found_search_result(metta_lang_dev,"",9,9781,'MeTTa-Motto _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",9,9782,'MeTTa-Motto _ MeTTa Language.html',"!((echo-agent)")
found_search_result(metta_lang_dev,"",9,9783,'MeTTa-Motto _ MeTTa Language.html',"   (user ) ")
found_search_result(metta_lang_dev,"",9,9784,'MeTTa-Motto _ MeTTa Language.html',"   (Function get_current_weather) ; The temperature in London is 70 Fahrenheit.")
found_search_result(metta_lang_dev,"",9,9785,'MeTTa-Motto _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",13,9813,'MeTTa-Motto _ MeTTa Language.html',"!(import! &amp;self motto)")
found_search_result(metta_lang_dev,"",13,9814,'MeTTa-Motto _ MeTTa Language.html',"!(bind! &amp;space (new-space))")
found_search_result(metta_lang_dev,"",13,9815,'MeTTa-Motto _ MeTTa Language.html',"!(add-atom &amp;space (user ))")
found_search_result(metta_lang_dev,"",13,9816,'MeTTa-Motto _ MeTTa Language.html',"!(add-atom &amp;space (user ))")
found_search_result(metta_lang_dev,"",13,9817,'MeTTa-Motto _ MeTTa Language.html',"!((echo-agent) (Script &amp;space)) ; \"user Table user Window\"")
found_search_result(metta_lang_dev,"",29,9962,'MeTTa-Motto _ MeTTa Language.html',"from motto.agents import  MettaAgent")
found_search_result(metta_lang_dev,"",29,9963,'MeTTa-Motto _ MeTTa Language.html',"agent = MettaAgent(code =")
found_search_result(metta_lang_dev,"",29,9965,'MeTTa-Motto _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",30,9966,'MeTTa-Motto _ MeTTa Language.html',"print(agent().content)")
found_search_result(metta_lang_dev,"",1,9724,'Controlling pattern matching _ MeTTa Language.html',"! (get-type match)")
found_search_result(metta_lang_dev,"",2,9727,'Controlling pattern matching _ MeTTa Language.html',"(Green Sam)")
found_search_result(metta_lang_dev,"",2,9728,'Controlling pattern matching _ MeTTa Language.html',"(= (Green Tod) True)")
found_search_result(metta_lang_dev,"",2,9729,'Controlling pattern matching _ MeTTa Language.html',"! ($who (Green $who)) ; (Tod True)")
found_search_result(metta_lang_dev,"",3,9730,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (Green $who) $who) ; Sam(Green Sam)")
found_search_result(metta_lang_dev,"",3,9731,'Controlling pattern matching _ MeTTa Language.html',"(Green Tod)")
found_search_result(metta_lang_dev,"",3,9732,'Controlling pattern matching _ MeTTa Language.html',"(= (Frog Sam) True)")
found_search_result(metta_lang_dev,"",4,9733,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (Green $who) (Frog $who)) ; [True, (Frog Tod)](Green Sam)")
found_search_result(metta_lang_dev,"",4,9734,'Controlling pattern matching _ MeTTa Language.html',"(= (Frog Sam) True)")
found_search_result(metta_lang_dev,"",4,9735,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (Green $who) (quote (Frog $who)))")
found_search_result(metta_lang_dev,"",5,9739,'Controlling pattern matching _ MeTTa Language.html',"(Green Sam)")
found_search_result(metta_lang_dev,"",5,9740,'Controlling pattern matching _ MeTTa Language.html',"(Likes Sam Emi)")
found_search_result(metta_lang_dev,"",5,9741,'Controlling pattern matching _ MeTTa Language.html',"(Likes Tod Kat)")
found_search_result(metta_lang_dev,"",5,9742,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (Green $who)")
found_search_result(metta_lang_dev,"",5,9743,'Controlling pattern matching _ MeTTa Language.html',"    (match &amp;self (Likes $who $x) $x))")
found_search_result(metta_lang_dev,"",5,9744,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (Green $who)")
found_search_result(metta_lang_dev,"",5,9745,'Controlling pattern matching _ MeTTa Language.html',"    (match &amp;self (Likes $boo $x) $x))")
found_search_result(metta_lang_dev,"",5,9746,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (Likes $who $x)")
found_search_result(metta_lang_dev,"",5,9747,'Controlling pattern matching _ MeTTa Language.html',"    (match &amp;self (Green $x) $x))")
found_search_result(metta_lang_dev,"",5,9748,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (Likes $who $x)")
found_search_result(metta_lang_dev,"",5,9749,'Controlling pattern matching _ MeTTa Language.html',"    (match &amp;self (Green $boo) $boo))")
found_search_result(metta_lang_dev,"",6,9766,'Controlling pattern matching _ MeTTa Language.html',"(+ 1 False)")
found_search_result(metta_lang_dev,"",6,9767,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (+ 1 False) OK) ; OK")
found_search_result(metta_lang_dev,"",6,9768,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (+ 1 $x) $x) ; False")
found_search_result(metta_lang_dev,"",7,9772,'Controlling pattern matching _ MeTTa Language.html',"(: foo (-&gt; Number Bool))")
found_search_result(metta_lang_dev,"",7,9773,'Controlling pattern matching _ MeTTa Language.html',"(= (foo $x) (+ $x 1))")
found_search_result(metta_lang_dev,"",7,9774,'Controlling pattern matching _ MeTTa Language.html',"! (get-type (foo $x)) ; Bool")
found_search_result(metta_lang_dev,"",7,9775,'Controlling pattern matching _ MeTTa Language.html',"! (get-type (+ $x 1)) ; Number")
found_search_result(metta_lang_dev,"",7,9776,'Controlling pattern matching _ MeTTa Language.html',"! (get-type =) ; (-&gt; $t $t Atom)")
found_search_result(metta_lang_dev,"",7,9777,'Controlling pattern matching _ MeTTa Language.html',"! (= (foo $x) (+ $x 1)) ; BadType")
found_search_result(metta_lang_dev,"",8,9780,'Controlling pattern matching _ MeTTa Language.html',"! (pragma! type-check auto) ; ()")
found_search_result(metta_lang_dev,"",8,9781,'Controlling pattern matching _ MeTTa Language.html',"(: foo (-&gt; Number Bool))")
found_search_result(metta_lang_dev,"",8,9782,'Controlling pattern matching _ MeTTa Language.html',"(= (foo $x) (+ $x 1)) ; BadType")
found_search_result(metta_lang_dev,"",9,9784,'Controlling pattern matching _ MeTTa Language.html',"(= (call-by-value $f $arg)")
found_search_result(metta_lang_dev,"",9,9785,'Controlling pattern matching _ MeTTa Language.html',"   ($f $arg))")
found_search_result(metta_lang_dev,"",9,9786,'Controlling pattern matching _ MeTTa Language.html',"! (call-by-value quote (+ 1 2)) ; (quote 3)")
found_search_result(metta_lang_dev,"",10,9790,'Controlling pattern matching _ MeTTa Language.html',"! (let $x (+ 1 2) (quote $x)) ; (quote 3)")
found_search_result(metta_lang_dev,"",10,9791,'Controlling pattern matching _ MeTTa Language.html',"(: Z Nat)")
found_search_result(metta_lang_dev,"",10,9792,'Controlling pattern matching _ MeTTa Language.html',"! (get-metatype (get-type Z)) ; (get-type Z) is Expression")
found_search_result(metta_lang_dev,"",11,9793,'Controlling pattern matching _ MeTTa Language.html',"! (let $x (get-type Z) (get-metatype $x)) ; Nat is Symbol(= (age Bob) 5)")
found_search_result(metta_lang_dev,"",11,9794,'Controlling pattern matching _ MeTTa Language.html',"(= (age Sam) 8)")
found_search_result(metta_lang_dev,"",11,9795,'Controlling pattern matching _ MeTTa Language.html',"(= (age Ann) 3)")
found_search_result(metta_lang_dev,"",11,9796,'Controlling pattern matching _ MeTTa Language.html',"(= (age Tom) 5)")
found_search_result(metta_lang_dev,"",11,9797,'Controlling pattern matching _ MeTTa Language.html',"(= (of-same-age $who)")
found_search_result(metta_lang_dev,"",11,9798,'Controlling pattern matching _ MeTTa Language.html',"   (let $age (age $who)")
found_search_result(metta_lang_dev,"",11,9799,'Controlling pattern matching _ MeTTa Language.html',"        (match &amp;self (= (age $other) $age)")
found_search_result(metta_lang_dev,"",11,9800,'Controlling pattern matching _ MeTTa Language.html',"               $other)))")
found_search_result(metta_lang_dev,"",11,9801,'Controlling pattern matching _ MeTTa Language.html',"! (of-same-age Bob) ; [Bob, Tom]")
found_search_result(metta_lang_dev,"",11,9802,'Controlling pattern matching _ MeTTa Language.html',"; without `of-same-age`:")
found_search_result(metta_lang_dev,"",11,9803,'Controlling pattern matching _ MeTTa Language.html',"! (let $age (age Bob)")
found_search_result(metta_lang_dev,"",11,9804,'Controlling pattern matching _ MeTTa Language.html',"       (match &amp;self (= (age $other) $age)")
found_search_result(metta_lang_dev,"",11,9805,'Controlling pattern matching _ MeTTa Language.html',"              $other)) ; also [Bob, Tom]")
found_search_result(metta_lang_dev,"",11,9806,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (= (age $other) (age Bob))")
found_search_result(metta_lang_dev,"",11,9807,'Controlling pattern matching _ MeTTa Language.html',"         $other) ; does not pattern-match")
found_search_result(metta_lang_dev,"",11,9808,'Controlling pattern matching _ MeTTa Language.html',"; evaluating the whole pattern is a bad idea")
found_search_result(metta_lang_dev,"",11,9809,'Controlling pattern matching _ MeTTa Language.html',"! (let $pattern (= (age $other) (age Bob))")
found_search_result(metta_lang_dev,"",11,9810,'Controlling pattern matching _ MeTTa Language.html',"       $pattern) ; [(= 5 5), (= 8 5), (= 5 5), (= 3 5)]")
found_search_result(metta_lang_dev,"",11,9811,'Controlling pattern matching _ MeTTa Language.html',"! (let $pattern (= (age $other) (age Bob))")
found_search_result(metta_lang_dev,"",11,9812,'Controlling pattern matching _ MeTTa Language.html',"       (match &amp;self $pattern $other)) ; does not pattern-match")
found_search_result(metta_lang_dev,"",12,9829,'Controlling pattern matching _ MeTTa Language.html',"(= (message-to-user $task)")
found_search_result(metta_lang_dev,"",12,9830,'Controlling pattern matching _ MeTTa Language.html',"   (Today you have $task))")
found_search_result(metta_lang_dev,"",12,9831,'Controlling pattern matching _ MeTTa Language.html',"(= (add-task-and-notify $task)")
found_search_result(metta_lang_dev,"",12,9832,'Controlling pattern matching _ MeTTa Language.html',"    (let () (add-atom &amp;self (TASK $task))")
found_search_result(metta_lang_dev,"",12,9833,'Controlling pattern matching _ MeTTa Language.html',"            (message-to-user $task))")
found_search_result(metta_lang_dev,"",12,9834,'Controlling pattern matching _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",12,9835,'Controlling pattern matching _ MeTTa Language.html',"! (get-type add-atom) ; (-&gt; hyperon::space::DynSpace Atom (-&gt;))")
found_search_result(metta_lang_dev,"",12,9836,'Controlling pattern matching _ MeTTa Language.html',"! (add-task-and-notify (Something to do))")
found_search_result(metta_lang_dev,"",12,9837,'Controlling pattern matching _ MeTTa Language.html',"! (match &amp;self (TASK $t) $t) # (Somthing to do)")
found_search_result(metta_lang_dev,"",1,9723,'Operations over atoms _ MeTTa Language.html',"! (get-type car-atom) ; (-&gt; Expression %Undefined%)")
found_search_result(metta_lang_dev,"",1,9724,'Operations over atoms _ MeTTa Language.html',"! (car-atom (1 2 3)) ; 1")
found_search_result(metta_lang_dev,"",1,9725,'Operations over atoms _ MeTTa Language.html',"! (car-atom (Cons X Nil)) ; Cons")
found_search_result(metta_lang_dev,"",2,9726,'Operations over atoms _ MeTTa Language.html',"! (car-atom (seg (point 1 1) (point 1 4))) ; seg! (get-type cdr-atom) ; (-&gt; Expression %Undefined%)")
found_search_result(metta_lang_dev,"",2,9727,'Operations over atoms _ MeTTa Language.html',"! (cdr-atom (1 2 3)) ; (2 3)")
found_search_result(metta_lang_dev,"",2,9728,'Operations over atoms _ MeTTa Language.html',"! (cdr-atom (Cons X Nil)) ; (X Nil)")
found_search_result(metta_lang_dev,"",2,9729,'Operations over atoms _ MeTTa Language.html',"! (cdr-atom (seg (point 1 1) (point 1 4))) ; ((point 1 1) (point 1 4))")
found_search_result(metta_lang_dev,"",3,9731,'Operations over atoms _ MeTTa Language.html',"! (get-type cons-atom) ; (-&gt; Atom Expression Expression)")
found_search_result(metta_lang_dev,"",3,9732,'Operations over atoms _ MeTTa Language.html',"! (cons-atom 1 (2 3)) ; (1 2 3)")
found_search_result(metta_lang_dev,"",3,9733,'Operations over atoms _ MeTTa Language.html',"! (cons-atom Cons (X Nil)) ; (Cons X Nil)")
found_search_result(metta_lang_dev,"",4,9734,'Operations over atoms _ MeTTa Language.html',"! (cons-atom seg ((point 1 1) (point 1 4))) ; (seg (point 1 1) (point 1 4))(= (reconstruct $xs)")
found_search_result(metta_lang_dev,"",4,9735,'Operations over atoms _ MeTTa Language.html',"   (let* (($head (car-atom $xs))")
found_search_result(metta_lang_dev,"",4,9736,'Operations over atoms _ MeTTa Language.html',"          ($tail (cdr-atom $xs)))")
found_search_result(metta_lang_dev,"",4,9737,'Operations over atoms _ MeTTa Language.html',"     (cons-atom $head $tail))")
found_search_result(metta_lang_dev,"",4,9738,'Operations over atoms _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",4,9739,'Operations over atoms _ MeTTa Language.html',"! (reconstruct (1 2 3)) ; (1 2 3)")
found_search_result(metta_lang_dev,"",5,9740,'Operations over atoms _ MeTTa Language.html',"! (reconstruct (Cons X Nil)) ; (Cons X Nil)! (cons-atom 1 (cdr-atom (1 2 3))) ; (1 cdr-atom (1 2 3))(: map-expr (-&gt; (-&gt; $t $t) Expression Expression))")
found_search_result(metta_lang_dev,"",5,9741,'Operations over atoms _ MeTTa Language.html',"(= (map-expr $f $expr)")
found_search_result(metta_lang_dev,"",5,9742,'Operations over atoms _ MeTTa Language.html',"   (if (== $expr ()) ()")
found_search_result(metta_lang_dev,"",5,9743,'Operations over atoms _ MeTTa Language.html',"       (let* (($head (car-atom $expr))")
found_search_result(metta_lang_dev,"",5,9744,'Operations over atoms _ MeTTa Language.html',"              ($tail (cdr-atom $expr))")
found_search_result(metta_lang_dev,"",5,9745,'Operations over atoms _ MeTTa Language.html',"              ($head-new ($f $head))")
found_search_result(metta_lang_dev,"",5,9746,'Operations over atoms _ MeTTa Language.html',"              ($tail-new (map-expr $f $tail))")
found_search_result(metta_lang_dev,"",5,9747,'Operations over atoms _ MeTTa Language.html',"             )")
found_search_result(metta_lang_dev,"",5,9748,'Operations over atoms _ MeTTa Language.html',"         (cons-atom $head-new $tail-new)")
found_search_result(metta_lang_dev,"",5,9749,'Operations over atoms _ MeTTa Language.html',"       )")
found_search_result(metta_lang_dev,"",5,9750,'Operations over atoms _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",5,9751,'Operations over atoms _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",5,9752,'Operations over atoms _ MeTTa Language.html',"! (map-expr not (False True False False))")
found_search_result(metta_lang_dev,"",6,9757,'Operations over atoms _ MeTTa Language.html',"(= (car (Cons $x $xs)) $x)")
found_search_result(metta_lang_dev,"",6,9758,'Operations over atoms _ MeTTa Language.html',"(= (cdr (Cons $x $xs)) $xs)")
found_search_result(metta_lang_dev,"",7,9759,'Operations over atoms _ MeTTa Language.html',"! (cdr (Cons 1 (Cons 2 (Cons 3 Nil))))(: map (-&gt; (-&gt; $t $t) Expression Expression))")
found_search_result(metta_lang_dev,"",7,9760,'Operations over atoms _ MeTTa Language.html',"(= (map $f Nil) Nil)")
found_search_result(metta_lang_dev,"",7,9761,'Operations over atoms _ MeTTa Language.html',"(= (map $f (Cons $x $xs))")
found_search_result(metta_lang_dev,"",7,9762,'Operations over atoms _ MeTTa Language.html',"   (Cons ($f $x) (map $f $xs)))")
found_search_result(metta_lang_dev,"",7,9763,'Operations over atoms _ MeTTa Language.html',"! (map not (Cons False (Cons True (Cons False (Cons False Nil)))))")
found_search_result(metta_lang_dev,"",8,9774,'Operations over atoms _ MeTTa Language.html',"(= (to-list $expr)")
found_search_result(metta_lang_dev,"",8,9775,'Operations over atoms _ MeTTa Language.html',"   (if (== $expr ()) Nil")
found_search_result(metta_lang_dev,"",8,9776,'Operations over atoms _ MeTTa Language.html',"     (Cons (car-atom $expr)")
found_search_result(metta_lang_dev,"",8,9777,'Operations over atoms _ MeTTa Language.html',"           (to-list (cdr-atom $expr)))")
found_search_result(metta_lang_dev,"",8,9778,'Operations over atoms _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",8,9779,'Operations over atoms _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",8,9780,'Operations over atoms _ MeTTa Language.html',"! (to-list (False (True False) False False))")
found_search_result(metta_lang_dev,"",9,9788,'Operations over atoms _ MeTTa Language.html',"(= (to-tree $expr)")
found_search_result(metta_lang_dev,"",9,9789,'Operations over atoms _ MeTTa Language.html',"   (case (get-metatype $expr)")
found_search_result(metta_lang_dev,"",9,9790,'Operations over atoms _ MeTTa Language.html',"      ((Expression")
found_search_result(metta_lang_dev,"",9,9791,'Operations over atoms _ MeTTa Language.html',"         (if (== $expr ()) Nil")
found_search_result(metta_lang_dev,"",9,9792,'Operations over atoms _ MeTTa Language.html',"             (Cons (to-tree (car-atom $expr))")
found_search_result(metta_lang_dev,"",9,9793,'Operations over atoms _ MeTTa Language.html',"                   (to-tree (cdr-atom $expr)))")
found_search_result(metta_lang_dev,"",9,9794,'Operations over atoms _ MeTTa Language.html',"         ))")
found_search_result(metta_lang_dev,"",9,9795,'Operations over atoms _ MeTTa Language.html',"       ($_ $expr)")
found_search_result(metta_lang_dev,"",9,9796,'Operations over atoms _ MeTTa Language.html',"      )")
found_search_result(metta_lang_dev,"",9,9797,'Operations over atoms _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",9,9798,'Operations over atoms _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",9,9799,'Operations over atoms _ MeTTa Language.html',"! (to-tree (False (True False) False False))")
found_search_result(metta_lang_dev,"",2,9727,'Control flow _ MeTTa Language.html',"(= (foo $x)")
found_search_result(metta_lang_dev,"",2,9728,'Control flow _ MeTTa Language.html',"   (if (&gt;= $x 0)")
found_search_result(metta_lang_dev,"",2,9729,'Control flow _ MeTTa Language.html',"       (+ $x 10)")
found_search_result(metta_lang_dev,"",2,9730,'Control flow _ MeTTa Language.html',"       (* $x -1)")
found_search_result(metta_lang_dev,"",2,9731,'Control flow _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",2,9732,'Control flow _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",2,9733,'Control flow _ MeTTa Language.html',"! (foo 1)  ; 11")
found_search_result(metta_lang_dev,"",3,9734,'Control flow _ MeTTa Language.html',"! (foo -9) ; 9! (if $x (+ 6 1) (- 7 2))")
found_search_result(metta_lang_dev,"",3,9735,'Control flow _ MeTTa Language.html',"(= (foo $b $x)")
found_search_result(metta_lang_dev,"",3,9736,'Control flow _ MeTTa Language.html',"   (if $b")
found_search_result(metta_lang_dev,"",3,9737,'Control flow _ MeTTa Language.html',"       (+ $x 10)")
found_search_result(metta_lang_dev,"",3,9738,'Control flow _ MeTTa Language.html',"       (* $x -1)")
found_search_result(metta_lang_dev,"",3,9739,'Control flow _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",3,9740,'Control flow _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",4,9741,'Control flow _ MeTTa Language.html',"! ((foo $b 1) $b) ; [(-1 False), (11 True)]! (if (&gt; $x 0) (+ $x 5) (- $x 5))")
found_search_result(metta_lang_dev,"",5,9746,'Control flow _ MeTTa Language.html',"! (get-type let)")
found_search_result(metta_lang_dev,"",6,9749,'Control flow _ MeTTa Language.html',"(= (test 1) 1)")
found_search_result(metta_lang_dev,"",6,9750,'Control flow _ MeTTa Language.html',"(= (test 1) 0)")
found_search_result(metta_lang_dev,"",6,9751,'Control flow _ MeTTa Language.html',"(= (test 2) 2)")
found_search_result(metta_lang_dev,"",7,9753,'Control flow _ MeTTa Language.html',"! (let $W (test $X) (println! ( $X =&gt; $W)))")
found_search_result(metta_lang_dev,"",8,9755,'Control flow _ MeTTa Language.html',"(= (test 1) 2)")
found_search_result(metta_lang_dev,"",8,9756,'Control flow _ MeTTa Language.html',"! (let 2 (test 1) YES) ; YES")
found_search_result(metta_lang_dev,"",9,9757,'Control flow _ MeTTa Language.html',"! (let (test 1) 2 NO ) ; empty(= (is-frog Sam) True)")
found_search_result(metta_lang_dev,"",9,9758,'Control flow _ MeTTa Language.html',"(= (print-if-frog $x)")
found_search_result(metta_lang_dev,"",9,9759,'Control flow _ MeTTa Language.html',"   (let True (is-frog $x)")
found_search_result(metta_lang_dev,"",9,9760,'Control flow _ MeTTa Language.html',"     (println! ($x is frog!))))")
found_search_result(metta_lang_dev,"",9,9761,'Control flow _ MeTTa Language.html',"! (print-if-frog Sam) ; ()")
found_search_result(metta_lang_dev,"",10,9762,'Control flow _ MeTTa Language.html',"! (print-if-frog Ben) ; empty(Sam is 34 years old)")
found_search_result(metta_lang_dev,"",10,9763,'Control flow _ MeTTa Language.html',"! (match &amp;self ($who is (+ 20 14) years old) $who) ; empty")
found_search_result(metta_lang_dev,"",10,9764,'Control flow _ MeTTa Language.html',"! (let $r (+ 20 14)")
found_search_result(metta_lang_dev,"",11,9765,'Control flow _ MeTTa Language.html',"   (match &amp;self ($who is $r years old) $who)) ; Sam(= (fact Sam) (age 34))")
found_search_result(metta_lang_dev,"",11,9766,'Control flow _ MeTTa Language.html',"(= (fact Sam) (color green))")
found_search_result(metta_lang_dev,"",11,9767,'Control flow _ MeTTa Language.html',"(= (fact Tom) (age 14))")
found_search_result(metta_lang_dev,"",11,9768,'Control flow _ MeTTa Language.html',"! (let (age $r) (fact $who)")
found_search_result(metta_lang_dev,"",11,9769,'Control flow _ MeTTa Language.html',"   ($who is $r)) ; [(Tom is 14), (Sam is 34)]")
found_search_result(metta_lang_dev,"",12,9775,'Control flow _ MeTTa Language.html',"(Sam is 34)")
found_search_result(metta_lang_dev,"",12,9776,'Control flow _ MeTTa Language.html',"(Tom is 14)")
found_search_result(metta_lang_dev,"",12,9777,'Control flow _ MeTTa Language.html',"(= (person-by-age $age)")
found_search_result(metta_lang_dev,"",12,9778,'Control flow _ MeTTa Language.html',"   (match &amp;self ($who is $age) $who))")
found_search_result(metta_lang_dev,"",12,9779,'Control flow _ MeTTa Language.html',"(= (persons-of-age $a $b)")
found_search_result(metta_lang_dev,"",12,9780,'Control flow _ MeTTa Language.html',"   (let* ((($age-min $age-max $diff)")
found_search_result(metta_lang_dev,"",12,9781,'Control flow _ MeTTa Language.html',"           (if (&lt; $a $b)")
found_search_result(metta_lang_dev,"",12,9782,'Control flow _ MeTTa Language.html',"               ($a $b (- $b $a))")
found_search_result(metta_lang_dev,"",12,9783,'Control flow _ MeTTa Language.html',"               ($b $a (- $a $b))))")
found_search_result(metta_lang_dev,"",12,9784,'Control flow _ MeTTa Language.html',"          ($younger (person-by-age $age-min))")
found_search_result(metta_lang_dev,"",12,9785,'Control flow _ MeTTa Language.html',"          ($older   (person-by-age $age-max))")
found_search_result(metta_lang_dev,"",12,9786,'Control flow _ MeTTa Language.html',"         )")
found_search_result(metta_lang_dev,"",12,9787,'Control flow _ MeTTa Language.html',"         ($younger is younger than $older by $diff years))")
found_search_result(metta_lang_dev,"",12,9788,'Control flow _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",13,9789,'Control flow _ MeTTa Language.html',"! (persons-of-age 34 14)(Sam is 34)")
found_search_result(metta_lang_dev,"",13,9790,'Control flow _ MeTTa Language.html',"(= (age++ $who)")
found_search_result(metta_lang_dev,"",13,9791,'Control flow _ MeTTa Language.html',"   (let* (($age (match &amp;self ($who is $a) $a))")
found_search_result(metta_lang_dev,"",13,9792,'Control flow _ MeTTa Language.html',"          ( ()  (println! (WAS: ($who is $age))))")
found_search_result(metta_lang_dev,"",13,9793,'Control flow _ MeTTa Language.html',"          ( ()  (remove-atom &amp;self ($who is $age)))")
found_search_result(metta_lang_dev,"",13,9794,'Control flow _ MeTTa Language.html',"          ( ()  (add-reduct &amp;self ($who is (+ $age 1))))")
found_search_result(metta_lang_dev,"",13,9795,'Control flow _ MeTTa Language.html',"          ($upd (match &amp;self ($who is $a) $a))")
found_search_result(metta_lang_dev,"",13,9796,'Control flow _ MeTTa Language.html',"          ( ()  (println! (NOW: ($who is $upd)))))")
found_search_result(metta_lang_dev,"",13,9797,'Control flow _ MeTTa Language.html',"        $upd")
found_search_result(metta_lang_dev,"",13,9798,'Control flow _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",13,9799,'Control flow _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",13,9800,'Control flow _ MeTTa Language.html',"! (age++ Sam) ; 35")
found_search_result(metta_lang_dev,"",14,9803,'Control flow _ MeTTa Language.html',"(Sam is Frog)")
found_search_result(metta_lang_dev,"",14,9804,'Control flow _ MeTTa Language.html',"(Apple is Green)")
found_search_result(metta_lang_dev,"",14,9805,'Control flow _ MeTTa Language.html',"(= (test $who)")
found_search_result(metta_lang_dev,"",14,9806,'Control flow _ MeTTa Language.html',"   (case (match &amp;self ($who is $x) $x)")
found_search_result(metta_lang_dev,"",14,9807,'Control flow _ MeTTa Language.html',"    (")
found_search_result(metta_lang_dev,"",14,9808,'Control flow _ MeTTa Language.html',"        (42)")
found_search_result(metta_lang_dev,"",14,9809,'Control flow _ MeTTa Language.html',"        (Frog )")
found_search_result(metta_lang_dev,"",14,9810,'Control flow _ MeTTa Language.html',"        ($a   ($who is $a))")
found_search_result(metta_lang_dev,"",14,9811,'Control flow _ MeTTa Language.html',"    )))")
found_search_result(metta_lang_dev,"",14,9812,'Control flow _ MeTTa Language.html',"! (test Sam) ; \"Do not ask me about frogs\"")
found_search_result(metta_lang_dev,"",14,9813,'Control flow _ MeTTa Language.html',"! (test Apple) ; (Apple is Green)")
found_search_result(metta_lang_dev,"",14,9814,'Control flow _ MeTTa Language.html',"! (test Car) ; empty")
found_search_result(metta_lang_dev,"",15,9817,'Control flow _ MeTTa Language.html',"! (case (empty)")
found_search_result(metta_lang_dev,"",15,9818,'Control flow _ MeTTa Language.html',"    ((Empty )")
found_search_result(metta_lang_dev,"",15,9819,'Control flow _ MeTTa Language.html',"    ($_))")
found_search_result(metta_lang_dev,"",15,9820,'Control flow _ MeTTa Language.html',"  )")
found_search_result(metta_lang_dev,"",16,9823,'Control flow _ MeTTa Language.html',"(= (rps-winner $x $y)")
found_search_result(metta_lang_dev,"",16,9824,'Control flow _ MeTTa Language.html',"   (case ($x $y)")
found_search_result(metta_lang_dev,"",16,9825,'Control flow _ MeTTa Language.html',"     (((Paper Rock) First)")
found_search_result(metta_lang_dev,"",16,9826,'Control flow _ MeTTa Language.html',"      ((Scissors Paper) First)")
found_search_result(metta_lang_dev,"",16,9827,'Control flow _ MeTTa Language.html',"      ((Rock Scissors) First)")
found_search_result(metta_lang_dev,"",16,9828,'Control flow _ MeTTa Language.html',"      (($a $a) Draw)")
found_search_result(metta_lang_dev,"",16,9829,'Control flow _ MeTTa Language.html',"      ($_ Second))")
found_search_result(metta_lang_dev,"",16,9830,'Control flow _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",16,9831,'Control flow _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",16,9832,'Control flow _ MeTTa Language.html',"! (rps-winner Paper Scissors) ; Second")
found_search_result(metta_lang_dev,"",16,9833,'Control flow _ MeTTa Language.html',"! (rps-winner Rock  Scissors) ; First")
found_search_result(metta_lang_dev,"",16,9834,'Control flow _ MeTTa Language.html',"! (rps-winner Paper Paper   ) ; Draw")
found_search_result(metta_lang_dev,"",1,9723,'Handling nondeterministic results _ MeTTa Language.html',"(= (bin) 0)")
found_search_result(metta_lang_dev,"",1,9724,'Handling nondeterministic results _ MeTTa Language.html',"(= (bin) 1)")
found_search_result(metta_lang_dev,"",1,9725,'Handling nondeterministic results _ MeTTa Language.html',"(= (bin2) (superpose (0 1)))")
found_search_result(metta_lang_dev,"",1,9726,'Handling nondeterministic results _ MeTTa Language.html',"! (bin) ; [0, 1]")
found_search_result(metta_lang_dev,"",1,9727,'Handling nondeterministic results _ MeTTa Language.html',"! (bin2) ; [0, 1]")
found_search_result(metta_lang_dev,"",2,9734,'Handling nondeterministic results _ MeTTa Language.html',"! (+ 2 (superpose (3 4 5))) ; [5, 6, 7](= (ikb) international-klein-blue)")
found_search_result(metta_lang_dev,"",2,9735,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) green)")
found_search_result(metta_lang_dev,"",2,9736,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) yellow)")
found_search_result(metta_lang_dev,"",2,9737,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) (ikb))")
found_search_result(metta_lang_dev,"",2,9739,'Handling nondeterministic results _ MeTTa Language.html',"!(assertEqual")
found_search_result(metta_lang_dev,"",2,9740,'Handling nondeterministic results _ MeTTa Language.html',"  (match &amp;self (= (color) $x) $x)")
found_search_result(metta_lang_dev,"",2,9741,'Handling nondeterministic results _ MeTTa Language.html',"  (superpose ((ikb) yellow green))) ; ()")
found_search_result(metta_lang_dev,"",2,9742,'Handling nondeterministic results _ MeTTa Language.html',"!(assertEqualToResult")
found_search_result(metta_lang_dev,"",2,9743,'Handling nondeterministic results _ MeTTa Language.html',"   (match &amp;self (= (color) $x) $x)")
found_search_result(metta_lang_dev,"",2,9744,'Handling nondeterministic results _ MeTTa Language.html',"  ((ikb) yellow green)) ; Error")
found_search_result(metta_lang_dev,"",3,9752,'Handling nondeterministic results _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",3,9753,'Handling nondeterministic results _ MeTTa Language.html',"! (assertEqual")
found_search_result(metta_lang_dev,"",3,9754,'Handling nondeterministic results _ MeTTa Language.html',"    (match &amp;self (Parent Tom $x) $x)")
found_search_result(metta_lang_dev,"",3,9755,'Handling nondeterministic results _ MeTTa Language.html',"    (empty)) ; ()")
found_search_result(metta_lang_dev,"",3,9756,'Handling nondeterministic results _ MeTTa Language.html',"! (assertEqualToResult")
found_search_result(metta_lang_dev,"",3,9757,'Handling nondeterministic results _ MeTTa Language.html',"    (match &amp;self (Parent Tom $x) $x)")
found_search_result(metta_lang_dev,"",4,9758,'Handling nondeterministic results _ MeTTa Language.html',"    ()) ; ()(= (eq $x $x) True)")
found_search_result(metta_lang_dev,"",4,9759,'Handling nondeterministic results _ MeTTa Language.html',"! (eq a b) ; (eq a b)")
found_search_result(metta_lang_dev,"",4,9760,'Handling nondeterministic results _ MeTTa Language.html',"(= (eq $x $y) (empty))")
found_search_result(metta_lang_dev,"",4,9761,'Handling nondeterministic results _ MeTTa Language.html',"! (eq a b) ; no result")
found_search_result(metta_lang_dev,"",5,9769,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) red)")
found_search_result(metta_lang_dev,"",5,9770,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) green)")
found_search_result(metta_lang_dev,"",5,9771,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) blue)")
found_search_result(metta_lang_dev,"",5,9772,'Handling nondeterministic results _ MeTTa Language.html',"(= (fruit) apple)")
found_search_result(metta_lang_dev,"",5,9773,'Handling nondeterministic results _ MeTTa Language.html',"(= (fruit) banana)")
found_search_result(metta_lang_dev,"",5,9774,'Handling nondeterministic results _ MeTTa Language.html',"(= (fruit) mango)")
found_search_result(metta_lang_dev,"",5,9775,'Handling nondeterministic results _ MeTTa Language.html',"(= (filter-prefer blue) blue)")
found_search_result(metta_lang_dev,"",5,9776,'Handling nondeterministic results _ MeTTa Language.html',"(= (filter-prefer banana) banana)")
found_search_result(metta_lang_dev,"",5,9777,'Handling nondeterministic results _ MeTTa Language.html',"(= (filter-prefer mango) mango)")
found_search_result(metta_lang_dev,"",5,9778,'Handling nondeterministic results _ MeTTa Language.html',"(= (filter-prefer $x) (empty))")
found_search_result(metta_lang_dev,"",5,9779,'Handling nondeterministic results _ MeTTa Language.html',"! (filter-prefer (color)) ; [blue]")
found_search_result(metta_lang_dev,"",5,9780,'Handling nondeterministic results _ MeTTa Language.html',"! (filter-prefer (fruit)) ; [mango, banana]")
found_search_result(metta_lang_dev,"",6,9785,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) red)")
found_search_result(metta_lang_dev,"",6,9786,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) green)")
found_search_result(metta_lang_dev,"",6,9787,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) blue)")
found_search_result(metta_lang_dev,"",6,9788,'Handling nondeterministic results _ MeTTa Language.html',"! (color) ; three results: [blue, red, green]")
found_search_result(metta_lang_dev,"",7,9789,'Handling nondeterministic results _ MeTTa Language.html',"! (collapse (color)) ; one result: [(blue red green)](= (color) green)")
found_search_result(metta_lang_dev,"",7,9790,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) yellow)")
found_search_result(metta_lang_dev,"",7,9791,'Handling nondeterministic results _ MeTTa Language.html',"(= (color) red)")
found_search_result(metta_lang_dev,"",7,9792,'Handling nondeterministic results _ MeTTa Language.html',"! (color) ; [green, yellow, red]")
found_search_result(metta_lang_dev,"",7,9793,'Handling nondeterministic results _ MeTTa Language.html',"! (collapse (color)) ; [(green yellow red)]")
found_search_result(metta_lang_dev,"",7,9794,'Handling nondeterministic results _ MeTTa Language.html',"! (let $x (collapse (color))")
found_search_result(metta_lang_dev,"",7,9795,'Handling nondeterministic results _ MeTTa Language.html',"    (superpose $x))  ; [green, yellow, red]")
found_search_result(metta_lang_dev,"",7,9796,'Handling nondeterministic results _ MeTTa Language.html',"! (superpose (1 2 3)) ; [1, 2, 3]")
found_search_result(metta_lang_dev,"",7,9797,'Handling nondeterministic results _ MeTTa Language.html',"! (collapse (superpose (1 2 3)))")
found_search_result(metta_lang_dev,"",7,9798,'Handling nondeterministic results _ MeTTa Language.html',"! (let $x (superpose (1 2 3)) ; [(1 2 3)]")
found_search_result(metta_lang_dev,"",7,9799,'Handling nondeterministic results _ MeTTa Language.html',"    (collapse $x))    ; [(1), (2), (3)]")
found_search_result(metta_lang_dev,"",1,9728,'Console output and debugging _ MeTTa Language.html',"! (println!)")
found_search_result(metta_lang_dev,"",2,9729,'Console output and debugging _ MeTTa Language.html',"! (println! ($v1 5))(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",2,9730,'Console output and debugging _ MeTTa Language.html',"! (match &amp;self (Parent Bob Ann) (Ann is Bob`s child))")
found_search_result(metta_lang_dev,"",2,9731,'Console output and debugging _ MeTTa Language.html',"! (println! (match &amp;self (Parent Bob Ann) (Bob is Ann`s parent)))")
found_search_result(metta_lang_dev,"",3,9733,'Console output and debugging _ MeTTa Language.html',"! (get-type (trace! (Expecting 3) (+ 1 2))) ; Number(: my-trace (-&gt; %Undefined% $a $a))")
found_search_result(metta_lang_dev,"",3,9734,'Console output and debugging _ MeTTa Language.html',"(= (my-trace $out $res)")
found_search_result(metta_lang_dev,"",3,9735,'Console output and debugging _ MeTTa Language.html',"   (let () (println! $out) $res))")
found_search_result(metta_lang_dev,"",4,9736,'Console output and debugging _ MeTTa Language.html',"! (my-trace (Expecting 3) (+ 1 2))(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",4,9737,'Console output and debugging _ MeTTa Language.html',"! (trace! ; print this expression")
found_search_result(metta_lang_dev,"",4,9738,'Console output and debugging _ MeTTa Language.html',"   (match &amp;self (Parent $x Ann)")
found_search_result(metta_lang_dev,"",4,9739,'Console output and debugging _ MeTTa Language.html',"          ($x is Ann`s parent)))  ; return the result of this expression")
found_search_result(metta_lang_dev,"",4,9740,'Console output and debugging _ MeTTa Language.html',"!(trace!  ; print this expression")
found_search_result(metta_lang_dev,"",4,9741,'Console output and debugging _ MeTTa Language.html',"   (match &amp;self (Parent Bob $x)")
found_search_result(metta_lang_dev,"",5,9742,'Console output and debugging _ MeTTa Language.html',"          ($x is Bob`s child))) ; return the result of this expression(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",5,9743,'Console output and debugging _ MeTTa Language.html',"! (trace! ((Expected: (Bob is Ann`s parent))")
found_search_result(metta_lang_dev,"",5,9744,'Console output and debugging _ MeTTa Language.html',"           (Got: (match &amp;self (Parent $x Ann) ($x is Ann`s parent)))")
found_search_result(metta_lang_dev,"",5,9745,'Console output and debugging _ MeTTa Language.html',"          )")
found_search_result(metta_lang_dev,"",6,9746,'Console output and debugging _ MeTTa Language.html',"   ())(Fruit apple)")
found_search_result(metta_lang_dev,"",6,9747,'Console output and debugging _ MeTTa Language.html',"(= (fruit $x)")
found_search_result(metta_lang_dev,"",6,9748,'Console output and debugging _ MeTTa Language.html',"   (match &amp;self (Fruit $x) $x))")
found_search_result(metta_lang_dev,"",6,9749,'Console output and debugging _ MeTTa Language.html',"! (fruit $x) ; apple")
found_search_result(metta_lang_dev,"",7,9750,'Console output and debugging _ MeTTa Language.html',"! (quote (fruit $x)) ; (quote (fruit $x))(: trace-eval (-&gt; Atom Atom))")
found_search_result(metta_lang_dev,"",7,9751,'Console output and debugging _ MeTTa Language.html',"(= (trace-eval $expr)")
found_search_result(metta_lang_dev,"",7,9752,'Console output and debugging _ MeTTa Language.html',"   (let $result $expr")
found_search_result(metta_lang_dev,"",7,9753,'Console output and debugging _ MeTTa Language.html',"        (trace! (EVAL: (quote $expr) --&gt; $result)")
found_search_result(metta_lang_dev,"",7,9754,'Console output and debugging _ MeTTa Language.html',"                $result)))")
found_search_result(metta_lang_dev,"",7,9755,'Console output and debugging _ MeTTa Language.html',"(Fruit apple)")
found_search_result(metta_lang_dev,"",7,9756,'Console output and debugging _ MeTTa Language.html',"(= (fruit $x)")
found_search_result(metta_lang_dev,"",7,9757,'Console output and debugging _ MeTTa Language.html',"   (match &amp;self (Fruit $x) $x))")
found_search_result(metta_lang_dev,"",7,9758,'Console output and debugging _ MeTTa Language.html',"; (EVAL: (quote (fruit $x)) --&gt; apple) is printed to stdout")
found_search_result(metta_lang_dev,"",7,9759,'Console output and debugging _ MeTTa Language.html',"! (Overall result is (trace-eval (fruit $x))) ; (Overall result is apple)")
found_search_result(metta_lang_dev,"",8,9761,'Console output and debugging _ MeTTa Language.html',"(= (add-bin $x)")
found_search_result(metta_lang_dev,"",8,9762,'Console output and debugging _ MeTTa Language.html',"   (let $r (+ $x 1)")
found_search_result(metta_lang_dev,"",8,9763,'Console output and debugging _ MeTTa Language.html',"        (trace! (quote ((add-bin $x) is $r))")
found_search_result(metta_lang_dev,"",8,9764,'Console output and debugging _ MeTTa Language.html',"                $r)))")
found_search_result(metta_lang_dev,"",8,9765,'Console output and debugging _ MeTTa Language.html',"(= (add-bin $x)")
found_search_result(metta_lang_dev,"",8,9766,'Console output and debugging _ MeTTa Language.html',"   (trace! (quote ((add-bin $x) is $x))")
found_search_result(metta_lang_dev,"",8,9767,'Console output and debugging _ MeTTa Language.html',"           $x))")
found_search_result(metta_lang_dev,"",8,9768,'Console output and debugging _ MeTTa Language.html',"; (quote ((add-bin 1) is 1)) and (quote ((add-bin 1) is 2)) will be printed")
found_search_result(metta_lang_dev,"",9,9769,'Console output and debugging _ MeTTa Language.html',"! (add-bin 1) ; [1, 2]")
found_search_result(metta_lang_dev,"",10,9775,'Console output and debugging _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",10,9776,'Console output and debugging _ MeTTa Language.html',"! (assertEqual")
found_search_result(metta_lang_dev,"",10,9777,'Console output and debugging _ MeTTa Language.html',"   (match &amp;self (Parent $x Ann) $x)")
found_search_result(metta_lang_dev,"",10,9778,'Console output and debugging _ MeTTa Language.html',"   (unify (Parent $x Ann) (Parent Bob $y) $x Failed)) ; ()")
found_search_result(metta_lang_dev,"",10,9779,'Console output and debugging _ MeTTa Language.html',"! (assertEqual (+ 1 2) 3) ; ()")
found_search_result(metta_lang_dev,"",10,9780,'Console output and debugging _ MeTTa Language.html',"! (assertEqual (+ 1 2) (+ 1 4)) ; Error-expression")
found_search_result(metta_lang_dev,"",11,9790,'Console output and debugging _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",11,9791,'Console output and debugging _ MeTTa Language.html',"(Parent Pam Ann)")
found_search_result(metta_lang_dev,"",11,9792,'Console output and debugging _ MeTTa Language.html',"! (assertEqualToResult")
found_search_result(metta_lang_dev,"",11,9793,'Console output and debugging _ MeTTa Language.html',"    (match &amp;self (Parent $x Ann) $x)")
found_search_result(metta_lang_dev,"",11,9794,'Console output and debugging _ MeTTa Language.html',"    (Bob Pam))  ; ()")
found_search_result(metta_lang_dev,"",11,9795,'Console output and debugging _ MeTTa Language.html',"(= (bin) 0)")
found_search_result(metta_lang_dev,"",11,9796,'Console output and debugging _ MeTTa Language.html',"(= (bin) 1)")
found_search_result(metta_lang_dev,"",11,9797,'Console output and debugging _ MeTTa Language.html',"! (assertEqualToResult (bin) (0 1)) ; ()")
found_search_result(metta_lang_dev,"",11,9798,'Console output and debugging _ MeTTa Language.html',"! (assertEqualToResult (+ 1 2) (3)) ; ()")
found_search_result(metta_lang_dev,"",11,9799,'Console output and debugging _ MeTTa Language.html',"! (assertEqualToResult")
found_search_result(metta_lang_dev,"",11,9800,'Console output and debugging _ MeTTa Language.html',"    (+ 1 untyped-symbol)")
found_search_result(metta_lang_dev,"",11,9801,'Console output and debugging _ MeTTa Language.html',"   ((+ 1 untyped-symbol))) ; ()")
found_search_result(metta_lang_dev,"",11,9802,'Console output and debugging _ MeTTa Language.html',"! (assertEqualToResult (+ 1 2) ((+ 1 2))) ; Error")
found_search_result(metta_lang_dev,"",2,9724,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Female Pam)")
found_search_result(metta_lang_dev,"",2,9725,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Male Tom)")
found_search_result(metta_lang_dev,"",2,9726,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Male Bob)")
found_search_result(metta_lang_dev,"",2,9727,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Female Liz)")
found_search_result(metta_lang_dev,"",2,9728,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Female Pat)")
found_search_result(metta_lang_dev,"",2,9729,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Female Ann)")
found_search_result(metta_lang_dev,"",2,9730,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Male Jim)")
found_search_result(metta_lang_dev,"",2,9731,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Tom Bob)")
found_search_result(metta_lang_dev,"",2,9732,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Pam Bob)")
found_search_result(metta_lang_dev,"",2,9733,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Tom Liz)")
found_search_result(metta_lang_dev,"",2,9734,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",2,9735,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Bob Pat)")
found_search_result(metta_lang_dev,"",2,9736,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Pat Jim)")
found_search_result(metta_lang_dev,"",2,9738,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(= (get-sister $x)")
found_search_result(metta_lang_dev,"",2,9739,'Nested queries and recursive graph traversal _ MeTTa Language.html',"   (match &amp;self")
found_search_result(metta_lang_dev,"",2,9740,'Nested queries and recursive graph traversal _ MeTTa Language.html',"     (, (Parent $y $x)")
found_search_result(metta_lang_dev,"",2,9741,'Nested queries and recursive graph traversal _ MeTTa Language.html',"        (Parent $y $z)")
found_search_result(metta_lang_dev,"",2,9742,'Nested queries and recursive graph traversal _ MeTTa Language.html',"        (Female $z))")
found_search_result(metta_lang_dev,"",2,9743,'Nested queries and recursive graph traversal _ MeTTa Language.html',"     $z")
found_search_result(metta_lang_dev,"",2,9744,'Nested queries and recursive graph traversal _ MeTTa Language.html',"   )")
found_search_result(metta_lang_dev,"",2,9745,'Nested queries and recursive graph traversal _ MeTTa Language.html',")")
found_search_result(metta_lang_dev,"",2,9746,'Nested queries and recursive graph traversal _ MeTTa Language.html',"! (get-sister Bob)")
found_search_result(metta_lang_dev,"",3,9763,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Tom Bob)")
found_search_result(metta_lang_dev,"",3,9764,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Pam Bob)")
found_search_result(metta_lang_dev,"",3,9765,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Tom Liz)")
found_search_result(metta_lang_dev,"",3,9766,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Bob Ann)")
found_search_result(metta_lang_dev,"",3,9767,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Bob Pat)")
found_search_result(metta_lang_dev,"",3,9768,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Pat Jim)")
found_search_result(metta_lang_dev,"",3,9769,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(Parent Jim Lil)")
found_search_result(metta_lang_dev,"",3,9771,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(= (parent $x $y) (match &amp;self (Parent $x $y) $x))")
found_search_result(metta_lang_dev,"",3,9772,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(= (predecessor $x $z) (parent $x $z))")
found_search_result(metta_lang_dev,"",3,9773,'Nested queries and recursive graph traversal _ MeTTa Language.html',"(= (predecessor $x $z) (predecessor $x (parent $y $z)))")
found_search_result(metta_lang_dev,"",3,9774,'Nested queries and recursive graph traversal _ MeTTa Language.html',"; Who are predecessors of Lil")
found_search_result(metta_lang_dev,"",3,9775,'Nested queries and recursive graph traversal _ MeTTa Language.html',"! (predecessor $x Lil)")
