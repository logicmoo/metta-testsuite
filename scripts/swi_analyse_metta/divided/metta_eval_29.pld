   eval_20(Eq,RetType,Depth,Self,Eval,RetVal),YY=RetVal.


eval_20(Eq,RetType,Depth,Self,['subtraction',Eval1,Eval2],RetVal):- !,
    lazy_subtraction(variant_by_type,RetVal1^eval_args(Eq,RetType,Depth,Self,Eval1,RetVal1),
                  RetVal2^eval_args(Eq,RetType,Depth,Self,Eval2,RetVal2),
                  RetVal).

eval_20(Eq,RetType,Depth,Self,['pred-subtraction',P2,Eval1,Eval2],RetVal):- !,
    lazy_subtraction(P2,RetVal1^eval_args(Eq,RetType,Depth,Self,Eval1,RetVal1),
                  RetVal2^eval_args(Eq,RetType,Depth,Self,Eval2,RetVal2),
                  RetVal).

eval_20(Eq,RetType,Depth,Self,['union',Eval1,Eval2],RetVal):- !,
    lazy_union(variant_by_type,RetVal1^eval_args(Eq,RetType,Depth,Self,Eval1,RetVal1),
                  RetVal2^eval_args(Eq,RetType,Depth,Self,Eval2,RetVal2),
                  RetVal).

eval_20(Eq,RetType,Depth,Self,['pred-union',P2,Eval1,Eval2],RetVal):- !,
    lazy_union(P2,RetVal1^eval_args(Eq,RetType,Depth,Self,Eval1,RetVal1),
                  RetVal2^eval_args(Eq,RetType,Depth,Self,Eval2,RetVal2),
                  RetVal).

%eval_20(Eq,RetType,_Dpth,_Slf,['py-list',Atom_list],CDR_Y):-
% !, Atom=[_|CDR],!,do_expander(Eq,RetType,Atom_list, CDR_Y ).

eval_20(Eq,RetType,Depth,Self,['intersection',Eval1,Eval2],RetVal):- !,
    lazy_intersection(variant_by_type,RetVal1^eval_args(Eq,RetType,Depth,Self,Eval1,RetVal1),
                  RetVal2^eval_args(Eq,RetType,Depth,Self,Eval2,RetVal2),
                  RetVal).

eval_20(Eq,RetType,Depth,Self,['pred-intersection',P2,Eval1,Eval2],RetVal):- !,
    lazy_intersection(P2,RetVal1^eval_args(Eq,RetType,Depth,Self,Eval1,RetVal1),
                  RetVal2^eval_args(Eq,RetType,Depth,Self,Eval2,RetVal2),
                  RetVal).

%% lazy_intersection(:P2, +E1_Call1, +E2_Call2, -E) is nondet.
%  - Performs a intersection operation using lazy evaluation.
%  - It intersects elements generated by Call2 from those generated by Call1.
% Arguments:
%  - P2: Any arity 2 predicate
%  - E1^Call1: The first goal (Call1) generating elements (E1).
%  - E2^Call2: The second goal (Call2) generating elements (E2).
%  - E: The resulting element after subtracting elements of the second set from the first set.
lazy_intersection(P2, E1^Call1, E2^Call2, E1) :-
    % Step 1: Evaluate Call1 to generate E1
    call(Call1),
    % Step 2: Use lazy_findall/3 to declare that all elements satisfying Call2 are supposedly in List2
    lazy_findall(E2, Call2, List2),
    % Step 3: Perform the intersection logic
    % Only return E1 if it is not a member of List2
    member(E2, List2), call(P2,E1,E2).


%% lazy_subtraction(:P2, +E1_Call1, +E2_Call2, -E) is nondet.
%  - Performs a subtraction operation using lazy evaluation.
%  - It subtracts elements generated by Call2 from those generated by Call1.
% Arguments:
%  - P2: Any arity 2 predicate
%  - E1^Call1: The first goal (Call1) generating elements (E1).