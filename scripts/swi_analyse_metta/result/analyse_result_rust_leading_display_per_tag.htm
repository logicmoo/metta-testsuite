
<html> <head> 

<script> 
function open_div(xid){ document.getElementById(xid).style.display = 'block'; }
function close_div(xid){ document.getElementById(xid).style.display = 'none'; }

</script> 

</head> 

<body style="font-family: arial; font-size: 12pt; background-color: #E5E5E5"> 
 <H2> 
include_metta_files </H2> 
 <H2> 
display_per_tag </H2> 
 <H2> 
rust_leading </H2> 

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> &self</i></b>  <a onclick="prompt('copy path','&self');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>&self</b>"), move |_| { self_atom.clone() }); &self   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> True|False</i></b>  <a onclick="prompt('copy path','True|False');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>True|False</b>"), True|False   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> [\-\+]?\d+</i></b>  <a onclick="prompt('copy path','[\-\+]?\d+');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_fallible_token(regex(r"<b>[\-\+]?\d+</b>"), [\-\+]?\d+   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> [\-\+]?\d+(\.\d+)?[eE][\-\+]?\d+</i></b>  <a onclick="prompt('copy path','[\-\+]?\d+(\.\d+)?[eE][\-\+]?\d+');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_fallible_token(regex(r"<b>[\-\+]?\d+(\.\d+)?[eE][\-\+]?\d+</b>"), [\-\+]?\d+(\.\d+)?[eE][\-\+]?\d+   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> [\-\+]?\d+\.\d+</i></b>  <a onclick="prompt('copy path','[\-\+]?\d+\.\d+');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_fallible_token(regex(r"<b>[\-\+]?\d+\.\d+</b>"), [\-\+]?\d+\.\d+   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> add-atom</i></b>  <a onclick="prompt('copy path','add-atom');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>add-atom</b>"), move |_| { add_atom_op.clone() }); add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>add-atom</b>', [manipulation, qhelp("Replaces an atom within a structure.")]). add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta  <br> 
!(<b>add-atom</b> &kb (SS-P_AS A_AS B_AS)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta  <br> 
!(<b>add-atom</b> &kb (SS-Q_AS A_AS C_AS)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
!(<b>add-atom</b> &das (Test (Test A))) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
!(<b>add-atom</b> &das (Best (Test A))) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
!(<b>add-atom</b> &das Test) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
!(<b>add-atom</b> &das (Rest (Test B))) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
!(<b>add-atom</b> &das (Test (Test B))) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/test_include.metta  <br> 
(five isprime)
(seven isprime)
!(<b>add-atom</b> &self (six notprime))
 add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
  (<b>add-atom</b> &self (= (my-nspace) $space))) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
!(<b>add-atom</b> (my-nspace) (The user name is William)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
!(<b>add-atom</b> (my-nspace) (William is 26 years old)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
!(<b>add-atom</b> (my-nspace) (William has 2 brothers)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
!(<b>add-atom</b> (my-nspace) (Brothers names are Mike and Nick)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
!(<b>add-atom</b> (my-nspace) (Nick is 3 years older than William)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
!(<b>add-atom</b> (my-nspace) (Mike is 5 years younger than Nick)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
  (<b>add-atom</b> &self (= (my-ispace) $space))) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
!(<b>add-atom</b> (my-ispace) (lunch-ordering)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
!(<b>add-atom</b> (my-ispace) (hobby)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
!(<b>add-atom</b> (my-ispace) (user)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
         (<b>add-atom</b> &self (= (status (Goal $goal)) $new-state)) add-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e1_kb_write.metta  <br> 
       (<b>add-atom</b> &kb (Green $x))) add-atom   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> bind!</i></b>  <a onclick="prompt('copy path','bind!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>bind!</b>"), move |_| { bind_op.clone() }); bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,_Depth,_Slf,['<b>bind!</b>',Other,['new-space']],RetVal):- atom(Other),!, bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>bind!</b>',Other,Expr],RetVal):- !, bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_interp.pl  <br> 
'<b>bind!</b>'(Environment, Variable, Value):- eval_H(['bind!', Environment, Variable], Value). bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta  <br> 
!(<b>bind!</b> &kb (new-space)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
!(<b>bind!</b> &das (new-das)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
;!(<b>bind!</b> &das (new-remote-das (Error "Put your IP here" ()) 8081)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
;!(<b>bind!</b> &das (new-das)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
!(<b>bind!</b> &das (new-remote-das (Error "Put your IP here" ()) (Error "Put port number here" ()))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/numpy/nm_test.metta  <br> 
!(<b>bind!</b> &x (np.vector 1 2 3)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/numpy/nm_test.metta  <br> 
!(<b>bind!</b> &y (np.array (3 2 3))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/numpy/nm_test.metta  <br> 
!(<b>bind!</b> &m (np.array ((6 1) (7 2) (8 3)))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/numpy/nm_test.metta  <br> 
!(<b>bind!</b> &mt (np.array ((1 0 0) (0 1 0)))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_03_langchain.metta  <br> 
!(<b>bind!</b> ChatOpenAI (py-atom langchain_openai.ChatOpenAI)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_03_langchain.metta  <br> 
!(<b>bind!</b> ChatPromptTemplate (py-atom langchain_core.prompts.ChatPromptTemplate)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_03_langchain.metta  <br> 
!(<b>bind!</b> StrOutputParser (py-atom langchain_core.output_parsers.StrOutputParser)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_03_langchain.metta  <br> 
!(<b>bind!</b> model (ChatOpenAI (Kwargs (temperature 0) (model "gpt-3.5-turbo")))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_03_langchain.metta  <br> 
!(<b>bind!</b> prompt ( (py-dot ChatPromptTemplate from_template) "tell me a joke about cat")) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_03_langchain.metta  <br> 
!(<b>bind!</b> chain1 (py-chain  (prompt model (StrOutputParser)) )) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_03_langchain.metta  <br> 
!(<b>bind!</b> prompt2 ( (py-dot ChatPromptTemplate from_messages ) (py-tuple (("system" "You are very funny") ("user" "tell me joke about {foo}"))))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_03_langchain.metta  <br> 
!(<b>bind!</b> chain2 (py-chain (prompt2 model (StrOutputParser)) )) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_04_numpy_simple_import.metta  <br> 
!(<b>bind!</b> linalg (py-atom numpy.linalg))
!(bind! numpy (py-atom numpy))

!(bind! m1 ((py-dot numpy random.rand) 3 3 ))
!(bind! m1_inv ( (py-dot linalg inv) m1))
!( (py-dot numpy matmul) m1 m1_inv)
 bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_01.metta  <br> 
!(<b>bind!</b> simple_fun (py-atom example_01.simple_fun))
!(bind! SimpleObject (py-atom example_01.SimpleObject))

!(bind! so (SimpleObject))


; it is important that obj will have type SimpleObject when passed to simple_fun!
!(simple_fun 1 2 "3" (Kwargs (kwarg1 2) (obj so)) )

!( (py-dot so method) "arg1" "arg2" (Kwargs (arg3 3)) )
 bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/simple_import/example_02_numpy.metta  <br> 
!(<b>bind!</b> np (py-atom numpy))

!(bind! a1 ( (py-dot np array) (py-atom (py-tuple (1 2 3)) )))
!(bind! a2 ( (py-dot a1 __mul__) 3))
!(bind! a3 ( (py-dot a1 __add__) a2))


!(a1)
!(a2)
!(a3)

!(bind! m1 ((py-dot np array) (py-atom (py-list ((1 2 3) (py-list (4 4 5)) (py-tuple (6 7 8))) ))))
!(bind! linalg (py-atom numpy.linalg))
!(bind! m1_inv ( (py-dot linalg inv) m1))

!( (py-dot np matmul) m1 m1_inv)
 bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/03_example_dict.metta  <br> 
!(import! &self bhv_binding)

!(<b>bind!</b> &v1 (bhv-new))
!(bind! &v2 (bhv-new))
!(bind! &v3 (bhv-new))
!(bind! &k1 (bhv-new))
!(bind! &k2 (bhv-new))
!(bind! &k3 (bhv-new))


!(bind! dict (bhv-majority (bhv-bind &v1 &k1) (bhv-bind &v2 &k2) (bhv-bind &v3 &k3) ))
!(bind! v1_retrived (bhv-bind &k1 dict))

!(bhv-std-apart-relative v1_retrived &v1)
!(bhv-is-related v1_retrived &v1)


 bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/01_example_majority.metta  <br> 
!(import! &self bhv_binding)

!(<b>bind!</b> &a (bhv-new))
!(bind! &b (bhv-new))
!(bind! &c (bhv-new))

!(bind! &abc (bhv-majority &a &b &c ))

!(bhv-std-apart-relative &a &abc)
!(bhv-is-related &a &abc)


 bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/02_example_perm.metta  <br> 
!(import! &self bhv_binding)

!(<b>bind!</b> &a (bhv-new))
!(bind! &b (bhv-new))

!(bind! &perm1 (bhv-new-perm))
(= (perm1 $x) (bhv-apply-perm &perm1 $x))

!(bind! ab (bhv-majority &a &b ))

; Should return False since a is permuted but ab is not permuted
!(bhv-is-related (perm1 &a) ab)

;Should return True
!(bhv-is-related (perm1 &a) (perm1 ab))






 bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> &name (bhv-new)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> &capital_city (bhv-new)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> &money (bhv-new)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> &united_states (bhv-new)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> &washington_dc (bhv-new)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> &dollar (bhv-new)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> &mexico (bhv-new)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> &mexico_city (bhv-new)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> &peso (bhv-new)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> USA (bhv-majority (bhv-bind &name &united_states) (bhv-bind &capital_city &washington_dc) (bhv-bind &money &dollar) )) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> MEX (bhv-majority (bhv-bind &name &mexico) (bhv-bind &capital_city &mexico_city) (bhv-bind &money &peso) )) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> Pair (bhv-bind USA MEX)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>bind!</b> dollar_of_mexico (bhv-bind &dollar Pair)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/jetta/test_lambda.metta  <br> 
!(<b>bind!</b> &jspace (new-jetta-space)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/jetta/test_basic_jetta.metta  <br> 
!(<b>bind!</b> &jspace (new-jetta-space)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/jetta/test_expr_compile.metta  <br> 
!(<b>bind!</b> &jspace (new-jetta-space)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/sql_space/sql_space_test.metta  <br> 
!(<b>bind!</b> &sql_space (new-sql-space musicbrainz_db localhost musicbrainz musicbrainz 5432)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &th (torch:tensor (3. 2. 3.))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &x (torch:tensor (3 2 3))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &m (torch:tensor ((6 1) (7 2) (8 3)))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &a (torch:tensor ((1 1 1) (0 0 0)))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &b (torch:tensor ((-1 -1 -1) (1 1 1)))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &q (torch:rand (3 4))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &w (torch:rand (4 5))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &p (torch:rand (4 4))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &k (torch:tensor ((0. 1.) (1. 0.) (2. 0.) (2. 2.)))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &c (torch:tensor (1 2 3))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &tm (torch:matmul (&q &w))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &mtm (torch:mean (&tm))) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &foo_model (torch:instantiate_module FooModel tm_test)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &kwargs_arange (kwargs ((start 0) (end 100) (dtype torch.float) (requires_grad True))) ) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &kwargs_foo (kwargs ((param1 1) (param2 None) (param3 foo))) ) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &to_tensor_transform (torch:instantiate_module ToTensor torchvision.transforms)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &train_data (torch:instantiate_module FashionMNIST torchvision.datasets data True &to_tensor_transform None True)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &test_data (torch:instantiate_module FashionMNIST torchvision.datasets data False &to_tensor_transform None True)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &train_dataloader (torch:instantiate_module DataLoader torch.utils.data &train_data 64)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &test_dataloader (torch:instantiate_module DataLoader torch.utils.data &test_data 64)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &model (torch:instantiate_module NeuralNetwork tm_test)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &model_params (torch:get_model_params &model)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &optimizer (torch:instantiate_module SGD torch.optim &model_params 0.001)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &loss_fn (torch:instantiate_module CrossEntropyLoss torch.nn)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>bind!</b> &trainer (torch:instantiate_module Trainer tm_test &train_dataloader &model &loss_fn &optimizer)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
!(<b>bind!</b> &state-active (new-state active)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e1_kb_write.metta  <br> 
!(<b>bind!</b> &kb (new-space)) bind!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
!(<b>bind!</b> &state-token (new-state (A B))) bind!   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> capture</i></b>  <a onclick="prompt('copy path','capture');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>capture</b>"), move |_| { capture_op.clone() }); capture   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> car-atom</i></b>  <a onclick="prompt('copy path','car-atom');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>car-atom</b>"), move |_| { car_atom_op.clone() }); car-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,_Dpth,_Slf,['<b>car-atom</b>',Atom],CAR_Y):- !, Atom=[CAR|_],!,do_expander(Eq,RetType,CAR,CAR_Y). car-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_interp.pl  <br> 
'<b>car-atom</b>'(List, Head):- eval_H(['car-atom', List], Head). car-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>car-atom</b>', [list_operations, qhelp("Retrieves the head of a list."), head_retrieval]). car-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
    (let $head (<b>car-atom</b> $list) car-atom   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> case</i></b>  <a onclick="prompt('copy path','case');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>case</b>"), move |_| { case_op.clone() }); case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,_RetType,Depth,Self,['<b>case</b>',A,[[Void,_]]],Res):- case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>case</b>',A,[]],NoResult):- !, case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>case</b>',A,CL|T],Res):- !, case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>case</b>', [flow_control, qhelp("Case selection."), conditional_execution]). case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/01_lang_inc.metta  <br> 

; a functional example
(= (maybe-inc $x)
    (<b>case</b> $x
     (((Just $v) (Just (+ 1 $v)))
	(Nothing Nothing))))

!(assertEqual (maybe-inc Nothing) Nothing)
!(assertEqual (maybe-inc (Just 2)) (Just 3))



 case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
(<b>case</b> (+ 1 5) case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
 (<b>case</b> (+ 1 5) case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
    (<b>case</b> 5 case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
 (<b>case</b> (+ 1 (superpose (1 2 3))) case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
  (<b>case</b> (+ 1 (superpose (1 2 3))) case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
  (<b>case</b> case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
  (<b>case</b> case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta  <br> 
  (<b>case</b> case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/numpy/nm_test.metta  <br> 
! (<b>case</b> (np.array (((1 1) (2 2) (3 3)) ((2 3) (3 4) (4 5)))) case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/numpy/nm_test.metta  <br> 
! (<b>case</b> (np.vector 1 2 3) case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/jetta/test_basic_jetta.metta  <br> 
  (<b>case</b> (jetta "WRON SPACE" "(foo 11 4)") case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/jetta/test_basic_jetta.metta  <br> 
       (<b>case</b> (jetta &jspace "(foof 11 4)") case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/jetta/test_expr_compile.metta  <br> 
       (<b>case</b> (compile &jspace (ffff a b)) case   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
  (<b>case</b> (< $x $head) case   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> catalog-clear!</i></b>  <a onclick="prompt('copy path','catalog-clear!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/builtin_mods/catalog_mods.rs  <br> 
        tref.register_token(regex(r"<b>catalog-clear!</b>"), move |_| { catalog_clear_op.clone() }); catalog-clear!   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> catalog-list!</i></b>  <a onclick="prompt('copy path','catalog-list!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/builtin_mods/catalog_mods.rs  <br> 
        tref.register_token(regex(r"<b>catalog-list!</b>"), move |_| { catalog_list_op.clone() }); catalog-list!   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> catalog-update!</i></b>  <a onclick="prompt('copy path','catalog-update!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/builtin_mods/catalog_mods.rs  <br> 
        tref.register_token(regex(r"<b>catalog-update!</b>"), move |_| { catalog_update_op.clone() }); catalog-update!   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> cdr-atom</i></b>  <a onclick="prompt('copy path','cdr-atom');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>cdr-atom</b>"), move |_| { cdr_atom_op.clone() }); cdr-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,_Dpth,_Slf,['<b>cdr-atom</b>',Atom],CDR_Y):- !, Atom=[_|CDR],!,do_expander(Eq,RetType,CDR,CDR_Y). cdr-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_interp.pl  <br> 
'<b>cdr-atom</b>'(List, Tail):- eval_H(['cdr-atom', List], Tail). cdr-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>cdr-atom</b>', [list_operations, qhelp("Retrieves the tail of a list."), tail_retrieval]). cdr-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
    (<b>cdr-atom</b> $x)) cdr-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
        (let $tail (<b>cdr-atom</b> $list) (contains $tail $condition)) )))) cdr-atom   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> change-state!</i></b>  <a onclick="prompt('copy path','change-state!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>change-state!</b>"), move |_| { change_state_op.clone() }); change-state!   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>change-state!</b>',StateExpr, UpdatedValue], Ret):- !, change-state!   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>change-state!</b>', [state_management, qhelp("Changes the state of a system component."), system_integration]). change-state!   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
!(nop (<b>change-state!</b> (status (Goal lunch-order)) active)) change-state!   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
!(nop (<b>change-state!</b> &state-active inactive)) change-state!   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
  (<b>change-state!</b> &state-token 1) change-state!   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
!(nop (<b>change-state!</b> &state-token (C D))) change-state!   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
     (<b>change-state!</b> $x (+ (get-state $x) 1))) change-state!   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> collapse</i></b>  <a onclick="prompt('copy path','collapse');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>collapse</b>"), move |_| { collapse_op.clone() }); collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>collapse</b>',List],Res):-!, collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_interp.pl  <br> 
'<b>collapse</b>'(List, CollapsedList):- eval_H(['collapse', List], CollapsedList). collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>collapse</b>', [data_structures, qhelp("Collapses a structure."), manipulation]). collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta  <br> 
!(<b>collapse</b> (superpose ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3)) collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
!(assertEqualToResult (<b>collapse</b> (superpose ())) (())) collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
!(assertEqualToResult (<b>collapse</b> (superpose ((nop 1)))) (())) collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
    (<b>collapse</b> (unique (superpose $list)))) collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d5_auto_types.metta  <br> 
   (<b>collapse</b> (+ 5 "S")) collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b4_nondeterm.metta  <br> 
  (<b>collapse</b> collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b4_nondeterm.metta  <br> 
  (let $x (<b>collapse</b> (color)) (superpose $x))) collapse   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b4_nondeterm.metta  <br> 
  (<b>collapse</b> (shape)) collapse   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> cons-atom</i></b>  <a onclick="prompt('copy path','cons-atom');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>cons-atom</b>"), move |_| { cons_atom_op.clone() }); cons-atom   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> flip</i></b>  <a onclick="prompt('copy path','flip');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>flip</b>"), move |_| { flip_op.clone() }); flip   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_interp.pl  <br> 
'<b>flip</b>'(Bool) :- eval_H(['flip'], Bool). % see `flip` in metta_eval.pl as `eval_20/6` flip   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>flip</b>', [random, qhelp("Return a random boolean."), random_boolean]). flip   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/test_gnd_conv.metta  <br> 
; should work as passing Rust Bool to Rust function
!(xor (<b>flip</b>) (flip))

; should work via automatic Rust->Python conversion
!(and (flip) (flip))

; should work as well
!(and (flip) True)

; Works as well after https://github.com/trueagi-io/hyperon-experimental/pull/597
!(xor True (flip))
 flip   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> format-args</i></b>  <a onclick="prompt('copy path','format-args');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>format-args</b>"), move |_| { format_args_op.clone() }); format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>format-args</b>',Format,Args],Result):- format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>format-args</b>',_Fmt,Args],_Result) :- format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_interp.pl  <br> 
'<b>format-args</b>'(Format, Args, Result) :- eval_H(['format-args', Format, Args], Result). format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>format-args</b>', [string_operations, qhelp("Generate a formatted string using a format specifier."), format_args]). format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta  <br> 
!(assertEqual (<b>format-args</b> "" (1 2 3)) "") format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta  <br> 
!(assertEqual (<b>format-args</b> " " (1 2 3)) " ") format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta  <br> 
!(assertEqual (<b>format-args</b> "{}" (1 2 3)) "1") format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta  <br> 
!(assertEqual (<b>format-args</b> "{}}" (1 2 3)) "{}") format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta  <br> 
!(assertEqual (<b>format-args</b> "xyz zy" (1 2 3)) "xyz zy") format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta  <br> 
!(assertEqual (<b>format-args</b> "Indexed {1} {} {0} {}" (1 2 3)) "Indexed 2 1 1 2") format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta  <br> 
!(assertEqual (<b>format-args</b> "Different types {} {} {} {} {} {}" (1 "2" 'c' -0.5 atom (1 2 c -0.5 atom))) "Different types 1 2 c -0.5 atom (1 2 c -0.5 atom)") format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta  <br> 
!(assertEqual (<b>format-args</b> "Two digit index={11}" (0 1 2 3 4 5 6 7 8 9 10 "eleven")) "Two digit index=eleven") format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta  <br> 
!(assertEqual (<b>format-args</b> "Bad args list {1} {} {0} {}" x) (format-args "Bad args list {1} {} {0} {}" x)) format-args   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta  <br> 
!(assertEqual (<b>format-args</b> "Malformed format}{{}{{{}{} {4} { } {-1} {x} {{{{{{}}}}}}{{{{{}}}}}" ("success1" "success2")) "Malformed format}{}{success1success2 {4} { } {-1} {x} {{{}}}{{{}}}") format-args   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> get-atoms</i></b>  <a onclick="prompt('copy path','get-atoms');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>get-atoms</b>"), move |_| { get_atoms_op.clone() }); get-atoms   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>get-atoms</b>', [data_retrieval, qhelp("Retrieves atoms from a structure.")]). get-atoms   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
!(<b>get-atoms</b> &self) get-atoms   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/sql_space/sql_space_test.metta  <br> 
!(<b>get-atoms</b> &self) get-atoms   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
; Even at the very beginning of the script `(<b>get-atoms</b> &self)` get-atoms   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
  ((let $x (<b>get-atoms</b> &self) (get-type $x))) get-atoms   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
  (let $x (collapse (<b>get-atoms</b> &m)) (contains $x is-space)) get-atoms   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
; !(let $x (collapse (<b>get-atoms</b> &m)) (car-atom $x)) get-atoms   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
;  (let $a (collapse (<b>get-atoms</b> &self)) (contains $a is-m)) get-atoms   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
  (let $a (collapse (<b>get-atoms</b> &self)) (contains $a is-corelib)) get-atoms   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> get-metatype</i></b>  <a onclick="prompt('copy path','get-metatype');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>get-metatype</b>"), move |_| { get_meta_type_op.clone() }); get-metatype   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(_Eq,_RetType,_Depth,_Self,['<b>get-metatype</b>',Val],TypeO):- !, get-metatype   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
  (chain (eval (<b>get-metatype</b> $atom)) $type get-metatype   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
  (chain (eval (<b>get-metatype</b> $type)) $meta get-metatype   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
  (chain (eval (<b>get-metatype</b> $atom)) $meta get-metatype   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> get-state</i></b>  <a onclick="prompt('copy path','get-state');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>get-state</b>"), move |_| { get_state_op.clone() }); get-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>get-state</b>',StateExpr],Value):- !, get-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>get-state</b>', [state_management, qhelp("Gets the state of a component or system."), data_retrieval]). get-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
  (<b>get-state</b> (status (Goal lunch-order))) get-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
  (<b>get-state</b> (status (Goal lunch-order))) get-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
  (if (== (<b>get-state</b> (status (Goal $goal))) get-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
   (<b>get-state</b> (get-token)) get-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
   (<b>get-state</b> (get-token)) get-state   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> get-type</i></b>  <a onclick="prompt('copy path','get-type');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>get-type</b>"), move |_| { get_type_op.clone() }); get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>get-type</b>',Val,Self],Type):- current_self(Self), !, get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>get-type</b>',Val,Other],Type):- !, get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(_Eq,_RetType,Depth,Self,['<b>get-type</b>',Val],Type):- is_list(Val), !, get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>get-type</b>',Val],TypeO):- !, get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_interp.pl  <br> 
'<b>get-type</b>'(Value, Type):- eval_H(['get-type', Value], Type). get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #A7E3A7">  ../../../hyperon-experimental/python/tests/test_examples.py  <br> 
        self.assertEqualMettaRunnerResults(metta.run('!(<b>get-type</b> "A")'), [[S('String')]]) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta  <br> 
!(<b>get-type</b> insert) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
  (chain (eval (<b>get-type</b> $atom $space)) $actual-type get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
    (chain (eval (<b>get-type</b> $op $space)) $op-type get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d4_type_prop.metta  <br> 
  (<b>get-type</b> (Mortal Plato)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d4_type_prop.metta  <br> 
  (<b>get-type</b> (HumansAreMortal SocratesIsHuman)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d4_type_prop.metta  <br> 
  (<b>get-type</b> (HumansAreMortal (Human Socrates))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d4_type_prop.metta  <br> 
  (<b>get-type</b> (= SocratesIsMortal (HumansAreMortal SocratesIsHuman))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d4_type_prop.metta  <br> 
  (<b>get-type</b> (= (Mortal Socrates) (Mortal Plato))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d4_type_prop.metta  <br> 
  (<b>get-type</b> (= SocratesIsMortal (HumansAreMortal PlatoIsHuman))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d4_type_prop.metta  <br> 
  (<b>get-type</b> (= SocratesIsHuman PlatoIsHuman)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d4_type_prop.metta  <br> 
  (<b>get-type</b> (= SocratesIsHuman SocratesIsMortal)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
  (superpose (((<b>get-type</b> &self)) ((get-type &self))))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
   (let* (($type (<b>get-type</b> $atom)) ($space (get-type &self))) (== $type $space))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d3_deptypes.metta  <br> 
  (<b>get-type</b> (Cons 0 (Cons 1 Nil))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d3_deptypes.metta  <br> 
  (<b>get-type</b> (drop (Cons 1 Nil))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d3_deptypes.metta  <br> 
  (<b>get-type</b> (drop Nil)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d3_deptypes.metta  <br> 
  (<b>get-type</b> (ConsN "1" (ConsN "2" NilN))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d3_deptypes.metta  <br> 
  (<b>get-type</b> (dropN (ConsN "1" NilN))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d3_deptypes.metta  <br> 
  ((<b>get-type</b> (dropN (dropN (ConsN "1" NilN))))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
  (<b>get-type</b> &state-token) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
  (<b>get-type</b> (curry +)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
  (<b>get-type</b> ((curry +) 2)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
  (<b>get-type</b> (curry-a + 2)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
  (<b>get-type</b> ((curry-a + 2) 3)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
  (<b>get-type</b> ((curry-a + 2) "S")) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
;   (<b>get-type</b> (lambda ($x $y) (+ $x $y))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
  (<b>get-type</b> (fmap (curry-a + 1) (Left 5))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
  (<b>get-type</b> (fmap (curry-a + 2) (Left "5"))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
;  (<b>get-type</b> (fmap (curry-a + 2) (UntypedC "5"))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d2_higherfunc.metta  <br> 
;  (<b>get-type</b> (fmap (curry-a + 2) (UntypedC (Null) 5))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> 5) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> (+ 5 7)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> +) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> (+ 5 "4")) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> (+ -)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> Either) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> (Left 5)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> (isLeft (Right 5))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> (isLeft 5)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> (LeftP 5)) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> (pair (LeftP 5) "String")) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> (Cons 5 (Cons 6 Nil))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (<b>get-type</b> (Cons 5 (Cons "6" Nil))) get-type   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d1_gadt.metta  <br> 
  (let (List $t) (<b>get-type</b> (Cons 5 (Cons 6 Nil))) get-type   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> get-type-space</i></b>  <a onclick="prompt('copy path','get-type-space');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>get-type-space</b>"), move |_| { get_type_space_op.clone() }); get-type-space   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> git-module!</i></b>  <a onclick="prompt('copy path','git-module!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>git-module!</b>"), move |_| { git_module_op.clone() }); git-module!   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> if-equal</i></b>  <a onclick="prompt('copy path','if-equal');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs  <br> 
    tref.register_token(regex(r"<b>if-equal</b>"), move |_| { is_equivalent.clone() }); if-equal   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>if-equal</b>',X,Y,Then,Else],Res):- !, if-equal   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
    (eval (<b>if-equal</b> $type Expression if-equal   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
      (eval (<b>if-equal</b> $atom () $else $then)) if-equal   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
  (eval (<b>if-equal</b> $atom Empty $then $else))) if-equal   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
    (eval (<b>if-equal</b> $head Error $then $else)) if-equal   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
          (eval (<b>if-equal</b> $reduced-head $head if-equal   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> import!</i></b>  <a onclick="prompt('copy path','import!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>import!</b>"), move |_| { import_op.clone() }); import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>import!</b>',Other,File],RetVal):- !, import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_interp.pl  <br> 
'<b>import!</b>'(Environment, Filename, Namespace):- eval_H(['import!', Environment, Filename], Namespace). import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>import!</b>', [module_import, qhelp("Imports an external module or file.")]). import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
!(<b>import!</b> &self das_gate) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
!(<b>import!</b> &self das_gate) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/resolve/r.metta  <br> 
!(<b>import!</b> &self resolve) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/resolve/r.metta  <br> 
!(<b>import!</b> &self r) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/numpy/nm_test.metta  <br> 
!(<b>import!</b> &self numme) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
!(<b>import!</b> &self neurospace) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/test_snet.metta  <br> 
; !(<b>import!</b> &self snet_io) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/test_snet.metta  <br> 
;!(<b>import!</b> &self snet:naint:image-generation) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/test_snet.metta  <br> 
!(<b>import!</b> &self snet:naint:code-generation) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/test_snet.metta  <br> 
;!(<b>import!</b> &self snet:naint:generative-lms) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/test_snet.metta  <br> 
;!(<b>import!</b> &self snet:naint:abstractive-summarisation) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/test_snet.metta  <br> 
(<b>import!</b> &self snet:naint:text-generation) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/bhv_binding/04_example_dollar_of_mexico.metta  <br> 
!(<b>import!</b> &self bhv_binding) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/jetta/test_lambda.metta  <br> 
!(<b>import!</b> &self compile) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/jetta/test_basic_jetta.metta  <br> 
!(<b>import!</b> &self compile) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/jetta/test_expr_compile.metta  <br> 
!(<b>import!</b> &self compile) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/sql_space/sql_space_test.metta  <br> 
!(<b>import!</b> &self sql_space) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/pytorch/tm_test.metta  <br> 
!(<b>import!</b> &self torchme) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/ext_sub/module.metta  <br> 
!(<b>import!</b> &self self:ext_nested)
 import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_moduleA.metta  <br> 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Example file used by f1_imports.metta
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
!(<b>import!</b> &self f1_moduleC)

; FIXME? stdlib space is not available at importing time -
; only tokens / grounded operations work, while symbolic functions
; (like `if`) don't work.
; FIXME? Exceptions are not caught by `importOp`
!(assertEqual (+ 1 2) 3)
; !(assertEqual (if True "S" "F") "S")

(= (dup $x) (if (== $x 0) (+ $x 10) (g $x)))

(: f (-> Number Number))
(= (f $x) (if (< $x 0) (- 0 $x) (g (+ 1 $x))))
 import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/c2_spaces.metta  <br> 
!(<b>import!</b> &kb c2_spaces_kb) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/c2_spaces.metta  <br> 
!(<b>import!</b> &self c2_spaces_kb) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_moduleB.metta  <br> 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Example file used by f1_imports.metta
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
!(<b>import!</b> &self f1_moduleC)

(= (dup $x) (if (== $x 0) (g $x) (+ $x 10)))
 import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
!(<b>import!</b> &m f1_moduleA) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
!(<b>import!</b> &self f1_moduleA) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
!(<b>import!</b> &corelib top:corelib) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
!(<b>import!</b> &self f1_moduleB) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
!(<b>import!</b> &self f1_moduleB) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/snet/naint/image-generation.metta  <br> 
!(<b>import!</b> &self snet_io)

!(add-reduct &self
  (= (image-generation)
     (snet-service "naint" "image-generation"
       ; Put your data here or use environment variables
       ;(Kwargs
       ;  (private_key SNET_PRIVATE_KEY)
       ;  (eth_rpc_endpoint ETH_RPC_ENDPOINT)
       ;  (email SNET_EMAIL)
       ;  (free_call_auth_token_bin FREE_CALL_AUTH_TOKEN_BIN)
       ;)
     )))
 import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/snet/naint/generative-lms.metta  <br> 
!(<b>import!</b> &self snet_io)

!(add-reduct &self
  (= (generative-lms)
     (snet-service "naint" "generative-lms"
       ; Put your data here or use environment variables
       ;(Kwargs
       ;  (private_key SNET_PRIVATE_KEY)
       ;  (eth_rpc_endpoint ETH_RPC_ENDPOINT)
       ;  (email SNET_EMAIL)
       ;  (free_call_auth_token_bin FREE_CALL_AUTH_TOKEN_BIN)
       ;)
     )))
 import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/snet/naint/text-generation.metta  <br> 
!(<b>import!</b> &self snet_io) import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/snet/naint/code-generation.metta  <br> 
!(<b>import!</b> &self snet_io)

!(add-reduct &self
  (= (code-generation)
     (snet-service "naint" "code-generation"
       ; Put your data here or use environment variables
       ;(Kwargs
       ;  (private_key SNET_PRIVATE_KEY)
       ;  (eth_rpc_endpoint ETH_RPC_ENDPOINT)
       ;  (email SNET_EMAIL)
       ;  (free_call_auth_token_bin FREE_CALL_AUTH_TOKEN_BIN)
       ;)
     )))

(: generate (-> String String))
(= (generate $request)
   ((code-generation) "generate" "Query"
    (Kwargs (request $request))
   )
)
 import!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/snet/snet/naint/abstractive-summarisation.metta  <br> 
!(<b>import!</b> &self snet_io)

!(add-reduct &self
  (= (abstractive-summarisation)
     (snet-service "naint" "abstractive-summarisation"
       ; Put your data here or use environment variables
       ;(Kwargs
       ;  (private_key SNET_PRIVATE_KEY)
       ;  (eth_rpc_endpoint ETH_RPC_ENDPOINT)
       ;  (email SNET_EMAIL)
       ;  (free_call_auth_token_bin FREE_CALL_AUTH_TOKEN_BIN)
       ;)
     )))
 import!   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> include</i></b>  <a onclick="prompt('copy path','include');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>include</b>"), move |_| { include_op.clone() }); include   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,_Depth,Self,['<b>include</b>',File],RetVal):- !, include   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> intersection</i></b>  <a onclick="prompt('copy path','intersection');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>intersection</b>"), move |_| { intersection_op.clone() }); intersection   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>intersection</b>',Eval1,Eval2],RetVal):- !, intersection   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>intersection</b>', [nondet_sets, qhelp("It gives the intersection duplicates are not removed ."), lazy_intersection]). intersection   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_test.metta  <br> 

; <b>intersection</b>
!(assertEqualToResult (intersection (superpose (a b c)) (superpose (b c d))) (b c ))

 intersection   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> let\*</i></b>  <a onclick="prompt('copy path','let\*');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>let\*</b>"), move |_| { let_var_op.clone() }); let\*   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> match</i></b>  <a onclick="prompt('copy path','match');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>match</b>"), move |_| { match_op.clone() }); match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>match</b>', [pattern_matching, qhelp("Matches patterns within structures or data.")]). match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
      (<b>match</b> $list ($head $tail) $then $else) ) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
  (<b>match</b> $atom $pattern $template (eval (switch $atom $tail)))) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
  (<b>match</b> $atom $var $templ match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
            (<b>match</b> $head -> True False) )) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
        (<b>match</b> $is-func True match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
  (<b>match</b> $args () match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
    (<b>match</b> $arg-types ($ret) () (Error $atom BadType)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta  <br> 
  (<b>match</b> $atom () match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
!(<b>match</b> &self $1 $1) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
!(assertEqual (<b>match</b> &self $1 $1)  (get-atoms &self)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
   (<b>match</b> &self ($rel A $x) ($rel $x)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
   (<b>match</b> &self ($rel A $x) ($rel $x)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta  <br> 
    (<b>match</b> &self ($rel B $x) ($rel $x)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta  <br> 
  (<b>match</b>   &kb match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta  <br> 
   (<b>match</b>  &kb  ($rel A_AS $x) ($rel $x)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta  <br> 
   (<b>match</b>  &kb  ($rel A_AS $x) ($rel $x)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta  <br> 
!(assertEqual (case (<b>match</b>  &kb  ($rel B_AS $x) ($rel $x)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
(= (<b>match</b>_res_len $match_res) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
        (+ 1 (<b>match</b>_res_len (cdr $match_res))))) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
;!(<b>match</b>_res_len(collapse (match &space (Test $x) (This $x works)))) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
!(<b>match</b> &das ($v1 (Test A)) (This $v1 works)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
    (<b>match</b> &das ($v1 (Test A)) (This $v1 works)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
;    (<b>match</b> &das ($v1 (Test A)) (This $v1 works)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
!(<b>match</b> &das (Test $v2) (This $v2 works)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
    (<b>match</b> &das (Test $v2) (This $v2 works)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
!(<b>match</b> &das (, (Best $x) ($v $x)) ($v $x)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
; !(<b>match</b> &das (, ($v1 $x) (Test $x)) ($v1 Test $x)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_das.metta  <br> 
; !(<b>match</b> &das ($v1 ($v2 A)) (This $v1 works)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
;!(<b>match</b> &das ($t MYBPP) ($t MYBPP)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
!(<b>match</b> &das ($t MYBPP) ($t MYBPP)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
;!(<b>match</b> &das (translation_of (protein "O43264") (transcript "ENST00000200135")) OK) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
!(<b>match</b> &das (translation_of (protein O43264) (transcript ENST00000200135)) OK) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
    (<b>match</b> &das (translation_of (protein O43264) (transcript ENST00000200135)) OK) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
;!(<b>match</b> &das (translation_of (protein $x) (transcript ENST00000200135)) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
    (<b>match</b> &das (translation_of (protein $x) (transcript ENST00000200135)) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
;!(<b>match</b> &das (protein MYBPP) res) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
;!(<b>match</b> &das match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/integration/test_bio_das.metta  <br> 
;!(<b>match</b> &das (, (gene_name (gene $ens) IRX3) (genes_pathways (gene $ens) $p)) $p) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/resolve/r.metta  <br> 
!(<b>match</b> &self ($x content) $x) ; [] match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/resolve/r.metta  <br> 
!(<b>match</b> r::&self ($x content) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/resolve/r.metta  <br> 
!(<b>match</b> r::&self ($x r::content) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
; !(<b>match</b> (my-nspace) (What is the user name $x) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
; !(<b>match</b> (my-nspace) (How old $x is William) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
; !(<b>match</b> (my-nspace) (How old ($x) is Mike) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
; !(<b>match</b> (my-nspace) (What $x is father name) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
; !(<b>match</b> (my-nspace) (What $x is Mike age) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
; (<b>match</b> (my-nspace) (What are the names $x of William brothers?) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
! (<b>match</b> (my-nspace) (What are the names $x of William brothers?) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
    (<b>match</b> (my-nspace) $query ($x is $z years old)))) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
; !(<b>match</b> (my-ispace) (I like to play tennis) $topic) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
; !(<b>match</b> (my-ispace) (I am a little bit hungry) $topic) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
; !(<b>match</b> (my-ispace) (What is my name, $x?) $topic) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
   (let $space (space-by-intent (<b>match</b> (my-ispace) $query $topic)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/neurospace/test_nspace.metta  <br> 
        (<b>match</b> ($space) $query $v))) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/sandbox/sql_space/sql_space_test.metta  <br> 
!(<b>match</b> &sql_space (, (musicbrainz.artist (id $id) (name $name)) (musicbrainz.artist (id $id) (begin_date_year 1983)) (limit 3)) $name) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d4_type_prop.metta  <br> 
   (<b>match</b> &self (: $x $type) T)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d4_type_prop.metta  <br> 
   (<b>match</b> &self (: $impl (-> $cause $type)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/c2_spaces.metta  <br> 
  (<b>match</b> &kb match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/c2_spaces.metta  <br> 
  (<b>match</b> &self ($p is-a Color) $p) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/c2_spaces.metta  <br> 
  (<b>match</b> &kb match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/c2_spaces.metta  <br> 
  (<b>match</b> &kb ($prop is-a Color) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/c2_spaces.metta  <br> 
    (<b>match</b> &self ($obj is $prop) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/c2_spaces.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a1_symbols.metta  <br> 
  (<b>match</b> &self (($x leaf2) leaf3) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a1_symbols.metta  <br> 
  (<b>match</b> &self ($who is a $what) ($who the $what)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a1_symbols.metta  <br> 
  (<b>match</b> &self (:= (Green $who) T) ($who is really green)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a1_symbols.metta  <br> 
  (<b>match</b> &self (:= ($color $who) T) ($who is really $color)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a1_symbols.metta  <br> 
  (<b>match</b> &self (:= ($color $who) $tv) (It's $tv that $who is $color)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a1_symbols.metta  <br> 
  (<b>match</b> &self (:= (Green Tom) $tv) $tv) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a1_symbols.metta  <br> 
  (<b>match</b> &self (isa $color color) $color) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a3_twoside.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a3_twoside.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a3_twoside.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a3_twoside.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d5_auto_types.metta  <br> 
(<b>match</b> &self (== SocratesIsHuman SamIsMortal) Really?) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/c3_pln_stv.metta  <br> 
   (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/c3_pln_stv.metta  <br> 
   (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
    (<b>match</b> &self (= (status (Goal $goal)) &state-active) $goal) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/f1_imports.metta  <br> 
  (<b>match</b> &m (= (f 2) $x) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/a2_opencoggy.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b4_nondeterm.metta  <br> 
  (<b>match</b> &self (= (color) $x) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b4_nondeterm.metta  <br> 
    (<b>match</b> &self (= (shape) $x) $x)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b4_nondeterm.metta  <br> 
   (<b>match</b> &self (= (eq $x $y) T) $x)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b2_backchain.metta  <br> 
(= (frog $x) (<b>match</b> &self (Frog $x) T)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b2_backchain.metta  <br> 
   (<b>match</b> &self (Evaluation ($P $x)) T)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b2_backchain.metta  <br> 
   (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b2_backchain.metta  <br> 
   (<b>match</b> &self (Evaluation ($P $x)) ($P $x))) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b2_backchain.metta  <br> 
   (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b5_types_prelim.metta  <br> 
  (<b>match</b> &self (Green $who) $who) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b5_types_prelim.metta  <br> 
  (<b>match</b> &self (Green $who) (Green $who)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b5_types_prelim.metta  <br> 
    (<b>match</b> &self (= (eq $r (S Z)) $tv) $tv)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b5_types_prelim.metta  <br> 
  (<b>match</b> &self (= (eq (Add (S Z) Z) (S Z)) $tv) $tv) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b5_types_prelim.metta  <br> 
        (<b>match</b> &self (= (eq (S (S Z)) $r3) $tv) $tv)) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e1_kb_write.metta  <br> 
  (<b>match</b> &kb (Green $x) $x) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b0_chaining_prelim.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b0_chaining_prelim.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b0_chaining_prelim.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b0_chaining_prelim.metta  <br> 
    (<b>match</b> &self (:= $r $r2) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b0_chaining_prelim.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b0_chaining_prelim.metta  <br> 
  (<b>match</b> &self match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b0_chaining_prelim.metta  <br> 
    (<b>match</b> &self (:= $r $r2) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b3_direct.metta  <br> 
  (<b>match</b> &self (= ($p Fritz) T) $p) match   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/b1_equal_chain.metta  <br> 
; (<b>match</b> &self (= (expr) $r) $r) match   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> mod-space!</i></b>  <a onclick="prompt('copy path','mod-space!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>mod-space!</b>"), move |_| { mod_space_op.clone() }); mod-space!   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> new-space</i></b>  <a onclick="prompt('copy path','new-space');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>new-space</b>"), move |_| { new_space_op.clone() }); new-space   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>new-space</b>', [memory_allocation, qhelp("Allocates new space or memory region.")]). new-space   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> new-state</i></b>  <a onclick="prompt('copy path','new-state');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>new-state</b>"), move |_| { new_state_op.clone() }); new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>new-state</b>',UpdatedValue],StateMonad):- !, new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
    (let $<b>new-state</b> (new-state $status) new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
; We cannot put `(<b>new-state</b> active)` inside `match`, because it doesn't new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e3_match_states.metta  <br> 
; `(let $state-active (<b>new-state</b> active)) ...) here. new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
   (<b>new-state</b> (A B))) new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
  (get-type (<b>new-state</b> 2)) new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
  (get-type (change-state! (<b>new-state</b> "S") "V")) new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
  (let $v (<b>new-state</b> 1) (get-type $v)) new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
  (change-state! (<b>new-state</b> 1) "S") new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
  (let $x (<b>new-state</b> 1) new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
  (<b>new-state</b> 2)) new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
   (let $tnso (<b>new-state</b> 1) $tnso) new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
   (<b>new-state</b> 1)) new-state   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/e2_states.metta  <br> 
; !(get-state (let $x (<b>new-state</b> 1) $x)) new-state   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> pragma!</i></b>  <a onclick="prompt('copy path','pragma!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>pragma!</b>"), move |_| { pragma_op.clone() }); pragma!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>pragma!</b>',Other,Expr],RetVal):- !, pragma!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_interp.pl  <br> 
'<b>pragma!</b>'(Environment, Expression, EvalValue):- eval_H(['pragma!', Environment, Expression], EvalValue). pragma!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>pragma!</b>', [compiler_directive, qhelp("Compiler directive for optimizations/settings."), optimization]). pragma!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../../hyperon-experimental/python/tests/scripts/d5_auto_types.metta  <br> 
!(<b>pragma!</b> type-check auto) pragma!   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> print-alternatives!</i></b>  <a onclick="prompt('copy path','print-alternatives!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib_minimal.rs  <br> 
    tref.register_token(regex(r"<b>print-alternatives!</b>"), move |_| { print_alternatives_op.clone() }); print-alternatives!   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> print-mods!</i></b>  <a onclick="prompt('copy path','print-mods!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>print-mods!</b>"), move |_| { print_mods_op.clone() }); print-mods!   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> println!</i></b>  <a onclick="prompt('copy path','println!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>println!</b>"), move |_| { println_op.clone() }); println!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>println!</b>', [output, qhelp("Prints text with newline to output."), text_printing]). println!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta  <br> 

;; makes this file be treated as if the command line --compile=full  was supplied
!(pragma! compile full)

(= (fib $n)
    (if (== $n 0)
        0
        (if (== $n 1)
            1
            (+ (fib (- $n 1)) (fib (- $n 2))))))

(= (fib1 $a $b $n $i)
   (if (< $n 3)
        (fib $n)
        (if (== $i (- $n 2))
             (+ $a $b)
            (fib1 $b (+ $a $b) $n (+ $i 1)))))


!(<b>println!</b> (fib 12))

!(println! (fib1 0 1 100 0))

!(println! (fib1 0 1 80 0))

!(println! (fib 80))



 println!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta  <br> 
!(assertEqual (xor (mprogn (<b>println!</b> "First") True) (mprogn (println! "Second") False)) True) println!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta  <br> 
!(assertEqual (xor (mprogn (<b>println!</b> "First") True) (mprogn (println! "Second") True)) False) println!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta  <br> 
!(assertEqual (xor (mprogn (<b>println!</b> "First") False) (mprogn (println! "Second") True)) True) println!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta  <br> 
!(assertEqual (xor (mprogn (<b>println!</b> "First") False) (mprogn (println! "Second") False)) False) println!   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> register-module!</i></b>  <a onclick="prompt('copy path','register-module!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>register-module!</b>"), move |_| { register_module_op.clone() }); register-module!   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>register-module!</b>',Dir],RetVal):- !, register-module!   <br> 
 <br> &nbsp <br>
 </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>register-module!</b>',Name,Dir],RetVal):- !, register-module!   <br> 
 <br> &nbsp <br>
 </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> remove-atom</i></b>  <a onclick="prompt('copy path','remove-atom');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>remove-atom</b>"), move |_| { remove_atom_op.clone() }); remove-atom   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>remove-atom</b>', [manipulation, qhelp("Removes an atom from a structure.")]). remove-atom   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> sealed</i></b>  <a onclick="prompt('copy path','sealed');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>sealed</b>"), move |_| { sealed_op.clone() }); sealed   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> subtraction</i></b>  <a onclick="prompt('copy path','subtraction');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>subtraction</b>"), move |_| { subtraction_op.clone() }); subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>subtraction</b>',Eval1,Eval2],RetVal):- !, subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>subtraction</b>', [nondet_sets, qhelp("It subtracts elements generated by Call2 from those generated by Call1."), lazy_subtraction]). subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test2.metta  <br> 


; <b>subtraction</b>
; !(subtraction (superpose (a b c)) (superpose (b c d)))
!(assertEqualToResult (subtraction (superpose (a b c)) (superpose (b c d))) ( a ))



 subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta  <br> 
  (<b>subtraction</b> (superpose (a b c d)) (superpose (b c))) subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta  <br> 
  (<b>subtraction</b> (subtraction (superpose (a b c d)) (superpose (b c))) (superpose (d))) subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta  <br> 
  (<b>subtraction</b> (superpose ((foo bar) (bar baz) qux)) (superpose ((bar baz) qux))) subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta  <br> 
  (<b>subtraction</b> (superpose (1 2 3 foo bar)) (superpose (2 foo))) subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta  <br> 
  (<b>subtraction</b> (superpose (a b b c d)) (superpose (b c))) subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta  <br> 
  (<b>subtraction</b> (superpose ($x $y)) (superpose (b))) subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta  <br> 
  (<b>subtraction</b> (superpose (a b c)) (superpose ())) subtraction   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta  <br> 
  (<b>subtraction</b> (superpose ((foo $x) (bar $y))) (superpose ((bar $y) (foo qux)))) subtraction   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> trace!</i></b>  <a onclick="prompt('copy path','trace!');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>trace!</b>"), move |_| { trace_op.clone() }); trace!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>trace!</b>',A,B],C):- !, % writeln(trace(A)), trace!   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>trace!</b>', [debugging, qhelp("Prints some debug information."), information_printing]). trace!   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> union</i></b>  <a onclick="prompt('copy path','union');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>union</b>"), move |_| { union_op.clone() }); union   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>union</b>',Eval1,Eval2],RetVal):- !, union   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>union</b>', [nondet_sets, qhelp("It gives the union of 2 list ."), lazy_union ]). union   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/union_test.metta  <br> 


; <b>union</b>
; !(union (superpose (a b c)) (superpose (b c d)))
!(assertEqualToResult (union (superpose (a b c)) (superpose (b c d))) ( a b c d ))


 union   <br> 
  &nbsp  &nbsp  </div>
  </div>

<br> &nbsp <br> 

<br> &nbsp <br> 



*** <i><b> unique</i></b>  <a onclick="prompt('copy path','unique');" style="cursor: pointer"> Fullpath  </a> 

<br> <a onclick="open_div('')"  style="cursor:pointer">  Open </a>

 <a onclick="close_div('')" style="cursor:pointer">  Close </a>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <div style="color: #D89800">  ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs  <br> 
        tref.register_token(regex(r"<b>unique</b>"), move |_| { unique_op.clone() }); unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_eval.pl  <br> 
eval_20(Eq,RetType,Depth,Self,['<b>unique</b>',Eval],RetVal):- !, unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #D3D4FF">  ../canary/metta_ontology.pfc.pl  <br> 
properties('&corelib','<b>unique</b>', [nondet_sets, qhelp("Makes nondet results unique."), no_repeats_var]). unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose (a b b c c c d))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose (a b c d))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose (a))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose ())) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose (a a a a))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose ((1 2) (1 2) (3 4)))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose (1 "hello" 1 "world" "hello" 3.14 3.14))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose ($x $y $x $z))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose ((:: $x $y) (:: $x $z) (:: $x $y) (:: $a $b)))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose ((:: $x $y) (:: $x $y) (:: $x $z) (:: $x $y)))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose ((:: 1 $x) (:: $x "hello") (:: 1 $x) (:: $y $z) (:: $x "hello")))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta  <br> 
  (<b>unique</b> (superpose ((:: $x (:: a b)) (:: $x (:: a b)) (:: (:: 1 $x) (:: 2 $y)) (:: (:: 1 $x) (:: 2 $y))))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta  <br> 
  (<b>unique</b> (subtraction (superpose (a b b c)) (superpose (b c c d)))) unique   <br> 
  &nbsp  &nbsp  </div> <div style="color: #ECED99">  ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta  <br> 
  (subtraction (<b>unique</b> (superpose (a b b c))) (unique (superpose (b c c d)))) unique   <br> 
  &nbsp  &nbsp  </div>
  </div>
 Tags not found - uncovered <br>
<b>  git-module!</b> <br> 
<b>  cons-atom</b> <br> 
<b>  let\*</b> <br> 
<b>  mod-space!</b> <br> 
<b>  print-mods!</b> <br> 
<b>  sealed</b> <br> 
<b>  capture</b> <br> 
<b>  get-type-space</b> <br> 
<b>  &self</b> <br> 
<b>  [\-\+]?\d+</b> <br> 
<b>  [\-\+]?\d+\.\d+</b> <br> 
<b>  [\-\+]?\d+(\.\d+)?[eE][\-\+]?\d+</b> <br> 
<b>  True|False</b> <br> 
<b>  print-alternatives!</b> <br> 
<b>  catalog-list!</b> <br> 
<b>  catalog-update!</b> <br> 
<b>  catalog-clear!</b> <br> 
