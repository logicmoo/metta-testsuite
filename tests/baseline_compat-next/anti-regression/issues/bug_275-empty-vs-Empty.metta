;; Confirm that (empty) evaluates to () and causes let binding to fail, so result is ()
!(assertEqualToResult (let $a (empty) 1) ())

;; Confirm that a regular let binding with a non-empty value succeeds and returns body
!(assertEqualToResult (let $a something 1) (1))

;; Nesting: (empty) causes outer let to fail; inner let is never reached
!(assertEqualToResult (let $a (empty) (let $b something 2)) ())

;; Evaluate lowercase (empty) directly â€” should return ()
!(assertEqualToResult (empty) ())

;; Confirm let works normally when given a valid binding (42) â€” returns body (99)
!(assertEqualToResult (let $x 42 99) (99))

;; Confirm Empty is equal to itself â€” returns True
!(assertEqualToResult (== Empty Empty) (True))

;; Confirm Empty is not equal to a variable â€” returns False
!(assertEqualToResult (== Empty $a) (False))

;; Print Empty â€” prints nothing, so result is ()
!(assertEqualToResult (println! Empty) (()))

;; (empty) evaluates to (), so (+ () 1) is invalid â€” returns ()
!(assertEqualToResult (+ (empty) 1) ())

;; Attempt to call Empty as a function â€” should return (), does nothing
!(assertEqualToResult ((Empty)) ())

;; Evaluate (Empty) on its own â€” returns ()
!(assertEqualToResult (Empty) ())

;; Quoting Empty â€” prevents evaluation â€” returns quoted structure
!(assertEqualToResult (quote (Empty)) ((quote (Empty))))

;; Apply quoted (Empty) as a function to Empty â€” does nothing â€” returns ()
!(assertEqualToResult ((quote (Empty)) Empty) ())

;; Test: `let` with explicit binding form fails with Empty â€” should return ()
!(assertEqualToResult (let ($a) (Empty) 1) ())

(= (return-empty) Empty)
!(assertEqualToResult (return-empty) ())

;; ðŸ”” MettaLog FAILING TESTS BELOW â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Based on Hyperon Results assumed to be correct â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 

;; Confirm that capitalized Empty should also fail in let â€” this is a bug if it does not ðŸ””
!(assertEqualToResult (let $a Empty 1) (1))   

;; Nesting: Empty allows outer let; inner let binds and returns 2 ðŸ””
!(assertEqualToResult (let $a Empty (let $b something 2)) (2))

;; Nested lets with both variables as Empty should still allow body to return 2 ðŸ””
!(assertEqualToResult (let $a Empty (let $b Empty 2)) (2))

;; Evaluate capitalized Empty directly â€” should return () ðŸ””
!(assertEqualToResult Empty ())

;; Confirm collapsing Empty and (empty) gives same result â€” ensures consistency ðŸ””
!(assertEqual (collapse Empty) (collapse (empty)))

;; Print (Empty) â€” call to Empty returns nothing â€” prints nothing ðŸ””
!(assertEqualToResult (println! (Empty)) ())

;; Expression with Empty that is not evaluated â€” should return unevaluated form ðŸ””
!(assertEqualToResult (+ Empty 1) ((+ Empty 1)))

;; println! with (empty) â€” evaluates to (), which prints nothing ðŸ””
!(assertEqualToResult (println! (empty)) ())

;; println! with ((Empty)) â€” evaluates to (), which prints nothing ðŸ””
!(assertEqualToResult (println! ((Empty))) ())

;; Evaluate Empty on its own â€” returns () ðŸ””
!(assertEqualToResult Empty ())

;; Calling the quoted (Empty) â€” returns quoted structure in list ðŸ””
!(assertEqualToResult ((quote (Empty))) (((quote (Empty)))))

