[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[(H-E-Fails (Error (assertEqualToResult (chain (collapse-bind (foo $x)) $a (quote $a)) ((quote (((foo $x) { }))))) 
Expected: [(quote (((foo $x) { })))]
Got: [(quote (((foo $x) {  })))]
Missed result: (quote (((foo $x) { })))))]
[(H-E-Fails (Error (assertEqualToResult (chain (collapse-bind (eval (foo $x))) $a (quote $a)) ((quote (((bar $x) { }))))) 
Expected: [(quote (((bar $x) { })))]
Got: [(quote (((bar $x) { $x })))]
Missed result: (quote (((bar $x) { })))))]
[(H-E-Fails (Error (assertEqualToResult (chain (collapse-bind (metta (foo $x) %Undefined% GroundingSpace-top)) $a (quote $a)) ((quote (((input B) { $x <- B }) ((input A) { $x <- A }))))) 
Expected: [(quote (((input B) { $x <- B }) ((input A) { $x <- A })))]
Got: [(quote (((input A) { $x <- A }) ((input B) { $x <- B })))]
Missed result: (quote (((input B) { $x <- B }) ((input A) { $x <- A })))))]
[()]
[()]
[()]
[()]
[()]
[(H-E-Fails (Error (assertEqualToResult (collapse-bind (metta (foobar) $type GroundingSpace-top)) ((1 { $type <- Number }) ("a" { $type <- String }))) 
Expected: [(1 { $type <- Number }), ("a" { $type <- String })]
Got: [((1 { $type <- Number }) ("a" { $type <- String }))]
Missed result: (1 { $type <- Number })))]
[()]
[()]
[(H-E-Fails (Error (assertEqualToResult (collapse-bind (metta (chain-to-foobar) $type GroundingSpace-top)) ((1 { $type <- Number }) ("a" { $type <- String }))) 
Expected: [(1 { $type <- Number }), ("a" { $type <- String })]
Got: [(("a" { $type <- String }) (1 { $type <- Number }))]
Missed result: (1 { $type <- Number })))]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
real 0.05
user 0.04
sys 0.00
