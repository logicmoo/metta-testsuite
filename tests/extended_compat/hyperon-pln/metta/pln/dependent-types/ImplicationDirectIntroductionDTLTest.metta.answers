Doing: timeout --foreground --kill-after=5 --signal=SIGINT 61 time metta /opt/logicmoo_workspace/packs_sys/logicmoo_opencog/MeTTa/hyperon-wam/reports/extended_compat/hyperon-pln/metta/pln/dependent-types/ImplicationDirectIntroductionDTLTest.metta
[()]
[()]
["===== Test base rule (built-in type checker) ====="]
[(base_prf)]
[(≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))]
["===== Test recursive rule (built-in type checker) ====="]
[(recursive_prf)]
[(≞ (→ P Q) $etv#923)]
["===== Prove that 2 < 7 (synthesizer) ====="]
[(: (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)) (⍃ (S (S Z)) (S (S (S (S (S (S (S Z)))))))))]
["===== Prove that 2 < 3 (synthesizer) ====="]
[(: (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)) (⍃ (S (S Z)) (S (S (S Z)))))]
["===== Prove that 5 < 7 (synthesizer) ====="]
[(: (SuccMonotonicity (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) (⍃ (S (S (S Z))) (S (S (S (S (S (S (S Z)))))))))]
["===== Prove P→Q using base rule (synthesizer) ====="]
[(let* (((: $proof2#26359 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#26359 (⊷ Q (S (S Z)) True)) kb rb Z)) ((: $proof3#26360 (≞ (→ P Q) (ETV (:: $h#26365 $t#26366) (STV $s#26367 $conf#26368)))) (synthesize (: $proof3#26360 (≞ (→ P Q) (ETV (:: $h#26365 $t#26366) (STV $s#26367 $conf#26368)))) kb rb Z)) ((: $proof4#26361 (⍃ $h#26365 (S (S Z)))) (synthesize (: $proof4#26361 (⍃ $h#26365 (S (S Z)))) kb rb Z))) (: (IDIRecursive P2 $proof2#26359 $proof3#26360 $proof4#26361) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#26365 $t#26366)) (STV (/ (+ (* $s#26367 (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368)))) 1) (+ (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368))) 1)) (/ (+ (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368))) 1) (+ (+ (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368))) 1) 1.0))))))), (let* (((: $proof3#26360 (≞ (→ P Q) (ETV (:: $h#26365 $t#26366) (STV $s#26367 $conf#26368)))) (synthesize (: $proof3#26360 (≞ (→ P Q) (ETV (:: $h#26365 $t#26366) (STV $s#26367 $conf#26368)))) kb rb Z)) ((: $proof4#26361 (⍃ $h#26365 (S (S (S Z))))) (synthesize (: $proof4#26361 (⍃ $h#26365 (S (S (S Z))))) kb rb Z))) (: (IDIRecursive P3 Q3 $proof3#26360 $proof4#26361) (≞ (→ P Q) (ETV (:: (S (S (S Z))) (:: $h#26365 $t#26366)) (STV (/ (+ (* $s#26367 (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368)))) 1) (+ (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368))) 1)) (/ (+ (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368))) 1) (+ (+ (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368))) 1) 1.0))))))), (let* (((: $proof3#26360 (≞ (→ P Q) (ETV (:: $h#26365 $t#26366) (STV $s#26367 $conf#26368)))) (synthesize (: $proof3#26360 (≞ (→ P Q) (ETV (:: $h#26365 $t#26366) (STV $s#26367 $conf#26368)))) kb rb Z)) ((: $proof4#26361 (⍃ $h#26365 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#26361 (⍃ $h#26365 (S (S (S (S (S (S (S Z))))))))) kb rb Z))) (: (IDIRecursive P7 Q7 $proof3#26360 $proof4#26361) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#26365 $t#26366)) (STV (/ (+ (* $s#26367 (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368)))) 1) (+ (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368))) 1)) (/ (+ (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368))) 1) (+ (+ (if (<= (if (< (- 1.0 $conf#26368) 0) (* -1 (- 1.0 $conf#26368)) (- 1.0 $conf#26368)) 1e-09) (max-count) (/ (* $conf#26368 (lookahead)) (- 1.0 $conf#26368))) 1) 1.0))))))), (let* (((: $proof3#27352 (≞ (→ P Q) (ETV (:: $h#27357 $t#27358) (STV $PQs#27359 $PQc#27360)))) (synthesize (: $proof3#27352 (≞ (→ P Q) (ETV (:: $h#27357 $t#27358) (STV $PQs#27359 $PQc#27360)))) kb rb Z)) ((: $proof4#27353 (⍃ $h#27357 (S (S Z)))) (synthesize (: $proof4#27353 (⍃ $h#27357 (S (S Z)))) kb rb Z))) (: (IDIRecursive P2 Q2 $proof3#27352 $proof4#27353) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#27357 $t#27358)) (STV (/ (* $PQs#27359 (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360)))) (+ (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360))) 1) 1.0))))))), (let* (((: $proof2#27351 (⊷ Q (S (S (S Z))) False)) (synthesize (: $proof2#27351 (⊷ Q (S (S (S Z))) False)) kb rb Z)) ((: $proof3#27352 (≞ (→ P Q) (ETV (:: $h#27357 $t#27358) (STV $PQs#27359 $PQc#27360)))) (synthesize (: $proof3#27352 (≞ (→ P Q) (ETV (:: $h#27357 $t#27358) (STV $PQs#27359 $PQc#27360)))) kb rb Z)) ((: $proof4#27353 (⍃ $h#27357 (S (S (S Z))))) (synthesize (: $proof4#27353 (⍃ $h#27357 (S (S (S Z))))) kb rb Z))) (: (IDIRecursive P3 $proof2#27351 $proof3#27352 $proof4#27353) (≞ (→ P Q) (ETV (:: (S (S (S Z))) (:: $h#27357 $t#27358)) (STV (/ (* $PQs#27359 (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360)))) (+ (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360))) 1) 1.0))))))), (let* (((: $proof2#27351 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#27351 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb Z)) ((: $proof3#27352 (≞ (→ P Q) (ETV (:: $h#27357 $t#27358) (STV $PQs#27359 $PQc#27360)))) (synthesize (: $proof3#27352 (≞ (→ P Q) (ETV (:: $h#27357 $t#27358) (STV $PQs#27359 $PQc#27360)))) kb rb Z)) ((: $proof4#27353 (⍃ $h#27357 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#27353 (⍃ $h#27357 (S (S (S (S (S (S (S Z))))))))) kb rb Z))) (: (IDIRecursive P7 $proof2#27351 $proof3#27352 $proof4#27353) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#27357 $t#27358)) (STV (/ (* $PQs#27359 (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360)))) (+ (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360))) 1)) (/ (+ (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360))) 1) (+ (+ (if (<= (if (< (- 1.0 $PQc#27360) 0) (* -1 (- 1.0 $PQc#27360)) (- 1.0 $PQc#27360)) 1e-09) (max-count) (/ (* $PQc#27360 (lookahead)) (- 1.0 $PQc#27360))) 1) 1.0))))))), (: (IDIBase P2 Q2) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))), (let* (((: $proof2#28198 (⊷ Q (S (S (S Z))) False)) (synthesize (: $proof2#28198 (⊷ Q (S (S (S Z))) False)) kb rb Z))) (: (IDIBase P3 $proof2#28198) (≞ (→ P Q) (ETV (:: (S (S (S Z))) ∅) (STV 0 0.5))))), (let* (((: $proof2#28198 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#28198 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb Z))) (: (IDIBase P7 $proof2#28198) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 0 0.5))))), (let* (((: $proof2#28961 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#28961 (⊷ Q (S (S Z)) True)) kb rb Z))) (: (IDIBase P2 $proof2#28961) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 1 0.5))))), (: (IDIBase P3 Q3) (≞ (→ P Q) (ETV (:: (S (S (S Z))) ∅) (STV 1 0.5)))), (: (IDIBase P7 Q7) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 1 0.5))))]
["===== Prove P→Q using base, recursive and order rules (synthesizer) ====="]
[(let* (((: $proof2#34807 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#34807 (⊷ Q (S (S Z)) True)) kb rb (S (S (S Z))))) ((: $proof3#34808 (≞ (→ P Q) (ETV (:: $h#34813 $t#34814) (STV $s#34815 $c#34816)))) (synthesize (: $proof3#34808 (≞ (→ P Q) (ETV (:: $h#34813 $t#34814) (STV $s#34815 $c#34816)))) kb rb (S (S (S Z))))) ((: $proof4#34809 (⍃ $h#34813 (S (S Z)))) (synthesize (: $proof4#34809 (⍃ $h#34813 (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 $proof2#34807 $proof3#34808 $proof4#34809) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: $h#34813 $t#34814)) (STV (/ (+ (* $s#34815 (if (<= (if (< (- 1.0 $c#34816) 0) (* -1 (- 1.0 $c#34816)) (- 1.0 $c#34816)) 1e-09) (max-count) (/ (* $c#34816 (lookahead)) (- 1.0 $c#34816)))) 1) (+ (if (<= (if (< (- 1.0 $c#34816) 0) (* -1 (- 1.0 $c#34816)) (- 1.0 $c#34816)) 1e-09) (max-count) (/ (* $c#34816 (lookahead)) (- 1.0 $c#34816))) 1)) (/ (+ (if (<= (if (< (- 1.0 $c#34816) 0) (* -1 (- 1.0 $c#34816)) (- 1.0 $c#34816)) 1e-09) (max-count) (/ (* $c#34816 (lookahead)) (- 1.0 $c#34816))) 1) (+ (+ (if (<= (if (< (- 1.0 $c#34816) 0) (* -1 (- 1.0 $c#34816)) (- 1.0 $c#34816)) 1e-09) (max-count) (/ (* $c#34816 (lookahead)) (- 1.0 $c#34816))) 1) 1.0))))))), (: (IDIRecursive P3 Q3 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) (≞ (→ P Q) (ETV (:: (S (S (S Z))) (:: (S (S Z)) ∅)) (STV 0.5 0.6666666666666666)))), (: (IDIRecursive P7 Q7 (IDIRecursive P3 Q3 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) (SuccMonotonicity (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)))) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: (S (S (S Z))) (:: (S (S Z)) ∅))) (STV 0.6666666666666666 0.75)))), (: (IDIRecursive P7 Q7 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: (S (S Z)) ∅)) (STV 0.5 0.6666666666666666)))), (: (IDIRecursive P7 Q7 (IDIBase P3 Q3) (SuccMonotonicity (SuccMonotonicity (SuccMonotonicity ZeroLTSucc)))) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: (S (S (S Z))) ∅)) (STV 1.0 0.6666666666666666)))), (let* (((: $proof4#150034 (⍃ (S (S (S Z))) (S (S Z)))) (synthesize (: $proof4#150034 (⍃ (S (S (S Z))) (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 Q2 (IDIRecursive P3 Q3 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) $proof4#150034) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S (S Z))) (:: (S (S Z)) ∅))) (STV (/ (* 0.5 (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666)))) (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1)) (/ (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1) (+ (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1) 1.0))))))), (let* (((: $proof4#150034 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S Z)))) (synthesize (: $proof4#150034 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 Q2 (IDIRecursive P7 Q7 (IDIBase P2 Q2) (SuccMonotonicity (SuccMonotonicity ZeroLTSucc))) $proof4#150034) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S (S (S (S (S (S Z))))))) (:: (S (S Z)) ∅))) (STV (/ (* 0.5 (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666)))) (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1)) (/ (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1) (+ (+ (if (<= (if (< (- 1.0 0.6666666666666666) 0) (* -1 (- 1.0 0.6666666666666666)) (- 1.0 0.6666666666666666)) 1e-09) (max-count) (/ (* 0.6666666666666666 (lookahead)) (- 1.0 0.6666666666666666))) 1) 1.0))))))), (let* (((: $proof4#150034 (⍃ (S (S Z)) (S (S Z)))) (synthesize (: $proof4#150034 (⍃ (S (S Z)) (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 Q2 (IDIBase P2 Q2) $proof4#150034) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S Z)) ∅)) (STV (/ (* 0 (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1)) (/ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) (+ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) 1.0))))))), (let* (((: $proof4#150034 (⍃ (S (S (S Z))) (S (S Z)))) (synthesize (: $proof4#150034 (⍃ (S (S (S Z))) (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 Q2 (IDIBase P3 Q3) $proof4#150034) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S (S Z))) ∅)) (STV (/ (* 1 (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1)) (/ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) (+ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) 1.0))))))), (let* (((: $proof4#150034 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S Z)))) (synthesize (: $proof4#150034 (⍃ (S (S (S (S (S (S (S Z))))))) (S (S Z)))) kb rb (S (S (S Z)))))) (: (IDIRecursive P2 Q2 (IDIBase P7 Q7) $proof4#150034) (≞ (→ P Q) (ETV (:: (S (S Z)) (:: (S (S (S (S (S (S (S Z))))))) ∅)) (STV (/ (* 1 (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5)))) (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1)) (/ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) (+ (+ (if (<= (if (< (- 1.0 0.5) 0) (* -1 (- 1.0 0.5)) (- 1.0 0.5)) 1e-09) (max-count) (/ (* 0.5 (lookahead)) (- 1.0 0.5))) 1) 1.0))))))), (let* (((: $proof2#150032 (⊷ Q (S (S (S Z))) False)) (synthesize (: $proof2#150032 (⊷ Q (S (S (S Z))) False)) kb rb (S (S (S Z))))) ((: $proof3#150033 (≞ (→ P Q) (ETV (:: $h#150038 $t#150039) (STV $PQs#150040 $y#150041)))) (synthesize (: $proof3#150033 (≞ (→ P Q) (ETV (:: $h#150038 $t#150039) (STV $PQs#150040 $y#150041)))) kb rb (S (S (S Z))))) ((: $proof4#150034 (⍃ $h#150038 (S (S (S Z))))) (synthesize (: $proof4#150034 (⍃ $h#150038 (S (S (S Z))))) kb rb (S (S (S Z)))))) (: (IDIRecursive P3 $proof2#150032 $proof3#150033 $proof4#150034) (≞ (→ P Q) (ETV (:: (S (S (S Z))) (:: $h#150038 $t#150039)) (STV (/ (* $PQs#150040 (if (<= (if (< (- 1.0 $y#150041) 0) (* -1 (- 1.0 $y#150041)) (- 1.0 $y#150041)) 1e-09) (max-count) (/ (* $y#150041 (lookahead)) (- 1.0 $y#150041)))) (+ (if (<= (if (< (- 1.0 $y#150041) 0) (* -1 (- 1.0 $y#150041)) (- 1.0 $y#150041)) 1e-09) (max-count) (/ (* $y#150041 (lookahead)) (- 1.0 $y#150041))) 1)) (/ (+ (if (<= (if (< (- 1.0 $y#150041) 0) (* -1 (- 1.0 $y#150041)) (- 1.0 $y#150041)) 1e-09) (max-count) (/ (* $y#150041 (lookahead)) (- 1.0 $y#150041))) 1) (+ (+ (if (<= (if (< (- 1.0 $y#150041) 0) (* -1 (- 1.0 $y#150041)) (- 1.0 $y#150041)) 1e-09) (max-count) (/ (* $y#150041 (lookahead)) (- 1.0 $y#150041))) 1) 1.0))))))), (let* (((: $proof2#150032 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#150032 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb (S (S (S Z))))) ((: $proof3#150033 (≞ (→ P Q) (ETV (:: $h#150038 $t#150039) (STV $PQs#150040 $y#150041)))) (synthesize (: $proof3#150033 (≞ (→ P Q) (ETV (:: $h#150038 $t#150039) (STV $PQs#150040 $y#150041)))) kb rb (S (S (S Z))))) ((: $proof4#150034 (⍃ $h#150038 (S (S (S (S (S (S (S Z))))))))) (synthesize (: $proof4#150034 (⍃ $h#150038 (S (S (S (S (S (S (S Z))))))))) kb rb (S (S (S Z)))))) (: (IDIRecursive P7 $proof2#150032 $proof3#150033 $proof4#150034) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) (:: $h#150038 $t#150039)) (STV (/ (* $PQs#150040 (if (<= (if (< (- 1.0 $y#150041) 0) (* -1 (- 1.0 $y#150041)) (- 1.0 $y#150041)) 1e-09) (max-count) (/ (* $y#150041 (lookahead)) (- 1.0 $y#150041)))) (+ (if (<= (if (< (- 1.0 $y#150041) 0) (* -1 (- 1.0 $y#150041)) (- 1.0 $y#150041)) 1e-09) (max-count) (/ (* $y#150041 (lookahead)) (- 1.0 $y#150041))) 1)) (/ (+ (if (<= (if (< (- 1.0 $y#150041) 0) (* -1 (- 1.0 $y#150041)) (- 1.0 $y#150041)) 1e-09) (max-count) (/ (* $y#150041 (lookahead)) (- 1.0 $y#150041))) 1) (+ (+ (if (<= (if (< (- 1.0 $y#150041) 0) (* -1 (- 1.0 $y#150041)) (- 1.0 $y#150041)) 1e-09) (max-count) (/ (* $y#150041 (lookahead)) (- 1.0 $y#150041))) 1) 1.0))))))), (: (IDIBase P2 Q2) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 0 0.5)))), (let* (((: $proof2#252203 (⊷ Q (S (S (S Z))) False)) (synthesize (: $proof2#252203 (⊷ Q (S (S (S Z))) False)) kb rb (S (S (S Z)))))) (: (IDIBase P3 $proof2#252203) (≞ (→ P Q) (ETV (:: (S (S (S Z))) ∅) (STV 0 0.5))))), (let* (((: $proof2#252203 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) (synthesize (: $proof2#252203 (⊷ Q (S (S (S (S (S (S (S Z))))))) False)) kb rb (S (S (S Z)))))) (: (IDIBase P7 $proof2#252203) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 0 0.5))))), (let* (((: $proof2#255197 (⊷ Q (S (S Z)) True)) (synthesize (: $proof2#255197 (⊷ Q (S (S Z)) True)) kb rb (S (S (S Z)))))) (: (IDIBase P2 $proof2#255197) (≞ (→ P Q) (ETV (:: (S (S Z)) ∅) (STV 1 0.5))))), (: (IDIBase P3 Q3) (≞ (→ P Q) (ETV (:: (S (S (S Z))) ∅) (STV 1 0.5)))), (: (IDIBase P7 Q7) (≞ (→ P Q) (ETV (:: (S (S (S (S (S (S (S Z))))))) ∅) (STV 1 0.5))))]
