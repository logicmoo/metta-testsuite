+ '[' 0 -eq 1 ']'
+ echo 'Doing: timeout --foreground --kill-after=5 --signal=SIGINT 121 time metta /opt/logicmoo_opencog/hyperon-wam/examples/baseline_compat/hyperon-pln_metta/synthesis/SynthesizeTest.metta'
Doing: timeout --foreground --kill-after=5 --signal=SIGINT 121 time metta /opt/logicmoo_opencog/hyperon-wam/examples/baseline_compat/hyperon-pln_metta/synthesis/SynthesizeTest.metta
+ eval 'timeout --foreground --kill-after=5 --signal=SIGINT 121 time metta /opt/logicmoo_opencog/hyperon-wam/examples/baseline_compat/hyperon-pln_metta/synthesis/SynthesizeTest.metta'
++ timeout --foreground --kill-after=5 --signal=SIGINT 121 time metta /opt/logicmoo_opencog/hyperon-wam/examples/baseline_compat/hyperon-pln_metta/synthesis/SynthesizeTest.metta
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[()]
[(: f (-> Number String)), (: g (-> String Bool)), (: h (-> Bool Number)), (: i (-> String Number Bool)), (: (. f h) (-> Bool String)), (: (. g f) (-> Number Bool)), (: (. h g) (-> String Number)), (let* (((: $proof2#6377 (-> $a#6378 $b#6379 Number)) (synthesize (: $proof2#6377 (-> $a#6378 $b#6379 Number)) kb rb Z))) (: (.: f $proof2#6377) (-> $a#6378 $b#6379 String))), (let* (((: $proof2#6377 (-> $a#6378 $b#6379 String)) (synthesize (: $proof2#6377 (-> $a#6378 $b#6379 String)) kb rb Z))) (: (.: g $proof2#6377) (-> $a#6378 $b#6379 Bool))), (: (.: h i) (-> String Number Number))]
[()]
[(: (. f h) (-> Bool String)), (let* (((: h (-> $a#9546 String)) (synthesize (: h (-> $a#9546 String)) kb rb (S (S Z))))) (: (. g h) (-> $a#9546 Bool))), (let* (((: h (-> $a#9546 Bool)) (synthesize (: h (-> $a#9546 Bool)) kb rb (S (S Z))))) (: (. h h) (-> $a#9546 Number))), (let* (((: h (-> $a#9546 Bool)) (synthesize (: h (-> $a#9546 Bool)) kb rb (S (S Z))))) (: (. (. f h) h) (-> $a#9546 String))), (let* (((: h (-> $a#9546 String)) (synthesize (: h (-> $a#9546 String)) kb rb (S (S Z))))) (: (. (. f (. h g)) h) (-> $a#9546 String))), (: (. (. g f) h) (-> Bool Bool)), (let* (((: h (-> $a#9546 Bool)) (synthesize (: h (-> $a#9546 Bool)) kb rb (S (S Z))))) (: (. (. g (. f h)) h) (-> $a#9546 Bool))), (let* (((: h (-> $a#9546 String)) (synthesize (: h (-> $a#9546 String)) kb rb (S (S Z))))) (: (. (. h g) h) (-> $a#9546 Number))), (: (. (. h (. g f)) h) (-> Bool Number)), (let* (((: h (-> $a#9546 String)) (synthesize (: h (-> $a#9546 String)) kb rb (S (S Z))))) (: (. (. (. f h) g) h) (-> $a#9546 String))), (: (. (. (. f h) (. g f)) h) (-> Bool String)), (let* (((: h (-> $a#9546 Bool)) (synthesize (: h (-> $a#9546 Bool)) kb rb (S (S Z))))) (: (. (. (. g f) h) h) (-> $a#9546 Bool))), (let* (((: h (-> $a#9546 String)) (synthesize (: h (-> $a#9546 String)) kb rb (S (S Z))))) (: (. (. (. g f) (. h g)) h) (-> $a#9546 Bool))), (: (. (. (. h g) f) h) (-> Bool Number)), (let* (((: h (-> $a#9546 Bool)) (synthesize (: h (-> $a#9546 Bool)) kb rb (S (S Z))))) (: (. (. (. h g) (. f h)) h) (-> $a#9546 Number)))]
[(let* (((: h (-> Number Number)) (synthesize (: h (-> Number Number)) kb rb (S (S Z))))) (: (. f h) (-> Number String))), (let* (((: h (-> Number String)) (synthesize (: h (-> Number String)) kb rb (S (S Z))))) (: (. g h) (-> Number Bool))), (let* (((: h (-> Number Bool)) (synthesize (: h (-> Number Bool)) kb rb (S (S Z))))) (: (. h h) (-> Number Number))), (let* (((: h (-> Number Bool)) (synthesize (: h (-> Number Bool)) kb rb (S (S Z))))) (: (. (. f h) h) (-> Number String))), (let* (((: h (-> Number String)) (synthesize (: h (-> Number String)) kb rb (S (S Z))))) (: (. (. f (. h g)) h) (-> Number String))), (let* (((: h (-> Number Number)) (synthesize (: h (-> Number Number)) kb rb (S (S Z))))) (: (. (. g f) h) (-> Number Bool))), (let* (((: h (-> Number Bool)) (synthesize (: h (-> Number Bool)) kb rb (S (S Z))))) (: (. (. g (. f h)) h) (-> Number Bool))), (let* (((: h (-> Number String)) (synthesize (: h (-> Number String)) kb rb (S (S Z))))) (: (. (. h g) h) (-> Number Number))), (let* (((: h (-> Number Number)) (synthesize (: h (-> Number Number)) kb rb (S (S Z))))) (: (. (. h (. g f)) h) (-> Number Number))), (let* (((: h (-> Number String)) (synthesize (: h (-> Number String)) kb rb (S (S Z))))) (: (. (. (. f h) g) h) (-> Number String))), (let* (((: h (-> Number Number)) (synthesize (: h (-> Number Number)) kb rb (S (S Z))))) (: (. (. (. f h) (. g f)) h) (-> Number String))), (let* (((: h (-> Number Bool)) (synthesize (: h (-> Number Bool)) kb rb (S (S Z))))) (: (. (. (. g f) h) h) (-> Number Bool))), (let* (((: h (-> Number String)) (synthesize (: h (-> Number String)) kb rb (S (S Z))))) (: (. (. (. g f) (. h g)) h) (-> Number Bool))), (let* (((: h (-> Number Number)) (synthesize (: h (-> Number Number)) kb rb (S (S Z))))) (: (. (. (. h g) f) h) (-> Number Number))), (let* (((: h (-> Number Bool)) (synthesize (: h (-> Number Bool)) kb rb (S (S Z))))) (: (. (. (. h g) (. f h)) h) (-> Number Number)))]
[(let* (((: g (-> $b#22355 String)) (synthesize (: g (-> $b#22355 String)) kb rb (S (S Z)))) ((: $f (-> $in $b#22355)) (synthesize (: $f (-> $in $b#22355)) kb rb (S (S Z))))) (: (. g $f) (-> $in String)))]
[()]
[()]
34.45user 0.12system 0:34.58elapsed 99%CPU (0avgtext+0avgdata 640504maxresident)k
0inputs+0outputs (0major+158617minor)pagefaults 0swaps
