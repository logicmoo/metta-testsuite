
; =============================================================
; Purpose: Define predicate 'is-even' to check if a number is even.
; Operation: Uses modulo operator to determine if a number is divisible by 2 without remainder.
; Usage: General utility function for checking evenness of numbers.
; =============================================================
; Define 'is-even' predicate
(: is-even (-> Number Bool))
; Implementation: (is-even X) is true if (X % 2) == 0
(= (is-even $X) (== (% $X 2) 0))


; Define `constrain-true`, a low-level function that constrains a given variable so that
; a provided lazy boolean expression ($true) must evaluate to true for the variable’s values.
; It uses `freeze` and `eval_true` to enforce this constraint, and then returns $eval,
; presumably a transformed or filtered evaluation context.
(: constrain-true (-> Variable LazyBool $t $t))
(= (constrain-true $var $true $eval)
   (let $_ (call! freeze $var #(eval_true $true))
     $eval))

; Test that applying `constrain-true` with `is-even` filters the sequence (1 2 3 4 5 6)
; to only even numbers: (2 4 6).
!(assertEqual 
   (constrain-true $even (is-even $even)
     (let $even (superpose (1 2 3 4 5 6)) $even))
 (superpose (2 4 6)))


; Define a type refinement for EvenNumber. The notation `(: $v EvenNumber)` means
; that $v should be recognized as an EvenNumber type if `is-even $v` holds.
; If $v is even, it's tagged as NotReducible; otherwise, it's Empty, meaning it fails
; the refinement and cannot be typed as EvenNumber.
(= (: $v EvenNumber) (if (is-even $v) NotReducible Empty))


; Define `declare-type`, which enforces that a variable has a certain type by
; constraining it to situations where `(get-type $var)` equals `$type`.
; Under the hood, this relies on `constrain-true` to ensure the type condition holds.
(: declare-type (-> Variable Type $t $t))
(= (declare-type $var $type $eval) 
   (constrain-true $var (== (get-type $var) $type)
     $eval))

; Test that using `declare-type` to assert EvenNumber type on a superposed set (1 2 3 4 5 6)
; again filters it down to just (2 4 6).
!(assertEqual 
   (declare-type $even EvenNumber
     (let $even (superpose (1 2 3 4 5 6)) $even))
 (superpose (2 4 6)))


; Test that binding $even to 2 succeeds when requiring $even to be EvenNumber.
!(assertEqualToResult (let $_ (: $even EvenNumber) (let $even 2 $even)) (2))

; Test that binding $even to 1 (which is not even) fails the EvenNumber refinement,
; resulting in an empty result.
!(assertEqualToResult (let $_ (: $even EvenNumber) (let $even 1 $even)) ())

; Test that trying to bind $even to unknown-symbol (with EvenNumber constraint) works
; which afterward makes unknown-symbol to be considered even number
!(assertEqualToResult 
  ((let $_ (: $even EvenNumber) (let $even $even unknown-symbol)) (get-type unknown-symbol))
  ((unknown-symbol EvenNumber)))

; Test that trying to bind $thing to other-symbol (with SomeType constraint) works
; which afterward makes other-symbol to be considered SomeType
!(assertEqualToResult 
  ((let $_ (: $thing SomeType) (let $thing $thing other-symbol)) (get-type other-symbol))
  ((other-symbol SomeType)))


; The following test attempts to bind $even to an EvenNumber and let it be 2
!(let $_ (: $even EvenNumber) (let $even 2 $even))

; Here we try to bind $even to 1, which is not even, so it should fail type refinement
!(let $_ (: $even EvenNumber) (let $even 1 $even))

; Try binding $even to unknown-symbol, which presumably fails
!(let $_ (: $even EvenNumber) (let $even unknown-symbol $even))

; Test using a boolean flag (True) and asserting (get-type $even) == EvenNumber to filter 
; superposed values. With True, only EvenNumbers are kept: (2 4 6).
!(assertEqual
   (let True (== (get-type $even) EvenNumber)
     (let $even (superpose (1 2 3 4 5 6)) $even))
   (superpose (2 4 6)))

; Test with False, meaning (get-type $even) == EvenNumber is not satisfied,
; so we should get the values that don't meet that condition: (1 3 5).
!(assertEqual
   (let False (== (get-type $even) EvenNumber)
     (let $even (superpose (1 2 3 4 5 6)) $even))
   (superpose (1 3 5)))


; Define `even-symbol` as an EvenNumber type symbol.
(: even-symbol EvenNumber)
; Test that we can bind $even to even-symbol under the EvenNumber refinement.
!(assertEqualToResult (let $_ (: $even EvenNumber) (let $even even-symbol $even)) even-symbol)


; Define `has-type-symbol` as HasType, a different type.
(: has-type-symbol HasType)
; Test that trying to bind an EvenNumber variable to has-type-symbol fails,
; since the types do not match.
!(assertEqualToResult (let $_ (: $even EvenNumber) (let $even has-type-symbol $even)) ())


; Asserting that applying the EvenNumber type refinement to (1 2 3 4 5 6)
; filters the sequence down to (2 4 6), matching the expected behavior of `is-even`.
!(assertEqual
 (let $_ (: $even EvenNumber)
   (let $even (superpose (1 2 3 4 5 6)) $even))
 (superpose (2 4 6)))


