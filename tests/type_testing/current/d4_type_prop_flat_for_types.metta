;!(import! &self top)
!(println! (collapse (get-type =)))
(: Entity Type)
(: Socrates Entity)
(: Plato Entity)
(: Human (-> Entity Type))
(: Mortal (-> Entity Type))
!(m (assertEqual (get-type (Mortal Plato)) Type))
(: HumansAreMortal (-> (Human $t) (Mortal $t)))
(: SocratesIsHuman (Human Socrates))
(: PlatoIsHuman (Human Plato))
!(assertEqual (get-type (HumansAreMortal SocratesIsHuman)) (Mortal Socrates))
!(assertEqualToResult (get-type (HumansAreMortal (Human Socrates))) ())
(: SocratesIsMortal (Mortal Socrates))
(= (HumansAreMortal SocratesIsHuman) SocratesIsMortal)
!(m (assertEqual (get-type (= SocratesIsMortal (HumansAreMortal SocratesIsHuman))) Atom))
!(m (assertEqual (get-type (= (Mortal Socrates) (Mortal Plato))) Atom))
!(assertEqualToResult (get-type (= SocratesIsMortal (HumansAreMortal PlatoIsHuman))) ())
!(assertEqualToResult (get-type (= SocratesIsHuman PlatoIsHuman)) ())
!(assertEqualToResult (get-type (= SocratesIsHuman SocratesIsMortal)) ())
(: T Type)
(= (= $x $x) T)
!(assertEqual (= SocratesIsMortal (HumansAreMortal SocratesIsHuman)) T)
;; [Error [got ((= SocratesIsMortal (HumansAreMortal SocratesIsHuman)))] [expected (T)]])]
!(assertEqual (= (+ 1 1) (- 3 1)) T)
(= (= $type T) (match &self (: $x $type) T))
!(assertEqual (= (Mortal Socrates) T) T)
!(assertEqualToResult (= (Mortal Plato) T) ())
(= (= $type T) (match &self (: $impl (-> $cause $type))  (if (== $cause $type) (empty) (= $cause T))))
!(assertEqual (= (Mortal Plato) T) T)
;; [([Error [got ()] [expected (T)]])]
(: Sam Entity)
!(assertEqualToResult (= (Human Sam) T) ())
!(assertEqualToResult (Mortal Plato) ((Mortal Plato)))
!(assertEqual (= (= $x $x) T) T)
(= (Human Plato) T)
(= (Mortal Socrates) T)
(= (Mortal $x) (Human $x))
!(assertEqual (Mortal Plato) T)
(: ift (-> Type $t $t))
(= (ift T $then) $then)
!(assertEqualToResult (ift (Mortal $x) $x) (Socrates Plato))	
!(import! &corelib top:corelib)
;(: is-corelib (-> Atom Bool))
;(= (is-corelib $atom) (== $atom &corelib))
;(= (find-corelib) (function (let $a (get-atoms &self) (if (is-corelib $a) (return $a) (empty)))))
;!(println! (collapse (find-corelib)))
;!(call-p rtrace)
!(remove-atom &corelib (: = (-> $t $t Atom)))
!(println! (collapse (get-type =)))
(: = (-> Atom Atom Atom))
;(: = (-> Atom Atom Atom Atom))
!(println! (collapse (get-type =)))
;!(println! (collapse (get-type =)))
;!(case (println! done) ())
;!(case (get-atoms &corelib) (($a (quote $a))))
;(: = (-> Atom Atom Atom))
;(: my-println (-> Atom Atom))
; (= (my-println $info)  (let (quote $u) $info (trace! $u True)))
;(= (my-println $u) (println! (quote $u)))

;(= (show-space $space) (show-space-helper-3 $space $space 0))
;(: show-space-helper-3 (-> Atom Atom Number Atom)) 
;(= (show-space-helper-3 $orig $obj $depth) (let $_ (collapse (let $objtype (get-type $obj) (show-space-helper-4 $orig $obj $objtype $depth))) ()))
;(: show-space-helper-4 (-> Atom Atom Atom Number Atom)) 
;(= (show-space-helper-4 $orig $obj $objtype $depth)  (if  (== $objtype hyperon::space::DynSpace) (let $_0 (my-println (quote ($orig = space $obj))) (let $_1 (collapse (let $e (get-atoms $obj) (show-space-helper-3 $obj $e (+ 1 $depth)))) ())) (my-println (quote ($orig = $obj)))))
(: do-hide (-> Expression %Undefined%))
(= (do-hide $1) (case $1 ()))
; (: : (-> Atom Atom Atom))
(: src= (-> Atom Atom))
;!(case (get-atoms &corelib) (($a (do-hide (println! (quote $a))))))
;(: show-space (-> hyperon::space::DynSpace Atom))
;(= (show-space $space) (do-hide (case (get-atoms $space) (($a (do-hide (println! (quote $a))))))))
;!(show-space &self) 
;!(case (get-atoms &self) (($a (do-hide (println! (quote $a))))))
; !(println! (let $f (match &self $f $f) $f))
!(do-hide (println! (let $f (match &self $a (src= $a)) $f)))




