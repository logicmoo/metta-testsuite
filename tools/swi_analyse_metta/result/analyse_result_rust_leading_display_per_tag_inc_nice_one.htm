
<html> <head> 

<script> 
function open_div(xid){ document.getElementById(xid).style.display = 'block'; }
function close_div(xid){ document.getElementById(xid).style.display = 'none'; }

</script> 

</head> 

<style> 
.tag_searched { display: inline-block; font-size: 18pt; font-weight: bold; font-style: italic } 
.tag_rs { display: inline-block; font-size: 18pt; margin-left: 7px; } 
.leftpar_rs { color: #C64F00 ; font-weight: bold } 
.rightpar_rs { color: #C64F00 ; font-weight: bold } 
.tag_py { display: inline-block ; font-size: 18pt; margin-left: 7px;} 
.leftpar_py { color: #008600 ; font-weight: bold } 
.rightpar_py { color: #008600 ; font-weight: bold } 
.tag_pl { display: inline-block ; font-size: 18pt; margin-left: 7px;} 
.leftpar_pl { color: #C0C0C0 ;  } 
.rightpar_pl { color: #C0C0C0 ;  } 
.tag_metta { display: inline-block ; font-size: 18pt; margin-left: 7px; } 
.leftpar_metta { color: #E2E2E2 ;  } 
.rightpar_metta { color: #E2E2E2 ;  } 
.big_tag { display: inline-block ; font-size: 12pt; font-style: italic ; background-color: #737373; padding: 6px; border-radius: 4px; border: 0px solid #000000; } 
.enlarged { display: inline-block ; font-size: 14pt; font-style: italic ; color: #E7E7E7;   } 
.tag_arrow { display: inline-block ; font-size: 14pt; font-style: italic ; color: #FF4040;   } 
.tag_operator { display: inline-block ; font-size: 16pt;  color: #FFFFFF;   } 
.metta_clause { background-color: #434343; padding: 8px; border-radius: 9px; font-size: 10pt; color: #ADADAD; margin: 8px; } 
.tag_parenthesis0 { display: inline-block ;color: #000000 ; font-size: 20pt; font-weight: bold  } 
.tag_parenthesis1 { display: inline-block ;color: #FFFF40 ; font-size: 14pt; } 
.tag_parenthesis2 { display: inline-block ;color: #A9FFFE ; font-size: 14pt; } 
.tag_parenthesis3 { display: inline-block ;color: #B7FFB7 ; font-size: 14pt; } 
.tag_parenthesis4 { display: inline-block ;color: #FFC0FF ; font-size: 14pt; } 
.tag_parenthesis5 { display: inline-block ;color: #80FFFF ; font-size: 14pt; } 
.tag_parenthesis6 { display: inline-block ;color:  #ECECEC; font-size: 14pt; } 

</style> 

<body style="font-family: arial; font-size: 12pt; background-color: #E5E5E5"> 
 <H2> 
 Time 1727084631.6754265 </H2> 
 <H2> 
include_metta_files </H2> 
 <H2> 
display_per_tag </H2> 
 <H2> 
rust_leading </H2> 
<h2> Tags identified </h2> rust <br>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >   1  %  1886 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 2  &self  1859 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 3  *  1882 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 4  +  1878 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 5  -  1880 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 6  /  1884 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 7  <  1888 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 8  <=  1892 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 9  ==  1896 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 10  >  1890 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 11  >=  1894 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 12  add-atom  1773 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 13  and  1898 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 14  assertequal  1825 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 15  assertequaltoresult  1827 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 16  bind!  1769 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 17  capture  1821 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 18  car-atom  1779 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 19  case  1823 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 20  cdr-atom  1781 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 21  change-state!  1799 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 22  collapse  1829 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 23  cons-atom  1783 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 24  flip  1907 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 25  format-args  1787 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 26  get-atoms  1777 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 27  get-metatype  1803 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 28  get-state  1801 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 29  get-type  1841 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 30  get-type-space  1843 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 31  git-module!  1033 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 32  import!  1845 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 33  include  1847 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 34  intersection  1837 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 35  let  1793 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 36  let*  1795 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 37  match  1767 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 38  mod-space!  1805 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 39  new-space  1771 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 40  new-state  1797 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 41  nop  1791 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 42  not  1902 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 43  or  1900 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 44  pragma!  1849 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 45  print-mods!  1807 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 46  println!  1785 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 47  register-module!  1031 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 48  remove-atom  1775 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 49  sealed  1809 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 50  subtraction  1839 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 51  superpose  1831 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 52  trace!  1789 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 53  union  1835 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 54  unique  1833 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 
 55  xor  1905 ../../../hyperon-experimental/lib/src/metta/runner/stdlib.rs <br> 

  </div>
<h2> Tags identified </h2> pl_tag <br>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >   1  bind!  1507 ../canary/metta_eval.pl <br> 
 2  call!  1069 ../canary/metta_eval.pl <br> 
 3  call-cleanup!  1624 ../canary/metta_eval.pl <br> 
 4  call-fn!  1070 ../canary/metta_eval.pl <br> 
 5  call-fn-nth!  1071 ../canary/metta_eval.pl <br> 
 6  call-string!  2028 ../canary/metta_eval.pl <br> 
 7  car-atom  1191 ../canary/metta_eval.pl <br> 
 8  case  913 ../canary/metta_eval.pl <br> 
 9  catch  1588 ../canary/metta_eval.pl <br> 
 10  cdr-atom  1192 ../canary/metta_eval.pl <br> 
 11  chain  383 ../canary/metta_eval.pl <br> 
 12  change-state!  1213 ../canary/metta_eval.pl <br> 
 13  charstostring  1398 ../canary/metta_eval.pl <br> 
 14  coerce  329 ../canary/metta_eval.pl <br> 
 15  collapse  997 ../canary/metta_eval.pl <br> 
 16  collapse-bind  979 ../canary/metta_eval.pl <br> 
 17  compile!  1787 ../canary/metta_eval.pl <br> 
 18  compile-space!  1768 ../canary/metta_eval.pl <br> 
 19  concurrent-forall!  1736 ../canary/metta_eval.pl <br> 
 20  concurrent-maplist!  1724 ../canary/metta_eval.pl <br> 
 21  cons  1194 ../canary/metta_eval.pl <br> 
 22  countelement  1370 ../canary/metta_eval.pl <br> 
 23  decons  1096 ../canary/metta_eval.pl <br> 
 24  decons-atom  1093 ../canary/metta_eval.pl <br> 
 25  echo  328 ../canary/metta_eval.pl <br> 
 26  eval-for  393 ../canary/metta_eval.pl <br> 
 27  extend-py!  1471 ../canary/metta_eval.pl <br> 
 28  filter-atom  406 ../canary/metta_eval.pl <br> 
 29  findall!  1603 ../canary/metta_eval.pl <br> 
 30  foldl-atom  430 ../canary/metta_eval.pl <br> 
 31  format-args  1437 ../canary/metta_eval.pl <br> 
 32  fromnumber  1876 ../canary/metta_eval.pl <br> 
 33  function  1576 ../canary/metta_eval.pl <br> 
 34  function-arity  1759 ../canary/metta_eval.pl <br> 
 35  get-metatype  1372 ../canary/metta_eval.pl <br> 
 36  get-state  1219 ../canary/metta_eval.pl <br> 
 37  get-type  1347 ../canary/metta_eval.pl <br> 
 38  get-type-space  1365 ../canary/metta_eval.pl <br> 
 39  get-types  1343 ../canary/metta_eval.pl <br> 
 40  hyperpose  1744 ../canary/metta_eval.pl <br> 
 41  if-equal  1122 ../canary/metta_eval.pl <br> 
 42  if-unify  1115 ../canary/metta_eval.pl <br> 
 43  import!  1495 ../canary/metta_eval.pl <br> 
 44  include  1489 ../canary/metta_eval.pl <br> 
 45  include!  1485 ../canary/metta_eval.pl <br> 
 46  intersection  1938 ../canary/metta_eval.pl <br> 
 47  length  1369 ../canary/metta_eval.pl <br> 
 48  let*  536 ../canary/metta_eval.pl <br> 
 49  limit  1609 ../canary/metta_eval.pl <br> 
 50  limit!  1608 ../canary/metta_eval.pl <br> 
 51  load-ascii  1492 ../canary/metta_eval.pl <br> 
 52  load-file!  1498 ../canary/metta_eval.pl <br> 
 53  make_list  2021 ../canary/metta_eval.pl <br> 
 54  map-atom  415 ../canary/metta_eval.pl <br> 
 55  maplist!  1701 ../canary/metta_eval.pl <br> 
 56  max-time  1619 ../canary/metta_eval.pl <br> 
 57  max-time!  1618 ../canary/metta_eval.pl <br> 
 58  new-state  1217 ../canary/metta_eval.pl <br> 
 59  no-rtrace!  555 ../canary/metta_eval.pl <br> 
 60  number-of  1595 ../canary/metta_eval.pl <br> 
 61  offset  1614 ../canary/metta_eval.pl <br> 
 62  offset!  1613 ../canary/metta_eval.pl <br> 
 63  output-to-string  1459 ../canary/metta_eval.pl <br> 
 64  parse  1451 ../canary/metta_eval.pl <br> 
 65  pragma!  1514 ../canary/metta_eval.pl <br> 
 66  pred-intersection  1943 ../canary/metta_eval.pl <br> 
 67  pred-subtraction  1920 ../canary/metta_eval.pl <br> 
 68  pred-union  1930 ../canary/metta_eval.pl <br> 
 69  pred-unique  1910 ../canary/metta_eval.pl <br> 
 70  predicate-arity  1756 ../canary/metta_eval.pl <br> 
 71  print  564 ../canary/metta_eval.pl <br> 
 72  profile!  562 ../canary/metta_eval.pl <br> 
 73  py-dict  2079 ../canary/metta_eval.pl <br> 
 74  py-list  2077 ../canary/metta_eval.pl <br> 
 75  py-tuple  2081 ../canary/metta_eval.pl <br> 
 76  register-module!  1472 ../canary/metta_eval.pl <br> 
 77  repr  1455 ../canary/metta_eval.pl <br> 
 78  return  1581 ../canary/metta_eval.pl <br> 
 79  rtrace!  554 ../canary/metta_eval.pl <br> 
 80  rust  2070 ../canary/metta_eval.pl <br> 
 81  rust!  2074 ../canary/metta_eval.pl <br> 
 82  save-space!  1522 ../canary/metta_eval.pl <br> 
 83  sealed  736 ../canary/metta_eval.pl <br> 
 84  sequential  1017 ../canary/metta_eval.pl <br> 
 85  setup-call-cleanup!  1628 ../canary/metta_eval.pl <br> 
 86  stringtochars  1397 ../canary/metta_eval.pl <br> 
 87  subtraction  1915 ../canary/metta_eval.pl <br> 
 88  superpose-bind  989 ../canary/metta_eval.pl <br> 
 89  switch  907 ../canary/metta_eval.pl <br> 
 90  throw  1591 ../canary/metta_eval.pl <br> 
 91  time!  563 ../canary/metta_eval.pl <br> 
 92  trace  561 ../canary/metta_eval.pl <br> 
 93  trace!  556 ../canary/metta_eval.pl <br> 
 94  transfer!  1518 ../canary/metta_eval.pl <br> 
 95  type-cast  1324 ../canary/metta_eval.pl <br> 
 96  unify  805 ../canary/metta_eval.pl <br> 
 97  union  1925 ../canary/metta_eval.pl <br> 
 98  unique  1905 ../canary/metta_eval.pl <br> 
 99  with-output-to!  1634 ../canary/metta_eval.pl <br> 

  </div>
<h2> Tags identified </h2> pl_interp_tag <br>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >   1  %  588 ../canary/metta_interp.pl <br> 
 2  =  1461 ../canary/metta_interp.pl <br> 
 3  int_fa_format-args  507 ../canary/metta_interp.pl <br> 
 4  true  876 ../canary/metta_interp.pl <br> 

  </div>
<h2> Tags identified </h2> metta_tag <br>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >   1  "aswde"  11 ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta <br> 
 2  "success1"  48 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta <br> 
 3  $_  66 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 4  $actual-type  61 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 5  $head  20 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 6  $kb)  78 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 7  $ret)  113 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 8  $ructor  82 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 9  $rule  55 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 10  $type  70 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 11  $x  28 ../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta <br> 
 12  $x)  1 ../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta <br> 
 13  $y  29 ../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta <br> 
 14  %void%  36 ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta <br> 
 15  '  21 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta <br> 
 16  'x'  3 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta <br> 
 17  ($_  64 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 18  ($_type  83 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 19  ($meta  82 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 20  ($pattern  44 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 21  ($type  65 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 22  (%undefined%  63 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 23  ((->  84 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 24  ((:  81 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 25  ((false  78 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 26  ((just  5 ../../tests/baseline_compat/hyperon-mettalog_sanity/01_lang_inc.metta <br> 
 27  ((ss-p_as  34 ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta <br> 
 28  (12  72 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 29  (:  82 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 30  (=  29 ../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta <br> 
 31  (atom  81 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 32  (change-state!  4 ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta <br> 
 33  (f  193 ../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta <br> 
 34  (false  60 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 35  (foo  8 ../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta <br> 
 36  (inc)  8 ../../tests/baseline_compat/hyperon-mettalog_sanity/02-curried-plus.metta <br> 
 37  (nop  60 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta <br> 
 38  (plus  3 ../../tests/baseline_compat/hyperon-mettalog_sanity/02-curried-plus.metta <br> 
 39  (quote  14 ../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta <br> 
 40  (ss-q_as  35 ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta <br> 
 41  (superpose  1 ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta <br> 
 42  (true  66 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 43  )  14 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 44  ))  9 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta <br> 
 45  +  23 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 46  -  10 ../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta <br> 
 47  ->  7 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 48  /  32 ../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta <br> 
 49  0  43 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta <br> 
 50  1  2 ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta <br> 
 51  4  3 ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta <br> 
 52  7  5 ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta <br> 
 53  97%  13 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 54  :  7 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 55  <  43 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 56  =  8 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 57  ==  8 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 58  >  8 ../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta <br> 
 59  a  2 ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta <br> 
 60  add-atom  8 ../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta <br> 
 61  andlink  7 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 62  assertequal  6 ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta <br> 
 63  assertequaltoresult  31 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 64  assertequaltoresults  4 ../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta <br> 
 65  b  2 ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta <br> 
 66  bar  16 ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta <br> 
 67  bar)  24 ../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta <br> 
 68  bind!  2 ../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta <br> 
 69  call  95 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 70  callsealer  12 ../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta <br> 
 71  callsealer1  19 ../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta <br> 
 72  callsealer2  26 ../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta <br> 
 73  car  36 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 74  car-atom  146 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 75  case  33 ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta <br> 
 76  catch  58 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 77  cdr-atom  147 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 78  chain  12 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 79  charstostring  5 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta <br> 
 80  collapse  1 ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta <br> 
 81  conjunctioneliminationleft  9 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 82  conjunctioneliminationright  27 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 83  conjunctionintroduction  9 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 84  cons  107 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 85  d)  9 ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta <br> 
 86  decons  19 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 87  disjunctionintroduction  129 ../../tests/baseline_compat/hyperon-mettalog_sanity/synth_buffer/time_synthesize_short.metta <br> 
 88  error  46 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta <br> 
 89  eval  12 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 90  even  5 ../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta <br> 
 91  f1  228 ../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta <br> 
 92  false  52 ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta <br> 
 93  fd)  241 ../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta <br> 
 94  fib  5 ../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta <br> 
 95  fib1  12 ../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta <br> 
 96  findall!  19 ../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta <br> 
 97  first-few  143 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 98  foo  16 ../../tests/baseline_compat/hyperon-mettalog_sanity/subtraction_test.metta <br> 
 99  foo)  3 ../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta <br> 
 100  format-args  29 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta <br> 
 101  get-atoms  230 ../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta <br> 
 102  get-metatype  12 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 103  get-state  12 ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta <br> 
 104  get-type  60 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 105  hyperon's  6 ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta <br> 
 106  if  144 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 107  if-decons  17 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 108  if-empty  23 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 109  if-equal  13 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 110  if-error  26 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 111  if-non-empty-expression  11 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 112  implication  7 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 113  inc)  6 ../../tests/baseline_compat/hyperon-mettalog_sanity/02-curried-plus.metta <br> 
 114  inheritance  54 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 115  input  5 ../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta <br> 
 116  insert  16 ../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta <br> 
 117  interpret  77 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 118  interpret-args  105 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 119  interpret-args-tail  120 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 120  interpret-atom  124 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 121  interpret-expression  87 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 122  interpret-func  94 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 123  interpret-tuple  96 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 124  intersect  2 ../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta <br> 
 125  intersect-elements  223 ../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta <br> 
 126  intersection  4 ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta <br> 
 127  is-even  8 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 128  is-function  68 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 129  is-odd  17 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 130  is-space  4 ../../tests/baseline_compat/hyperon-mettalog_sanity/is_space.metta <br> 
 131  just  5 ../../tests/baseline_compat/hyperon-mettalog_sanity/01_lang_inc.metta <br> 
 132  kb)  121 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 133  kjh  16 ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta <br> 
 134  let  78 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 135  let*  81 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 136  limit  149 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 137  list  6 ../../tests/baseline_compat/hyperon-mettalog_sanity/03-soring-via-insert.metta <br> 
 138  list-to-set  4 ../../tests/baseline_compat/hyperon-mettalog_sanity/unique_test.metta <br> 
 139  make-space  228 ../../tests/baseline_compat/hyperon-mettalog_sanity/intersection_tests.metta <br> 
 140  maplist!  31 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 141  match  19 ../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta <br> 
 142  max-time!  58 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 143  maybe-inc  3 ../../tests/baseline_compat/hyperon-mettalog_sanity/01_lang_inc.metta <br> 
 144  mprogn  13 ../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta <br> 
 145  my-list)  48 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 146  my-list))  50 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 147  my-numbers  11 ../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta <br> 
 148  my-pairs  15 ../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta <br> 
 149  new-state  1 ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta <br> 
 150  not  10 ../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta <br> 
 151  nothing  6 ../../tests/baseline_compat/hyperon-mettalog_sanity/01_lang_inc.metta <br> 
 152  or  11 ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta <br> 
 153  orlink  8 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 154  output  8 ../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta <br> 
 155  p_as  34 ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta <br> 
 156  parse  14 ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta <br> 
 157  plus  6 ../../tests/baseline_compat/hyperon-mettalog_sanity/02-curried-plus.metta <br> 
 158  plus-ternary  23 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 159  pq  8 ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta <br> 
 160  pragma!  3 ../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta <br> 
 161  println!  20 ../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta <br> 
 162  q_as  35 ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta <br> 
 163  quote  7 ../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta <br> 
 164  rb)  127 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 165  recur-until-flip-false  10 ../../tests/baseline_compat/hyperon-mettalog_sanity/flip_test.metta <br> 
 166  recur-until-flip-true  2 ../../tests/baseline_compat/hyperon-mettalog_sanity/flip_test.metta <br> 
 167  reduce  52 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 168  rel-p  64 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta <br> 
 169  rel-q  67 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_case.metta <br> 
 170  repr  9 ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta <br> 
 171  return-on-error  31 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 172  s  80 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 173  sealed  1 ../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta <br> 
 174  set-evaluated))  11 ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta <br> 
 175  ss-p_as  5 ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta <br> 
 176  ss-q_as  6 ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta <br> 
 177  stringtochars  3 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta <br> 
 178  subst  47 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 179  superpose  1 ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta <br> 
 180  switch  41 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 181  switch-internal  44 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 182  synthesize  77 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 183  throw  10 ../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta <br> 
 184  true  78 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta <br> 
 185  type-cast  59 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta <br> 
 186  union  11 ../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta <br> 
 187  unique  154 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta <br> 
 188  variable  88 ../../tests/baseline_compat/hyperon-mettalog_sanity/space_intersection_tests.metta <br> 
 189  we  7 ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta <br> 
 190  xor  2 ../../tests/baseline_compat/hyperon-mettalog_sanity/xor_test.metta <br> 

  </div>
<h2> Tags identified </h2> metta_tag_extra <br>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >   1  bind!  1319 ../canary/stdlib_mettalog.metta <br> 
 2  bind!  1325 ../canary/stdlib_mettalog.metta <br> 
 3  car-atom  741 ../canary/stdlib_mettalog.metta <br> 
 4  car-atom  747 ../canary/stdlib_mettalog.metta <br> 
 5  case  32 ../canary/stdlib_mettalog.metta <br> 
 6  case  1271 ../canary/stdlib_mettalog.metta <br> 
 7  case  1277 ../canary/stdlib_mettalog.metta <br> 
 8  catch  1605 ../canary/stdlib_mettalog.metta <br> 
 9  catch  1612 ../canary/stdlib_mettalog.metta <br> 
 10  cdr-atom  754 ../canary/stdlib_mettalog.metta <br> 
 11  cdr-atom  759 ../canary/stdlib_mettalog.metta <br> 
 12  chain  103 ../canary/stdlib_mettalog.metta <br> 
 13  chain  110 ../canary/stdlib_mettalog.metta <br> 
 14  change-state!  1126 ../canary/stdlib_mettalog.metta <br> 
 15  change-state!  1132 ../canary/stdlib_mettalog.metta <br> 
 16  charstostring  716 ../canary/stdlib_mettalog.metta <br> 
 17  collapse  1253 ../canary/stdlib_mettalog.metta <br> 
 18  collapse  1258 ../canary/stdlib_mettalog.metta <br> 
 19  collapse-bind  157 ../canary/stdlib_mettalog.metta <br> 
 20  collapse-bind  163 ../canary/stdlib_mettalog.metta <br> 
 21  collapse-bind  164 ../canary/stdlib_mettalog.metta <br> 
 22  concurrent-maplist!  1581 ../canary/stdlib_mettalog.metta <br> 
 23  concurrent-maplist!  1592 ../canary/stdlib_mettalog.metta <br> 
 24  concurrent-maplist!  1593 ../canary/stdlib_mettalog.metta <br> 
 25  concurrent-maplist!  1594 ../canary/stdlib_mettalog.metta <br> 
 26  cons  18 ../canary/stdlib_mettalog.metta <br> 
 27  cons  136 ../canary/stdlib_mettalog.metta <br> 
 28  cons  144 ../canary/stdlib_mettalog.metta <br> 
 29  decons  19 ../canary/stdlib_mettalog.metta <br> 
 30  decons  154 ../canary/stdlib_mettalog.metta <br> 
 31  decons-atom  147 ../canary/stdlib_mettalog.metta <br> 
 32  decons-atom  152 ../canary/stdlib_mettalog.metta <br> 
 33  filter-atom  403 ../canary/stdlib_mettalog.metta <br> 
 34  filter-atom  410 ../canary/stdlib_mettalog.metta <br> 
 35  findall!  1556 ../canary/stdlib_mettalog.metta <br> 
 36  findall!  1563 ../canary/stdlib_mettalog.metta <br> 
 37  foldl-atom  439 ../canary/stdlib_mettalog.metta <br> 
 38  foldl-atom  448 ../canary/stdlib_mettalog.metta <br> 
 39  format-args  1348 ../canary/stdlib_mettalog.metta <br> 
 40  format-args  1354 ../canary/stdlib_mettalog.metta <br> 
 41  function  85 ../canary/stdlib_mettalog.metta <br> 
 42  function  90 ../canary/stdlib_mettalog.metta <br> 
 43  function-arity  27 ../canary/stdlib_mettalog.metta <br> 
 44  get-metatype  1167 ../canary/stdlib_mettalog.metta <br> 
 45  get-metatype  1172 ../canary/stdlib_mettalog.metta <br> 
 46  get-state  1136 ../canary/stdlib_mettalog.metta <br> 
 47  get-state  1141 ../canary/stdlib_mettalog.metta <br> 
 48  get-type  35 ../canary/stdlib_mettalog.metta <br> 
 49  get-type  1145 ../canary/stdlib_mettalog.metta <br> 
 50  get-type  1150 ../canary/stdlib_mettalog.metta <br> 
 51  get-type  1151 ../canary/stdlib_mettalog.metta <br> 
 52  get-type  1155 ../canary/stdlib_mettalog.metta <br> 
 53  get-type-space  1162 ../canary/stdlib_mettalog.metta <br> 
 54  if-equal  576 ../canary/stdlib_mettalog.metta <br> 
 55  if-unify  114 ../canary/stdlib_mettalog.metta <br> 
 56  if-unify  122 ../canary/stdlib_mettalog.metta <br> 
 57  import!  34 ../canary/stdlib_mettalog.metta <br> 
 58  import!  1300 ../canary/stdlib_mettalog.metta <br> 
 59  import!  1307 ../canary/stdlib_mettalog.metta <br> 
 60  include  1310 ../canary/stdlib_mettalog.metta <br> 
 61  include  1315 ../canary/stdlib_mettalog.metta <br> 
 62  intersection  1524 ../canary/stdlib_mettalog.metta <br> 
 63  intersection  1530 ../canary/stdlib_mettalog.metta <br> 
 64  let*  698 ../canary/stdlib_mettalog.metta <br> 
 65  let*  704 ../canary/stdlib_mettalog.metta <br> 
 66  map-atom  422 ../canary/stdlib_mettalog.metta <br> 
 67  map-atom  429 ../canary/stdlib_mettalog.metta <br> 
 68  maplist!  1566 ../canary/stdlib_mettalog.metta <br> 
 69  maplist!  1576 ../canary/stdlib_mettalog.metta <br> 
 70  maplist!  1577 ../canary/stdlib_mettalog.metta <br> 
 71  maplist!  1578 ../canary/stdlib_mettalog.metta <br> 
 72  new-state  1117 ../canary/stdlib_mettalog.metta <br> 
 73  new-state  1122 ../canary/stdlib_mettalog.metta <br> 
 74  parse  717 ../canary/stdlib_mettalog.metta <br> 
 75  pragma!  29 ../canary/stdlib_mettalog.metta <br> 
 76  pragma!  1290 ../canary/stdlib_mettalog.metta <br> 
 77  pragma!  1296 ../canary/stdlib_mettalog.metta <br> 
 78  predicate-arity  28 ../canary/stdlib_mettalog.metta <br> 
 79  print  1225 ../canary/stdlib_mettalog.metta <br> 
 80  print  1339 ../canary/stdlib_mettalog.metta <br> 
 81  py-list  1373 ../canary/stdlib_mettalog.metta <br> 
 82  py-list  1380 ../canary/stdlib_mettalog.metta <br> 
 83  register-module!  1201 ../canary/stdlib_mettalog.metta <br> 
 84  register-module!  1206 ../canary/stdlib_mettalog.metta <br> 
 85  repr  718 ../canary/stdlib_mettalog.metta <br> 
 86  return  21 ../canary/stdlib_mettalog.metta <br> 
 87  return  76 ../canary/stdlib_mettalog.metta <br> 
 88  return  81 ../canary/stdlib_mettalog.metta <br> 
 89  return  251 ../canary/stdlib_mettalog.metta <br> 
 90  sealed  1358 ../canary/stdlib_mettalog.metta <br> 
 91  sealed  1364 ../canary/stdlib_mettalog.metta <br> 
 92  stringtochars  715 ../canary/stdlib_mettalog.metta <br> 
 93  subtraction  1534 ../canary/stdlib_mettalog.metta <br> 
 94  subtraction  1540 ../canary/stdlib_mettalog.metta <br> 
 95  superpose-bind  168 ../canary/stdlib_mettalog.metta <br> 
 96  superpose-bind  174 ../canary/stdlib_mettalog.metta <br> 
 97  superpose-bind  175 ../canary/stdlib_mettalog.metta <br> 
 98  switch  22 ../canary/stdlib_mettalog.metta <br> 
 99  switch  274 ../canary/stdlib_mettalog.metta <br> 
 100  switch  282 ../canary/stdlib_mettalog.metta <br> 
 101  switch  290 ../canary/stdlib_mettalog.metta <br> 
 102  switch  297 ../canary/stdlib_mettalog.metta <br> 
 103  throw  1597 ../canary/stdlib_mettalog.metta <br> 
 104  throw  1602 ../canary/stdlib_mettalog.metta <br> 
 105  trace!  1329 ../canary/stdlib_mettalog.metta <br> 
 106  trace!  1335 ../canary/stdlib_mettalog.metta <br> 
 107  type-cast  336 ../canary/stdlib_mettalog.metta <br> 
 108  type-cast  343 ../canary/stdlib_mettalog.metta <br> 
 109  unify  23 ../canary/stdlib_mettalog.metta <br> 
 110  unify  1176 ../canary/stdlib_mettalog.metta <br> 
 111  unify  1184 ../canary/stdlib_mettalog.metta <br> 
 112  union  1514 ../canary/stdlib_mettalog.metta <br> 
 113  union  1520 ../canary/stdlib_mettalog.metta <br> 
 114  unique  1505 ../canary/stdlib_mettalog.metta <br> 
 115  unique  1510 ../canary/stdlib_mettalog.metta <br> 

  </div>
TAGS ONTOLOGY <br> 
1 case flow_control case selection.  conditional_execution<br>
2 let variable_assignment variable assignment. <br>
3 let* variable_assignment sequential variable assignment.  sequential<br>
4 sealed variable_scoping variable scoping. <br>
5 function function_definition function block. <br>
6 return function_definition return value of a function block.  return_value<br>
7 catch error_handling catches exceptions.  exception_handling<br>
8 throw error_handling throws exceptions.  exception_handling<br>
9 collapse data_structures collapses a structure.  manipulation<br>
10 sequential data_structures sequentially applies operations.  sequential_operations<br>
11 superpose data_structures superposes data structures.  manipulation<br>
12 repr data_structures represent an expression as string.  repr <br>
13 parse data_structures parse a string to an expression.  parse <br>
14 limit! iteration_control limits the number of iterations. <br>
15 offset! iteration_control adjusts the starting point of iteration. <br>
16 number-of iteration_control returns iteration count. <br>
17 nop iteration_control suppresses iteration result.  suppression<br>
18 pragma! compiler_directive compiler directive for optimizations/settings.  optimization<br>
19 include! code_inclusion includes code from another file or context. <br>
20 load-ascii file_handling loads ascii file content. <br>
21 extend-py! integration extends integration with python.  python<br>
22 import! module_import imports an external module or file. <br>
23 eval-for evaluation evaluates assuming a return type.  type_assumption<br>
24 call! dynamic_call tries to dynamically guess if predicate or function. <br>
25 predicate-arity function_definition defines the arity of predicates/functions.  arity<br>
26 call-fn! dynamic_call calls a function dynamically.  function<br>
27 call-string! evaluation evaluates a string of prolog code.  prolog_code<br>
28 match pattern_matching matches patterns within structures or data. <br>
29 get-atoms data_retrieval retrieves atoms from a structure. <br>
30 new-space memory_allocation allocates new space or memory region. <br>
31 remove-atom manipulation removes an atom from a structure. <br>
32 add-atom manipulation replaces an atom within a structure. <br>
33 transfer! memory_management transfers space content to another space. <br>
34 fromnumber type_conversion converts from a numeric type to another type. <br>
35 coerce type_conversion forces argument types for compatibility.  compatibility<br>
36 + arithmetic addition.  addition<br>
37 - arithmetic subtraction.  subtraction<br>
38 * arithmetic multiplication.  multiplication<br>
39 < comparison less than.  less_than<br>
40 >= comparison greater than or equal to.  greater_than_or_equal<br>
41 <= comparison less than or equal to.  less_than_or_equal<br>
42 > comparison greater than.  greater_than<br>
43 = logic equality/unification operator.  equality<br>
44 == logic equality test.  equality_test<br>
45 or logic logical or.  logical_or<br>
46 xor logic logical xor.  logical_xor<br>
47 and logic logical and.  logical_and<br>
48 not logic logical not.  logical_not<br>
49 time! execution_timing execution timing. <br>
50 trace! debugging prints some debug information.  information_printing<br>
51 no-rtrace! debugging disables tracing for debugging.  trace_control<br>
52 rtrace! debugging enables tracing for debugging.  trace_control<br>
53 println! output prints text with newline to output.  text_printing<br>
54 with-output-to! output redirects output to a specified target.  redirection<br>
55 print output prints text to output.  text_printing<br>
56 assertequal testing asserts a condition is true.  assertion<br>
57 assertequaltoresult testing asserts equality to a result.  assertion<br>
58 change-state! state_management changes the state of a system component.  system_integration<br>
59 get-state state_management gets the state of a component or system.  data_retrieval<br>
60 car-atom list_operations retrieves the head of a list.  head_retrieval<br>
61 cdr-atom list_operations retrieves the tail of a list.  tail_retrieval<br>
62 make_list list_operations creates a list with specified elements.  creation<br>
63 cons list_operations constructs a list.  construction<br>
64 length list_operations determines the length of a list.  length_determination<br>
65 countelement list_operations counts occurrences of an element.  element_counting<br>
66 unique nondet_sets makes nondet results unique.  no_repeats_var<br>
67 subtraction nondet_sets it subtracts elements generated by call2 from those generated by call1.  lazy_subtraction<br>
68 intersection nondet_sets it gives the intersection duplicates are not removed .  lazy_intersection<br>
69 union nondet_sets it gives the union of 2 list .  lazy_union <br>
70 stringtochars string_operations convert a string to a list of chars.  string_to_chars<br>
71 charstostring string_operations convert a list of chars to a string.  chars_to_string<br>
72 format-args string_operations generate a formatted string using a format specifier.  format_args<br>
73 flip random return a random boolean.  random_boolean<br>
<b> THESE  TAGS  have Tests  here </b> <hr> 
1 bind! 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/space_subtraction_tests.metta line : 2<br>
!(bind! &space31 (new-space))<br>
  2 car-atom 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta line : 146<br>
	  (car-atom $a) <br>
list_operations retrieves the head of a list.  head_retrieval3 case 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/06_match_in_space.metta line : 33<br>
!(assertEqual (case (match  &kb  ($rel B_AS $x) ($rel $x))<br>
flow_control case selection.  conditional_execution4 catch 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta line : 58<br>
!(assertEqualToResult (catch (max-time! 1 (concurrent-maplist! is-even (1 2 3))) <br>
error_handling catches exceptions.  exception_handling5 cdr-atom 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta line : 147<br>
      (let $t (cdr-atom $a) (superpose ((car-atom $a) (first-few (- $n 1) $t)))))))<br>
list_operations retrieves the tail of a list.  tail_retrieval6 chain 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta line : 12<br>
  (chain (eval (get-metatype $atom)) $type<br>
  7 charstostring 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta line : 5<br>
!(assertEqual (charsToString ('x' 'y' 'z' 'z' 'y')) "xyzzy")<br>
string_operations convert a list of chars to a string.  chars_to_string8 collapse 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta line : 1<br>
!(collapse (superpose ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))<br>
data_structures collapses a structure.  manipulation9 cons 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta line : 107<br>
              (cons $reduced-op $reduced-args) )))<br>
list_operations constructs a list.  construction10 decons 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta line : 19<br>
    (chain (decons $atom) $list<br>
  11 findall! 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/find_all_tests.metta line : 19<br>
!(assertEqualToResult (findall! $X (match &self (my-numbers $X) $X)) ((1 2 7 212)))<br>
  12 format-args 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta line : 29<br>
!(assertEqual (format-args "" (1 2 3)) "")<br>
string_operations generate a formatted string using a format specifier.  format_args13 get-metatype 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta line : 12<br>
  (chain (eval (get-metatype $atom)) $type<br>
  14 get-state 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta line : 12<br>
!(assertEqual (get-state &evaluated) False)<br>
state_management gets the state of a component or system.  data_retrieval15 get-type 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta line : 60<br>
  (chain (eval (get-type $atom $space)) $actual-type<br>
  16 if-equal 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta line : 13<br>
    (eval (if-equal $type Expression<br>
  17 intersection 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta line : 4<br>
!(assertEqualToResult (intersection (superpose (a b (+ 2 3 ) c)) (superpose (b c (+ 2 3) c c d))) (b 5 c))<br>
nondet_sets it gives the intersection duplicates are not removed .  lazy_intersection18 let* 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta line : 81<br>
   (let* (((: $ructor (-> $premise $conclusion)) ($rb))<br>
variable_assignment sequential variable assignment.  sequential19 limit 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta line : 149<br>
(= (limit $n $x) (let $a (collapse $x) (first-few $n $a)))<br>
  20 maplist! 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta line : 31<br>
!(assertEqualToResult (maplist! is-even (1 2 3)) ((False True False)))<br>
  21 max-time! 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta line : 58<br>
!(assertEqualToResult (catch (max-time! 1 (concurrent-maplist! is-even (1 2 3))) <br>
  22 new-state 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta line : 1<br>
!(bind! &evaluated (new-state False))<br>
  23 parse 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta line : 14<br>
!(parse "kjh")<br>
data_structures parse a string to an expression.  parse 24 pragma! 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta line : 3<br>
!(pragma! compile full)<br>
compiler_directive compiler directive for optimizations/settings.  optimization25 repr 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta line : 9<br>
!(repr aswde)<br>
data_structures represent an expression as string.  repr 26 sealed 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/sealed_test.metta line : 1<br>
!(assertEqualToResult (sealed ($x) (sealed ($a $b) (quote (= ($a $x $c) ($b))))) ((quote (= ($a $x $c) ($b)))))  <br>
variable_scoping variable scoping. 27 stringtochars 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta line : 3<br>
!(assertEqual (stringToChars "xyzzy") ('x' 'y' 'z' 'z' 'y'))<br>
string_operations convert a string to a list of chars.  string_to_chars28 switch 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta line : 41<br>
(= (switch $atom $cases)<br>
  29 throw 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta line : 10<br>
!(assertEqualToResult (catch (throw Error) Error "An exception was caught") ("An exception was caught"))<br>
error_handling throws exceptions.  exception_handling30 type-cast 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta line : 59<br>
(= (type-cast $atom $type $space)<br>
  31 union 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta line : 11<br>
; !(union (superpose (a b c d )) (superpose ( c d e f )))<br>
nondet_sets it gives the union of 2 list .  lazy_union 32 unique 0 ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta line : 154<br>
!(limit 6 (unique (synthesize (: $term $type) kb rb (S (S Z)))))<br>
nondet_sets makes nondet results unique.  no_repeats_var <br> <h2> <b> TAGS identified in current mettalog prolog-implementation interpreter</b> </h2> <hr> 
<br>
1 bind! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,_Depth,_Slf,['bind!',Other,['new-space']],RetVal):- atom(Other),!, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(bind! aq au ) <br> 
!(assertEqual (bind! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (bind! aq au )  ( result_with_type ))  <br> 
eval( "!(bind! aq au )"). <br>  
eval( "!(assertEqual (bind! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (bind! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(bind! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (bind! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (bind! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc bind! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  bind!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1319 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> bind!</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Registers a new token which is replaced with an atom during the parsing of the rest of the program"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Token name"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom, which is associated with the token after reduction"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unit atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  bind!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1325 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> bind!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Symbol %Undefined% <div class="tag_parenthesis2">&nbsp&nbsp(</div><div class="tag_arrow">-></div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
2 call! <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType1,_Depth,_Self,['call!',S], TF):- !, eval_call(S,TF). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(call! aq ) <br> 
!(assertEqual (call! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (call! aq )  ( result_with_type ))  <br> 
eval( "!(call! aq )"). <br>  
eval( "!(assertEqual (call! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (call! aq )  ( result_with_type ))" ).  <br>  
eval( "!(call! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (call! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (call! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc call! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
dynamic_call tries to dynamically guess if predicate or function. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
3 call-cleanup! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['call-cleanup!',NE,E],R):-  !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(call-cleanup! aq au ) <br> 
!(assertEqual (call-cleanup! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (call-cleanup! aq au )  ( result_with_type ))  <br> 
eval( "!(call-cleanup! aq au )"). <br>  
eval( "!(assertEqual (call-cleanup! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (call-cleanup! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(call-cleanup! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (call-cleanup! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (call-cleanup! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc call-cleanup! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
4 call-fn! <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType1,_Depth,_Self,['call-fn!',S], R):- !, eval_call_fn(S,R). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(call-fn! aq ) <br> 
!(assertEqual (call-fn! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (call-fn! aq )  ( result_with_type ))  <br> 
eval( "!(call-fn! aq )"). <br>  
eval( "!(assertEqual (call-fn! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (call-fn! aq )  ( result_with_type ))" ).  <br>  
eval( "!(call-fn! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (call-fn! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (call-fn! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc call-fn! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
dynamic_call calls a function dynamically.  function
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
5 call-fn-nth! <b> Arity: </b>2  <br> 
 eval_20(_Eq,_RetType1,_Depth,_Self,['call-fn-nth!',Nth,S], R):- <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(call-fn-nth! aq au ) <br> 
!(assertEqual (call-fn-nth! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (call-fn-nth! aq au )  ( result_with_type ))  <br> 
eval( "!(call-fn-nth! aq au )"). <br>  
eval( "!(assertEqual (call-fn-nth! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (call-fn-nth! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(call-fn-nth! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (call-fn-nth! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (call-fn-nth! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc call-fn-nth! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
6 call-string! <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['call-string!',Str],NoResult):- !,'call-string!'(Str,NoResult). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(call-string! aq ) <br> 
!(assertEqual (call-string! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (call-string! aq )  ( result_with_type ))  <br> 
eval( "!(call-string! aq )"). <br>  
eval( "!(assertEqual (call-string! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (call-string! aq )  ( result_with_type ))" ).  <br>  
eval( "!(call-string! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (call-string! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (call-string! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc call-string! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
evaluation evaluates a string of prolog code.  prolog_code
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
7 car-atom <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,_Dpth,_Slf,['car-atom',Atom],CAR_Y):- !, Atom=[CAR|_],!,do_expander(Eq,RetType,CAR,CAR_Y). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(car-atom aq ) <br> 
!(assertEqual (car-atom aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (car-atom aq )  ( result_with_type ))  <br> 
eval( "!(car-atom aq )"). <br>  
eval( "!(assertEqual (car-atom aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (car-atom aq )  ( result_with_type ))" ).  <br>  
eval( "!(car-atom (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (car-atom (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (car-atom (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc car-atom <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
list_operations retrieves the head of a list.  head_retrieval
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 741 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> car-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the first atom of an expression as a tuple"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "First atom of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 747 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> car-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  car-atom
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 147 <br> 
      (let $t (<div class="enlarged"> cdr-atom</div> $a) (superpose ((car-atom $a) (first-few (- $n 1) $t)))))))
 <br> 4 
<div class="big_tag"  >  car-atom
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta 107 <br> 
              (<div class="enlarged"> cons</div> $reduced-op $reduced-args) )))
 <br> 5 
<div class="big_tag"  >  car-atom
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 754 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cdr-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the tail of an expression <div class="tag_parenthesis2">&nbsp&nbsp(</div>all except first atom<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Tail of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  car-atom
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 759 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cdr-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  car-atom
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 18 <br> 

<div class="metta_clause"  >  ;<div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  car-atom
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 136 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cons</div>-atom<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Constructs an expression using two arguments"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Head of an expression"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Tail of an expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "New expression consists of two input arguments"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 9 
<div class="big_tag"  >  car-atom
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 144 <br> 

<div class="metta_clause"  >  ; AKA? <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
8 case <b> Arity: </b>3  <br> 
 eval_20(Eq,_RetType,Depth,Self,['case',A,[[Void,_]]],Res):- <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(case aq au as ) <br> 
!(assertEqual (case aq au as )  ( result_with_type ))  <br> 
!(assertEqualToResult (case aq au as )  ( result_with_type ))  <br> 
eval( "!(case aq au as )"). <br>  
eval( "!(assertEqual (case aq au as )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (case aq au as )  ( result_with_type ))" ).  <br>  
eval( "!(case (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )"). <br>  
eval( "!(assertEqual (case (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (case (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc case <br> (@desc "" )<br> (@return "") ) 
  </div>
flow_control case selection.  conditional_execution
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  case
</div>   Metta file: ../canary/stdlib_mettalog.metta 32 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> case</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  case
</div>   Metta file: ../canary/stdlib_mettalog.metta 1271 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> case</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Subsequently tests multiple pattern-matching conditions <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div> for the given value <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>it will be evaluated<div class="tag_parenthesis4">) &nbsp </div>"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Tuple of pairs mapping condition patterns to results"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of evaluating of Atom bound to met condition"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  case
</div>   Metta file: ../canary/stdlib_mettalog.metta 1277 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> case</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Expression Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
9 catch <b> Arity: </b>3  <br> 
 eval_20(Eq,RetType,Depth,Self,['catch',X,EX,Handler],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(catch aq au as ) <br> 
!(assertEqual (catch aq au as )  ( result_with_type ))  <br> 
!(assertEqualToResult (catch aq au as )  ( result_with_type ))  <br> 
eval( "!(catch aq au as )"). <br>  
eval( "!(assertEqual (catch aq au as )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (catch aq au as )  ( result_with_type ))" ).  <br>  
eval( "!(catch (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )"). <br>  
eval( "!(assertEqual (catch (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (catch (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc catch <br> (@desc "" )<br> (@return "") ) 
  </div>
error_handling catches exceptions.  exception_handling
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  catch
</div>   Metta file: ../canary/stdlib_mettalog.metta 1605 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> catch</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Executes Form. If an exception is raised with `throw` during execution of Form while this is the innermost catch such that Catcher unifies with Exception, the exception is caught. Recover is then executed with bindings from Catcher."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Form"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Catcher"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Recover"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of Form if no exception is raised. Result of Recover <div class="tag_parenthesis2">&nbsp&nbsp(</div>with bindings from Catcher<div class="tag_parenthesis2">) &nbsp </div> if an exception is caught."<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  catch
</div>   Metta file: ../canary/stdlib_mettalog.metta 1612 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> catch</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  catch
</div>   is similar to: 
<div class="big_tag"  >  throw
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/catch_throw_tests.metta 10 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqualToResult <div class="tag_parenthesis1">&nbsp(</div>catch <div class="tag_parenthesis2">&nbsp&nbsp(</div><div class="enlarged"> throw</div> Error<div class="tag_parenthesis2">) &nbsp </div> Error "An exception was caught"<div class="tag_parenthesis1">) &nbsp </div> <div class="tag_parenthesis1">&nbsp(</div>"An exception was caught"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  catch
</div>   is similar to: 
<div class="big_tag"  >  throw
</div>   Metta file: ../canary/stdlib_mettalog.metta 1597 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> throw</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Raises an exception. See also `catch`; the system will look for the innermost catch such that Exception unifies with Catcher."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Exception"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Does not return - raises an exception"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  catch
</div>   is similar to: 
<div class="big_tag"  >  throw
</div>   Metta file: ../canary/stdlib_mettalog.metta 1602 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> throw</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom ErrorType<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
10 cdr-atom <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,_Dpth,_Slf,['cdr-atom',Atom],CDR_Y):- !, Atom=[_|CDR],!,do_expander(Eq,RetType,CDR,CDR_Y). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(cdr-atom aq ) <br> 
!(assertEqual (cdr-atom aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (cdr-atom aq )  ( result_with_type ))  <br> 
eval( "!(cdr-atom aq )"). <br>  
eval( "!(assertEqual (cdr-atom aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (cdr-atom aq )  ( result_with_type ))" ).  <br>  
eval( "!(cdr-atom (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (cdr-atom (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (cdr-atom (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc cdr-atom <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
list_operations retrieves the tail of a list.  tail_retrieval
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 754 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cdr-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the tail of an expression <div class="tag_parenthesis2">&nbsp&nbsp(</div>all except first atom<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Tail of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 759 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cdr-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  cdr-atom
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 146 <br> 

<div class="metta_clause"  >  	  <div class="tag_parenthesis0">(</div><div class="enlarged"> car-atom</div> $a<div class="tag_parenthesis0">) &nbsp </div> 
</div>  
 <br> 4 
<div class="big_tag"  >  cdr-atom
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta 107 <br> 
              (<div class="enlarged"> cons</div> $reduced-op $reduced-args) )))
 <br> 5 
<div class="big_tag"  >  cdr-atom
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 741 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> car-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the first atom of an expression as a tuple"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "First atom of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  cdr-atom
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 747 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> car-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  cdr-atom
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 18 <br> 

<div class="metta_clause"  >  ;<div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  cdr-atom
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 136 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cons</div>-atom<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Constructs an expression using two arguments"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Head of an expression"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Tail of an expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "New expression consists of two input arguments"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 9 
<div class="big_tag"  >  cdr-atom
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 144 <br> 

<div class="metta_clause"  >  ; AKA? <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
11 chain <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['chain',Atom,Var|Y],Res):-  !,  eval_args(Eq,_RetType,Depth,Self,Atom,R), <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(chain aq au ) <br> 
!(assertEqual (chain aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (chain aq au )  ( result_with_type ))  <br> 
eval( "!(chain aq au )"). <br>  
eval( "!(assertEqual (chain aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (chain aq au )  ( result_with_type ))" ).  <br>  
eval( "!(chain (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (chain (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (chain (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc chain <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  chain
</div>   Metta file: ../canary/stdlib_mettalog.metta 103 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> chain</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Evaluates first argument, binds it to the variable <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div> and then evaluates third argument which contains <div class="tag_parenthesis2">&nbsp&nbsp(</div>or not<div class="tag_parenthesis2">) &nbsp </div> mentioned variable"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to be evaluated"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Variable"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom which will be evaluated at the end"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of evaluating third input argument"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  chain
</div>   Metta file: ../canary/stdlib_mettalog.metta 110 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> chain</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Variable Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
12 change-state! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['change-state!',StateExpr, UpdatedValue], Ret):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(change-state! aq au ) <br> 
!(assertEqual (change-state! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (change-state! aq au )  ( result_with_type ))  <br> 
eval( "!(change-state! aq au )"). <br>  
eval( "!(assertEqual (change-state! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (change-state! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(change-state! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (change-state! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (change-state! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc change-state! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
state_management changes the state of a system component.  system_integration
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  change-state!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1126 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> change-state!</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Changes input state's wrapped atom to another value <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div>. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>change-state! <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>State 5<div class="tag_parenthesis3">) &nbsp </div> 6<div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>State 6<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "State created by new-state function"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom which will replace wrapped atom in the input state"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "State with replaced wrapped atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  change-state!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1132 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> change-state!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>StateMonad $tcso<div class="tag_parenthesis2">) &nbsp </div> $tcso <div class="tag_parenthesis2">&nbsp&nbsp(</div>StateMonad $tcso<div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  change-state!
</div>   is similar to: 
<div class="big_tag"  >  get-state
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/or_test.metta 12 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqual <div class="tag_parenthesis1">&nbsp(</div><div class="enlarged"> get-state</div> &evaluated<div class="tag_parenthesis1">) &nbsp </div> False<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  change-state!
</div>   is similar to: 
<div class="big_tag"  >  get-state
</div>   Metta file: ../canary/stdlib_mettalog.metta 1136 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> get-state</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Gets a state as an argument and returns its wrapped atom. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>get-state <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>State 5<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> 5"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "State"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Atom wrapped by state"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  change-state!
</div>   is similar to: 
<div class="big_tag"  >  get-state
</div>   Metta file: ../canary/stdlib_mettalog.metta 1141 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> get-state</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>StateMonad $tgso<div class="tag_parenthesis2">) &nbsp </div> $tgso<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
13 charstostring <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['charsToString',Chars],String):- !, eval_args(Eq,RetType,Depth,Self,Chars,CC), maplist(as_metta_char,CC0,CC), string_chars(String,CC0). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(charstostring aq ) <br> 
!(assertEqual (charstostring aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (charstostring aq )  ( result_with_type ))  <br> 
eval( "!(charstostring aq )"). <br>  
eval( "!(assertEqual (charstostring aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (charstostring aq )  ( result_with_type ))" ).  <br>  
eval( "!(charstostring (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (charstostring (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (charstostring (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc charstostring <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
string_operations convert a list of chars to a string.  chars_to_string
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  charstostring
</div>   Metta file: ../canary/stdlib_mettalog.metta 716 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> charsToString <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression String<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2 
<div class="big_tag"  >  charstostring
</div>   is similar to: 
<div class="big_tag"  >  stringtochars
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta 3 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqual <div class="tag_parenthesis1">&nbsp(</div>stringToChars "xyzzy"<div class="tag_parenthesis1">) &nbsp </div> <div class="tag_parenthesis1">&nbsp(</div>'x' 'y' 'z' 'z' 'y'<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  charstostring
</div>   is similar to: 
<div class="big_tag"  >  format-args
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta 29 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqual <div class="tag_parenthesis1">&nbsp(</div><div class="enlarged"> format-args</div> "" <div class="tag_parenthesis2">&nbsp&nbsp(</div>1 2 3<div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div> ""<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  charstostring
</div>   is similar to: 
<div class="big_tag"  >  stringtochars
</div>   Metta file: ../canary/stdlib_mettalog.metta 715 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> stringToChars <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> String Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  charstostring
</div>   is similar to: 
<div class="big_tag"  >  format-args
</div>   Metta file: ../canary/stdlib_mettalog.metta 1348 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> format-args</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Fills {} symbols in the input expression with atoms from the second expression. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>format-args <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>Probability of {} is {}%<div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>head 50<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> gives [<div class="tag_parenthesis2">&nbsp&nbsp(</div>Probability of head is 50%<div class="tag_parenthesis2">) &nbsp </div>]. Atoms in the second input value could be variables"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression with {} symbols to be replaced"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atoms to be placed inside expression instead of {}"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Expression with replaced {} with atoms"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  charstostring
</div>   is similar to: 
<div class="big_tag"  >  format-args
</div>   Metta file: ../canary/stdlib_mettalog.metta 1354 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> format-args</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> String Atom String<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
14 coerce <b> Arity: </b>2  <br> 
 eval_20(=,Type,_,_,['coerce',Type,Value],Result):- !, coerce(Type,Value,Result). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(coerce aq au ) <br> 
!(assertEqual (coerce aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (coerce aq au )  ( result_with_type ))  <br> 
eval( "!(coerce aq au )"). <br>  
eval( "!(assertEqual (coerce aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (coerce aq au )  ( result_with_type ))" ).  <br>  
eval( "!(coerce (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (coerce (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (coerce (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc coerce <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
type_conversion forces argument types for compatibility.  compatibility
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
15 collapse <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['collapse',List],Res):-!, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(collapse aq ) <br> 
!(assertEqual (collapse aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (collapse aq )  ( result_with_type ))  <br> 
eval( "!(collapse aq )"). <br>  
eval( "!(assertEqual (collapse aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (collapse aq )  ( result_with_type ))" ).  <br>  
eval( "!(collapse (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (collapse (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (collapse (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc collapse <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
data_structures collapses a structure.  manipulation
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../canary/stdlib_mettalog.metta 1253 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> collapse</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Converts a nondeterministic result into a tuple"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom which will be evaluated"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Tuple"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../canary/stdlib_mettalog.metta 1258 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> collapse</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  collapse
</div>   is similar to: 
<div class="big_tag"  >  superpose
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta 1 <br> 
!(collapse (<div class="enlarged"> superpose</div> ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))
 <br> 4 
<div class="big_tag"  >  collapse
</div>   is similar to: 
<div class="big_tag"  >  repr
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta 9 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div><div class="enlarged"> repr</div> aswde<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  collapse
</div>   is similar to: 
<div class="big_tag"  >  parse
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta 14 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div><div class="enlarged"> parse</div> "kjh"<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  collapse
</div>   is similar to: 
<div class="big_tag"  >  repr
</div>   Metta file: ../canary/stdlib_mettalog.metta 718 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> repr</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom String<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  collapse
</div>   is similar to: 
<div class="big_tag"  >  parse
</div>   Metta file: ../canary/stdlib_mettalog.metta 717 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> parse</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> String Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
16 collapse-bind <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['collapse-bind',List],Res):-!, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(collapse-bind aq ) <br> 
!(assertEqual (collapse-bind aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (collapse-bind aq )  ( result_with_type ))  <br> 
eval( "!(collapse-bind aq )"). <br>  
eval( "!(assertEqual (collapse-bind aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (collapse-bind aq )  ( result_with_type ))" ).  <br>  
eval( "!(collapse-bind (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (collapse-bind (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (collapse-bind (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc collapse-bind <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  collapse-bind
</div>   Metta file: ../canary/stdlib_mettalog.metta 157 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> collapse-bind</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Evaluates the Atom <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div> and returns an expression which contains all alternative evaluations in a form <div class="tag_parenthesis2">&nbsp&nbsp(</div>Atom Bindings<div class="tag_parenthesis2">) &nbsp </div>. Bindings are represented in a form of a grounded atom."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to be evaluated"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "All alternative evaluations"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  collapse-bind
</div>   Metta file: ../canary/stdlib_mettalog.metta 163 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> collapse-bind</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div> ; We specialize but leaving the old defs in case
</div>  
 <br> 3  function: 
<div class="big_tag"  >  collapse-bind
</div>   Metta file: ../canary/stdlib_mettalog.metta 164 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> collapse-bind</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
17 compile! <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['compile!',Space],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(compile! aq ) <br> 
!(assertEqual (compile! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (compile! aq )  ( result_with_type ))  <br> 
eval( "!(compile! aq )"). <br>  
eval( "!(assertEqual (compile! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (compile! aq )  ( result_with_type ))" ).  <br>  
eval( "!(compile! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (compile! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (compile! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc compile! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
18 compile-space! <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['compile-space!',Space],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(compile-space! aq ) <br> 
!(assertEqual (compile-space! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (compile-space! aq )  ( result_with_type ))  <br> 
eval( "!(compile-space! aq )"). <br>  
eval( "!(assertEqual (compile-space! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (compile-space! aq )  ( result_with_type ))" ).  <br>  
eval( "!(compile-space! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (compile-space! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (compile-space! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc compile-space! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
19 concurrent-forall! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['concurrent-forall!',Gen,Test|Options],NoResult):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(concurrent-forall! aq au ) <br> 
!(assertEqual (concurrent-forall! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (concurrent-forall! aq au )  ( result_with_type ))  <br> 
eval( "!(concurrent-forall! aq au )"). <br>  
eval( "!(assertEqual (concurrent-forall! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (concurrent-forall! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(concurrent-forall! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (concurrent-forall! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (concurrent-forall! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc concurrent-forall! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
20 concurrent-maplist! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['concurrent-maplist!',Pred,ArgL1],ResL):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(concurrent-maplist! aq au ) <br> 
!(assertEqual (concurrent-maplist! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (concurrent-maplist! aq au )  ( result_with_type ))  <br> 
eval( "!(concurrent-maplist! aq au )"). <br>  
eval( "!(assertEqual (concurrent-maplist! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (concurrent-maplist! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(concurrent-maplist! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (concurrent-maplist! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (concurrent-maplist! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc concurrent-maplist! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  concurrent-maplist!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1581 <br> 
(@doc <div class="enlarged"> concurrent-maplist!</div>
  (@desc "Takes a function F and one to three lists; Returns the result of applying F to each item in the list(s). 
 The provided lists are not evaluated (this matches the behavior of e.g. cons-atom).
 F must have the number of lists provided as a valid arity (i.e. unary for one list, binary for two, ternary for three).
 The applications of F to the list items are processed in parallel. Because of the overhead of this approach, a speedup is only likely if F is expensive to evaluate.
 Use maplist! for a single-threaded, deterministic version.
 See Prolog's built-in predicate concurrent-maplist.")
  (@params (
    (@param "Function to be applied")
 <br> 2  function: 
<div class="big_tag"  >  concurrent-maplist!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1592 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> concurrent-maplist!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Function Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  concurrent-maplist!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1593 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> concurrent-maplist!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Function Expression Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4  function: 
<div class="big_tag"  >  concurrent-maplist!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1594 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> concurrent-maplist!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Function Expression Expression Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
21 cons <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['Cons', A, B ],['Cons', AA, BB]):- no_cons_reduce, !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(cons aq au ) <br> 
!(assertEqual (cons aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (cons aq au )  ( result_with_type ))  <br> 
eval( "!(cons aq au )"). <br>  
eval( "!(assertEqual (cons aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (cons aq au )  ( result_with_type ))" ).  <br>  
eval( "!(cons (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (cons (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (cons (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc cons <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
list_operations constructs a list.  construction
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 18 <br> 

<div class="metta_clause"  >  ;<div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 136 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cons</div>-atom<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Constructs an expression using two arguments"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Head of an expression"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Tail of an expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "New expression consists of two input arguments"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 144 <br> 

<div class="metta_clause"  >  ; AKA? <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  cons
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 146 <br> 

<div class="metta_clause"  >  	  <div class="tag_parenthesis0">(</div><div class="enlarged"> car-atom</div> $a<div class="tag_parenthesis0">) &nbsp </div> 
</div>  
 <br> 5 
<div class="big_tag"  >  cons
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 147 <br> 
      (let $t (<div class="enlarged"> cdr-atom</div> $a) (superpose ((car-atom $a) (first-few (- $n 1) $t)))))))
 <br> 6 
<div class="big_tag"  >  cons
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 741 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> car-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the first atom of an expression as a tuple"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "First atom of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  cons
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 747 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> car-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  cons
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 754 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cdr-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the tail of an expression <div class="tag_parenthesis2">&nbsp&nbsp(</div>all except first atom<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Tail of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 9 
<div class="big_tag"  >  cons
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 759 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cdr-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
22 countelement <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['CountElement',L],Res):- !, eval_args(Eq,RetType,Depth,Self,L,LL), !, (is_list(LL)->length(LL,Res);Res=1). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(countelement aq ) <br> 
!(assertEqual (countelement aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (countelement aq )  ( result_with_type ))  <br> 
eval( "!(countelement aq )"). <br>  
eval( "!(assertEqual (countelement aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (countelement aq )  ( result_with_type ))" ).  <br>  
eval( "!(countelement (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (countelement (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (countelement (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc countelement <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
list_operations counts occurrences of an element.  element_counting
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1 
<div class="big_tag"  >  countelement
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 146 <br> 

<div class="metta_clause"  >  	  <div class="tag_parenthesis0">(</div><div class="enlarged"> car-atom</div> $a<div class="tag_parenthesis0">) &nbsp </div> 
</div>  
 <br> 2 
<div class="big_tag"  >  countelement
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 147 <br> 
      (let $t (<div class="enlarged"> cdr-atom</div> $a) (superpose ((car-atom $a) (first-few (- $n 1) $t)))))))
 <br> 3 
<div class="big_tag"  >  countelement
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta 107 <br> 
              (<div class="enlarged"> cons</div> $reduced-op $reduced-args) )))
 <br> 4 
<div class="big_tag"  >  countelement
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 741 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> car-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the first atom of an expression as a tuple"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "First atom of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  countelement
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 747 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> car-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  countelement
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 754 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cdr-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the tail of an expression <div class="tag_parenthesis2">&nbsp&nbsp(</div>all except first atom<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Tail of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  countelement
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 759 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cdr-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  countelement
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 18 <br> 

<div class="metta_clause"  >  ;<div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 9 
<div class="big_tag"  >  countelement
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 136 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cons</div>-atom<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Constructs an expression using two arguments"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Head of an expression"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Tail of an expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "New expression consists of two input arguments"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
23 decons <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['decons',OneArg],[H,T]):- !, must_unify(OneArg,[H|T]). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(decons aq ) <br> 
!(assertEqual (decons aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (decons aq )  ( result_with_type ))  <br> 
eval( "!(decons aq )"). <br>  
eval( "!(assertEqual (decons aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (decons aq )  ( result_with_type ))" ).  <br>  
eval( "!(decons (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (decons (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (decons (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc decons <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  decons
</div>   Metta file: ../canary/stdlib_mettalog.metta 19 <br> 

<div class="metta_clause"  >  ;<div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> decons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  decons
</div>   Metta file: ../canary/stdlib_mettalog.metta 154 <br> 

<div class="metta_clause"  >  ; AKA? <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> decons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
24 decons-atom <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['decons-atom',OneArg],[H,T]):- !, must_unify(OneArg,[H|T]). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(decons-atom aq ) <br> 
!(assertEqual (decons-atom aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (decons-atom aq )  ( result_with_type ))  <br> 
eval( "!(decons-atom aq )"). <br>  
eval( "!(assertEqual (decons-atom aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (decons-atom aq )  ( result_with_type ))" ).  <br>  
eval( "!(decons-atom (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (decons-atom (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (decons-atom (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc decons-atom <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  decons-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 147 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> decons-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Works as a reverse to cons-atom function. It gets Expression as an input and returns it splitted to head and tail, e.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>decons-atom <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>Cons X Nil<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>Cons <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>X Nil<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Deconsed expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  decons-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 152 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> decons-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
25 echo <b> Arity: </b>1  <br> 
 eval_20(_,_,_,_,['echo',Value],Value):- !. <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(echo aq ) <br> 
!(assertEqual (echo aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (echo aq )  ( result_with_type ))  <br> 
eval( "!(echo aq )"). <br>  
eval( "!(assertEqual (echo aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (echo aq )  ( result_with_type ))" ).  <br>  
eval( "!(echo (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (echo (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (echo (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc echo <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
26 eval-for <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['eval-for',Type,X],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(eval-for aq au ) <br> 
!(assertEqual (eval-for aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (eval-for aq au )  ( result_with_type ))  <br> 
eval( "!(eval-for aq au )"). <br>  
eval( "!(assertEqual (eval-for aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (eval-for aq au )  ( result_with_type ))" ).  <br>  
eval( "!(eval-for (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (eval-for (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (eval-for (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc eval-for <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
evaluation evaluates assuming a return type.  type_assumption
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
27 extend-py! <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Dpth,_Slf,['extend-py!',Module],Res):-  !, 'extend-py!'(Module,Res). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(extend-py! aq ) <br> 
!(assertEqual (extend-py! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (extend-py! aq )  ( result_with_type ))  <br> 
eval( "!(extend-py! aq )"). <br>  
eval( "!(assertEqual (extend-py! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (extend-py! aq )  ( result_with_type ))" ).  <br>  
eval( "!(extend-py! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (extend-py! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (extend-py! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc extend-py! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
integration extends integration with python.  python
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
28 filter-atom <b> Arity: </b>3  <br> 
 eval_20(Eq,RetType,Depth,Self,['filter-atom',List,Var,Pred],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(filter-atom aq au as ) <br> 
!(assertEqual (filter-atom aq au as )  ( result_with_type ))  <br> 
!(assertEqualToResult (filter-atom aq au as )  ( result_with_type ))  <br> 
eval( "!(filter-atom aq au as )"). <br>  
eval( "!(assertEqual (filter-atom aq au as )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (filter-atom aq au as )  ( result_with_type ))" ).  <br>  
eval( "!(filter-atom (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )"). <br>  
eval( "!(assertEqual (filter-atom (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (filter-atom (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc filter-atom <br> (@desc "" )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  filter-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 403 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> filter-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes list of atoms <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div>, variable <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div> and filter predicate <div class="tag_parenthesis2">&nbsp&nbsp(</div>third argument<div class="tag_parenthesis2">) &nbsp </div> and returns list with items which passed filter. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>filter-atom <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>1 2 3 4<div class="tag_parenthesis3">) &nbsp </div> $v <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>eval <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>> $v 2<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> will give <div class="tag_parenthesis2">&nbsp&nbsp(</div>3 4<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "List of atoms"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Variable"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Filter predicate"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Filtered list"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  filter-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 410 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> filter-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Variable Atom Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
29 findall! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['findall!',Template,X],ResL):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(findall! aq au ) <br> 
!(assertEqual (findall! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (findall! aq au )  ( result_with_type ))  <br> 
eval( "!(findall! aq au )"). <br>  
eval( "!(assertEqual (findall! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (findall! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(findall! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (findall! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (findall! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc findall! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  findall!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1556 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> findall!</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Takes a Template and a Goal. Returns the list resulting from substituting all bindings from solving Goal into Template.<br>  See Prolog's built-in predicate findall/3."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Template"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Goal"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result list of all bindings for Goal substituted into Template"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  findall!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1563 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> findall!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
30 foldl-atom <b> Arity: </b>5  <br> 
 eval_20(Eq,RetType,Depth,Self,['foldl-atom',List,Init,A,B,Eval],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(foldl-atom  ) <br> 
!(assertEqual (foldl-atom  )  ( result_with_type ))  <br> 
!(assertEqualToResult (foldl-atom  )  ( result_with_type ))  <br> 
eval( "!(foldl-atom  )"). <br>  
eval( "!(assertEqual (foldl-atom  )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (foldl-atom  )  ( result_with_type ))" ).  <br>  
eval( "!(foldl-atom  )"). <br>  
eval( "!(assertEqual (foldl-atom  )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (foldl-atom  )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc foldl-atom <br> (@desc "" )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  foldl-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 439 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> foldl-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes list of values <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div>, initial value <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div> and operation <div class="tag_parenthesis2">&nbsp&nbsp(</div>fifth argument<div class="tag_parenthesis2">) &nbsp </div> and applies it consequently to the list of values, using init value as a start. It also takes two variables <div class="tag_parenthesis2">&nbsp&nbsp(</div>third and fourth argument<div class="tag_parenthesis2">) &nbsp </div> to use them inside"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "List of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Init value"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Variable"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Variable"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Operation"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of applying operation to the list of values"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  foldl-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 448 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> foldl-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom Variable Variable Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
31 format-args <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['format-args',Format,Args],Result):- <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(format-args aq au ) <br> 
!(assertEqual (format-args aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (format-args aq au )  ( result_with_type ))  <br> 
eval( "!(format-args aq au )"). <br>  
eval( "!(assertEqual (format-args aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (format-args aq au )  ( result_with_type ))" ).  <br>  
eval( "!(format-args (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (format-args (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (format-args (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc format-args <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
string_operations generate a formatted string using a format specifier.  format_args
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  format-args
</div>   Metta file: ../canary/stdlib_mettalog.metta 1348 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> format-args</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Fills {} symbols in the input expression with atoms from the second expression. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>format-args <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>Probability of {} is {}%<div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>head 50<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> gives [<div class="tag_parenthesis2">&nbsp&nbsp(</div>Probability of head is 50%<div class="tag_parenthesis2">) &nbsp </div>]. Atoms in the second input value could be variables"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression with {} symbols to be replaced"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atoms to be placed inside expression instead of {}"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Expression with replaced {} with atoms"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  format-args
</div>   Metta file: ../canary/stdlib_mettalog.metta 1354 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> format-args</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> String Atom String<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  format-args
</div>   is similar to: 
<div class="big_tag"  >  stringtochars
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta 3 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqual <div class="tag_parenthesis1">&nbsp(</div>stringToChars "xyzzy"<div class="tag_parenthesis1">) &nbsp </div> <div class="tag_parenthesis1">&nbsp(</div>'x' 'y' 'z' 'z' 'y'<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  format-args
</div>   is similar to: 
<div class="big_tag"  >  charstostring
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta 5 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqual <div class="tag_parenthesis1">&nbsp(</div>charsToString <div class="tag_parenthesis2">&nbsp&nbsp(</div>'x' 'y' 'z' 'z' 'y'<div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div> "xyzzy"<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  format-args
</div>   is similar to: 
<div class="big_tag"  >  stringtochars
</div>   Metta file: ../canary/stdlib_mettalog.metta 715 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> stringToChars <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> String Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  format-args
</div>   is similar to: 
<div class="big_tag"  >  charstostring
</div>   Metta file: ../canary/stdlib_mettalog.metta 716 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> charsToString <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression String<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
32 fromnumber <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['fromNumber',NE],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(fromnumber aq ) <br> 
!(assertEqual (fromnumber aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (fromnumber aq )  ( result_with_type ))  <br> 
eval( "!(fromnumber aq )"). <br>  
eval( "!(assertEqual (fromnumber aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (fromnumber aq )  ( result_with_type ))" ).  <br>  
eval( "!(fromnumber (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (fromnumber (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (fromnumber (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc fromnumber <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
type_conversion converts from a numeric type to another type. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
33 function <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['function',X],Res):- !, gensym(return_,RetF), <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(function aq ) <br> 
!(assertEqual (function aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (function aq )  ( result_with_type ))  <br> 
eval( "!(function aq )"). <br>  
eval( "!(assertEqual (function aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (function aq )  ( result_with_type ))" ).  <br>  
eval( "!(function (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (function (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (function (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc function <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
function_definition function block. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  function
</div>   Metta file: ../canary/stdlib_mettalog.metta 85 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> function</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Evaluates the argument until it becomes <div class="tag_parenthesis2">&nbsp&nbsp(</div>return <result><div class="tag_parenthesis2">) &nbsp </div>. Then <div class="tag_parenthesis2">&nbsp&nbsp(</div>function <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>return <result><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> is reduced to the <result>."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to be evaluated"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of atom's evaluation"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  function
</div>   Metta file: ../canary/stdlib_mettalog.metta 90 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> function</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  function
</div>   is similar to: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 21 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> return</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom ReturnType<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  function
</div>   is similar to: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 76 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> return</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Returns value from the <div class="tag_parenthesis2">&nbsp&nbsp(</div>function ...<div class="tag_parenthesis2">) &nbsp </div> expression"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Value to be returned"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Passed argument"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  function
</div>   is similar to: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 81 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> return</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> $t $t<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  function
</div>   is similar to: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 251 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> return</div>-on-error<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Returns first argument if it is Empty or an error. Returns second argument otherwise."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Previous evaluation result"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom for further evaluation"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Return previous result if it is an error or Empty or continue evaluation"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  function
</div>   is similar to: 
<div class="big_tag"  >  predicate-arity
</div>   Metta file: ../canary/stdlib_mettalog.metta 28 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> predicate-arity</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Symbol Number<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
34 function-arity <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Dpth,_Slf,['function-arity',F],A):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(function-arity aq ) <br> 
!(assertEqual (function-arity aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (function-arity aq )  ( result_with_type ))  <br> 
eval( "!(function-arity aq )"). <br>  
eval( "!(assertEqual (function-arity aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (function-arity aq )  ( result_with_type ))" ).  <br>  
eval( "!(function-arity (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (function-arity (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (function-arity (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc function-arity <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  function-arity
</div>   Metta file: ../canary/stdlib_mettalog.metta 27 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> function-arity</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Symbol Number<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
35 get-metatype <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['get-metatype',Val],TypeO):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(get-metatype aq ) <br> 
!(assertEqual (get-metatype aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (get-metatype aq )  ( result_with_type ))  <br> 
eval( "!(get-metatype aq )"). <br>  
eval( "!(assertEqual (get-metatype aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (get-metatype aq )  ( result_with_type ))" ).  <br>  
eval( "!(get-metatype (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (get-metatype (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (get-metatype (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc get-metatype <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  get-metatype
</div>   Metta file: ../canary/stdlib_mettalog.metta 1167 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> get-metatype</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Returns metatype of the input atom"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to get metatype for"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Metatype of input atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  get-metatype
</div>   Metta file: ../canary/stdlib_mettalog.metta 1172 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> get-metatype</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
36 get-state <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['get-state',StateExpr],Value):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(get-state aq ) <br> 
!(assertEqual (get-state aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (get-state aq )  ( result_with_type ))  <br> 
eval( "!(get-state aq )"). <br>  
eval( "!(assertEqual (get-state aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (get-state aq )  ( result_with_type ))" ).  <br>  
eval( "!(get-state (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (get-state (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (get-state (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc get-state <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
state_management gets the state of a component or system.  data_retrieval
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  get-state
</div>   Metta file: ../canary/stdlib_mettalog.metta 1136 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> get-state</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Gets a state as an argument and returns its wrapped atom. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>get-state <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>State 5<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> 5"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "State"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Atom wrapped by state"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  get-state
</div>   Metta file: ../canary/stdlib_mettalog.metta 1141 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> get-state</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>StateMonad $tgso<div class="tag_parenthesis2">) &nbsp </div> $tgso<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  get-state
</div>   is similar to: 
<div class="big_tag"  >  change-state!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1126 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> change-state!</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Changes input state's wrapped atom to another value <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div>. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>change-state! <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>State 5<div class="tag_parenthesis3">) &nbsp </div> 6<div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>State 6<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "State created by new-state function"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom which will replace wrapped atom in the input state"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "State with replaced wrapped atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  get-state
</div>   is similar to: 
<div class="big_tag"  >  change-state!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1132 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> change-state!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>StateMonad $tcso<div class="tag_parenthesis2">) &nbsp </div> $tcso <div class="tag_parenthesis2">&nbsp&nbsp(</div>StateMonad $tcso<div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
37 get-type <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['get-type',Val,Self],Type):- current_self(Self), !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(get-type aq au ) <br> 
!(assertEqual (get-type aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (get-type aq au )  ( result_with_type ))  <br> 
eval( "!(get-type aq au )"). <br>  
eval( "!(assertEqual (get-type aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (get-type aq au )  ( result_with_type ))" ).  <br>  
eval( "!(get-type (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (get-type (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (get-type (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc get-type <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  get-type
</div>   Metta file: ../canary/stdlib_mettalog.metta 35 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> get-type</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Type<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  get-type
</div>   Metta file: ../canary/stdlib_mettalog.metta 1145 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> get-type</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Returns type notation of input atom"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to get type for"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Type notation or %Undefined% if there is no type for input Atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  get-type
</div>   Metta file: ../canary/stdlib_mettalog.metta 1150 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> get-type</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4  function: 
<div class="big_tag"  >  get-type
</div>   Metta file: ../canary/stdlib_mettalog.metta 1151 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> get-type</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5  function: 
<div class="big_tag"  >  get-type
</div>   Metta file: ../canary/stdlib_mettalog.metta 1155 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> get-type</div>-space<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Returns type notation of input Atom <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div> relative to a specified atomspace <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atomspace where type notation for input atom will be searched"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to get type for"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Type notation or %Undefined% if there is no type for input Atom in provided atomspace"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
38 get-type-space <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['get-type-space',Other,Val],Type):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(get-type-space aq au ) <br> 
!(assertEqual (get-type-space aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (get-type-space aq au )  ( result_with_type ))  <br> 
eval( "!(get-type-space aq au )"). <br>  
eval( "!(assertEqual (get-type-space aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (get-type-space aq au )  ( result_with_type ))" ).  <br>  
eval( "!(get-type-space (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (get-type-space (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (get-type-space (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc get-type-space <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  get-type-space
</div>   Metta file: ../canary/stdlib_mettalog.metta 1162 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> get-type-space</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
39 get-types <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,Depth,Self,['get-types',Val],TypeO):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(get-types aq ) <br> 
!(assertEqual (get-types aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (get-types aq )  ( result_with_type ))  <br> 
eval( "!(get-types aq )"). <br>  
eval( "!(assertEqual (get-types aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (get-types aq )  ( result_with_type ))" ).  <br>  
eval( "!(get-types (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (get-types (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (get-types (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc get-types <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
40 hyperpose <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['hyperpose',ArgL],Res):- !, metta_hyperpose(Eq,RetType,Depth,Self,ArgL,Res). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(hyperpose aq ) <br> 
!(assertEqual (hyperpose aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (hyperpose aq )  ( result_with_type ))  <br> 
eval( "!(hyperpose aq )"). <br>  
eval( "!(assertEqual (hyperpose aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (hyperpose aq )  ( result_with_type ))" ).  <br>  
eval( "!(hyperpose (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (hyperpose (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (hyperpose (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc hyperpose <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
41 if-equal <b> Arity: </b>4  <br> 
 eval_20(Eq,RetType,Depth,Self,['if-equal',X,Y,Then,Else],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(if-equal aq au as at ) <br> 
!(assertEqual (if-equal aq au as at )  ( result_with_type ))  <br> 
!(assertEqualToResult (if-equal aq au as at )  ( result_with_type ))  <br> 
eval( "!(if-equal aq au as at )"). <br>  
eval( "!(assertEqual (if-equal aq au as at )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (if-equal aq au as at )  ( result_with_type ))" ).  <br>  
eval( "!(if-equal (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) (superpose (g h i)) )"). <br>  
eval( "!(assertEqual (if-equal (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) (superpose (g h i)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (if-equal (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) (superpose (g h i)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc if-equal <br> (@desc "" )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  if-equal
</div>   Metta file: ../canary/stdlib_mettalog.metta 576 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> if-equal</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Checks if first two arguments are equal and evaluates third argument if equal, fourth argument - otherwise"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "First argument"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Second argument"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to be evaluated if arguments are equal"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to be evaluated if arguments are not equal"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Evaluated third or fourth argument"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
42 if-unify <b> Arity: </b>4  <br> 
 eval_20(Eq,RetType,Depth,Self,['if-unify',X,Y,Then,Else],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(if-unify aq au as at ) <br> 
!(assertEqual (if-unify aq au as at )  ( result_with_type ))  <br> 
!(assertEqualToResult (if-unify aq au as at )  ( result_with_type ))  <br> 
eval( "!(if-unify aq au as at )"). <br>  
eval( "!(assertEqual (if-unify aq au as at )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (if-unify aq au as at )  ( result_with_type ))" ).  <br>  
eval( "!(if-unify (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) (superpose (g h i)) )"). <br>  
eval( "!(assertEqual (if-unify (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) (superpose (g h i)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (if-unify (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) (superpose (g h i)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc if-unify <br> (@desc "" )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  if-unify
</div>   Metta file: ../canary/stdlib_mettalog.metta 114 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> if-unify</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Matches two first arguments and returns third argument if they are matched and forth argument otherwise"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>	<div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "First atom to unify with"<div class="tag_parenthesis3">) &nbsp </div><br>	<div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Second atom to unify with"<div class="tag_parenthesis3">) &nbsp </div><br>	<div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Result if two atoms unified successfully"<div class="tag_parenthesis3">) &nbsp </div><br>	<div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Result otherwise"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Third argument when first two atoms are unifiable or forth one otherwise"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  if-unify
</div>   Metta file: ../canary/stdlib_mettalog.metta 122 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> if-unify</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom Atom %Undefined%<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
43 import! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['import!',Other,File],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(import! aq au ) <br> 
!(assertEqual (import! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (import! aq au )  ( result_with_type ))  <br> 
eval( "!(import! aq au )"). <br>  
eval( "!(assertEqual (import! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (import! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(import! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (import! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (import! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc import! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
module_import imports an external module or file. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  import!
</div>   Metta file: ../canary/stdlib_mettalog.metta 34 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> import!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> hyperon::space::DynSpace Atom <div class="tag_parenthesis2">&nbsp&nbsp(</div><div class="tag_arrow">-></div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  import!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1300 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> import!</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Imports module using its relative path <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div> and binds it to the token <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div> which will represent imported atomspace. If first argument is &self then everything will be imported to current atomspace"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Symbol, which is turned into the token for accessing the imported module"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Module name"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unit atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  import!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1307 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> import!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom <div class="tag_parenthesis2">&nbsp&nbsp(</div><div class="tag_arrow">-></div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
44 include <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,_Depth,Self,['include',File],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(include aq ) <br> 
!(assertEqual (include aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (include aq )  ( result_with_type ))  <br> 
eval( "!(include aq )"). <br>  
eval( "!(assertEqual (include aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (include aq )  ( result_with_type ))" ).  <br>  
eval( "!(include (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (include (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (include (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc include <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  include
</div>   Metta file: ../canary/stdlib_mettalog.metta 1310 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> include</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Works just like import! but with &self as a first argument. So everything from input file will be included in the current atomspace and evaluated"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Name of metta script to import"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unit atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  include
</div>   Metta file: ../canary/stdlib_mettalog.metta 1315 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> include</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
45 include! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['include!',Other,File],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(include! aq au ) <br> 
!(assertEqual (include! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (include! aq au )  ( result_with_type ))  <br> 
eval( "!(include! aq au )"). <br>  
eval( "!(assertEqual (include! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (include! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(include! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (include! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (include! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc include! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
code_inclusion includes code from another file or context. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
46 intersection <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['intersection',Eval1,Eval2],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(intersection aq au ) <br> 
!(assertEqual (intersection aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (intersection aq au )  ( result_with_type ))  <br> 
eval( "!(intersection aq au )"). <br>  
eval( "!(assertEqual (intersection aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (intersection aq au )  ( result_with_type ))" ).  <br>  
eval( "!(intersection (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (intersection (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (intersection (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc intersection <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
nondet_sets it gives the intersection duplicates are not removed .  lazy_intersection
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  intersection
</div>   Metta file: ../canary/stdlib_mettalog.metta 1524 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> intersection</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their intersection. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>intersection <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b c c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [b, c, c]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Intersection of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  intersection
</div>   Metta file: ../canary/stdlib_mettalog.metta 1530 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> intersection</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  intersection
</div>   is similar to: 
<div class="big_tag"  >  unique
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 154 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>limit 6 <div class="tag_parenthesis1">&nbsp(</div><div class="enlarged"> unique</div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>synthesize <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>: $term $type<div class="tag_parenthesis3">) &nbsp </div> kb rb <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>S <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>S Z<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  intersection
</div>   is similar to: 
<div class="big_tag"  >  union
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta 11 <br> 

<div class="metta_clause"  >  ; !<div class="tag_parenthesis0">(</div><div class="enlarged"> union</div> <div class="tag_parenthesis1">&nbsp(</div>superpose <div class="tag_parenthesis2">&nbsp&nbsp(</div>a b c d <div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div> <div class="tag_parenthesis1">&nbsp(</div>superpose <div class="tag_parenthesis2">&nbsp&nbsp(</div> c d e f <div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  intersection
</div>   is similar to: 
<div class="big_tag"  >  unique
</div>   Metta file: ../canary/stdlib_mettalog.metta 1505 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> unique</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes non-deterministic input <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div> and returns only unique entities. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>unique <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b c d d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b, c, d]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unique non-deterministic values from input set"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  intersection
</div>   is similar to: 
<div class="big_tag"  >  unique
</div>   Metta file: ../canary/stdlib_mettalog.metta 1510 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> unique</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  intersection
</div>   is similar to: 
<div class="big_tag"  >  subtraction
</div>   Metta file: ../canary/stdlib_mettalog.metta 1534 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> subtraction</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their subtraction. E.g. !<div class="tag_parenthesis2">&nbsp&nbsp(</div>subtraction <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b b c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Subtraction of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  intersection
</div>   is similar to: 
<div class="big_tag"  >  subtraction
</div>   Metta file: ../canary/stdlib_mettalog.metta 1540 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> subtraction</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 9 
<div class="big_tag"  >  intersection
</div>   is similar to: 
<div class="big_tag"  >  union
</div>   Metta file: ../canary/stdlib_mettalog.metta 1514 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> union</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their union. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>union <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b b c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b, b, c, b, c, c, d]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Union of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
47 length <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['length',L],Res):- !, eval_args(Eq,RetType,Depth,Self,L,LL), !, (is_list(LL)->length(LL,Res);Res=1). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(length aq ) <br> 
!(assertEqual (length aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (length aq )  ( result_with_type ))  <br> 
eval( "!(length aq )"). <br>  
eval( "!(assertEqual (length aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (length aq )  ( result_with_type ))" ).  <br>  
eval( "!(length (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (length (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (length (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc length <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
list_operations determines the length of a list.  length_determination
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1 
<div class="big_tag"  >  length
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 146 <br> 

<div class="metta_clause"  >  	  <div class="tag_parenthesis0">(</div><div class="enlarged"> car-atom</div> $a<div class="tag_parenthesis0">) &nbsp </div> 
</div>  
 <br> 2 
<div class="big_tag"  >  length
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 147 <br> 
      (let $t (<div class="enlarged"> cdr-atom</div> $a) (superpose ((car-atom $a) (first-few (- $n 1) $t)))))))
 <br> 3 
<div class="big_tag"  >  length
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta 107 <br> 
              (<div class="enlarged"> cons</div> $reduced-op $reduced-args) )))
 <br> 4 
<div class="big_tag"  >  length
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 741 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> car-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the first atom of an expression as a tuple"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "First atom of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  length
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 747 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> car-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  length
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 754 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cdr-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the tail of an expression <div class="tag_parenthesis2">&nbsp&nbsp(</div>all except first atom<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Tail of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  length
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 759 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cdr-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  length
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 18 <br> 

<div class="metta_clause"  >  ;<div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 9 
<div class="big_tag"  >  length
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 136 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cons</div>-atom<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Constructs an expression using two arguments"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Head of an expression"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Tail of an expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "New expression consists of two input arguments"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
48 let* <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['let*',[],Body],RetVal):- !, eval_args(Eq,RetType,Depth,Self,Body,RetVal). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(let* aq ) <br> 
!(assertEqual (let* aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (let* aq )  ( result_with_type ))  <br> 
eval( "!(let* aq )"). <br>  
eval( "!(assertEqual (let* aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (let* aq )  ( result_with_type ))" ).  <br>  
eval( "!(let* (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (let* (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (let* (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc let* <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
variable_assignment sequential variable assignment.  sequential
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  let*
</div>   Metta file: ../canary/stdlib_mettalog.metta 698 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> let*</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Same as let, but first argument is a tuple containing tuples of variables and their bindings, e.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div><div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>$v <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>+ 1 2<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>$v2 <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>* 5 6<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Tuple of tuples with variables and their bindings"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression which will be reduced and in which variable <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>first argument<div class="tag_parenthesis4">) &nbsp </div> could be used"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of second argument's evaluation"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  let*
</div>   Metta file: ../canary/stdlib_mettalog.metta 704 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> let*</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  let*
</div>   is similar to: 
<div class="big_tag"  >  let
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 78 <br> 
   (<div class="enlarged"> let</div> $query ($kb) $query))
  </div>
<br>
49 limit <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['limit',NE,E],R):-  !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(limit aq au ) <br> 
!(assertEqual (limit aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (limit aq au )  ( result_with_type ))  <br> 
eval( "!(limit aq au )"). <br>  
eval( "!(assertEqual (limit aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (limit aq au )  ( result_with_type ))" ).  <br>  
eval( "!(limit (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (limit (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (limit (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc limit <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
50 limit! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['limit!',N,E],R):- !, eval_20(Eq,RetType,Depth,Self,['limit',N,E],R). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(limit! aq au ) <br> 
!(assertEqual (limit! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (limit! aq au )  ( result_with_type ))  <br> 
eval( "!(limit! aq au )"). <br>  
eval( "!(assertEqual (limit! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (limit! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(limit! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (limit! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (limit! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc limit! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
iteration_control limits the number of iterations. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
51 load-ascii <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['load-ascii',Other,File],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(load-ascii aq au ) <br> 
!(assertEqual (load-ascii aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (load-ascii aq au )  ( result_with_type ))  <br> 
eval( "!(load-ascii aq au )"). <br>  
eval( "!(assertEqual (load-ascii aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (load-ascii aq au )  ( result_with_type ))" ).  <br>  
eval( "!(load-ascii (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (load-ascii (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (load-ascii (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc load-ascii <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
file_handling loads ascii file content. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
52 load-file! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['load-file!',Other,File],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(load-file! aq au ) <br> 
!(assertEqual (load-file! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (load-file! aq au )  ( result_with_type ))  <br> 
eval( "!(load-file! aq au )"). <br>  
eval( "!(assertEqual (load-file! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (load-file! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(load-file! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (load-file! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (load-file! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc load-file! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
53 make_list <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,_Dpth,_Slf,['make_list',List],MettaList):- !, into_metta_cons(List,MettaList),check_returnval(Eq,RetType,MettaList). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(make_list aq ) <br> 
!(assertEqual (make_list aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (make_list aq )  ( result_with_type ))  <br> 
eval( "!(make_list aq )"). <br>  
eval( "!(assertEqual (make_list aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (make_list aq )  ( result_with_type ))" ).  <br>  
eval( "!(make_list (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (make_list (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (make_list (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc make_list <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
list_operations creates a list with specified elements.  creation
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1 
<div class="big_tag"  >  make_list
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 146 <br> 

<div class="metta_clause"  >  	  <div class="tag_parenthesis0">(</div><div class="enlarged"> car-atom</div> $a<div class="tag_parenthesis0">) &nbsp </div> 
</div>  
 <br> 2 
<div class="big_tag"  >  make_list
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 147 <br> 
      (let $t (<div class="enlarged"> cdr-atom</div> $a) (superpose ((car-atom $a) (first-few (- $n 1) $t)))))))
 <br> 3 
<div class="big_tag"  >  make_list
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/00_lang_ok_to_redefine.metta 107 <br> 
              (<div class="enlarged"> cons</div> $reduced-op $reduced-args) )))
 <br> 4 
<div class="big_tag"  >  make_list
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 741 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> car-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the first atom of an expression as a tuple"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "First atom of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  make_list
</div>   is similar to: 
<div class="big_tag"  >  car-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 747 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> car-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  make_list
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 754 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cdr-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Extracts the tail of an expression <div class="tag_parenthesis2">&nbsp&nbsp(</div>all except first atom<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Tail of an expression"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  make_list
</div>   is similar to: 
<div class="big_tag"  >  cdr-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 759 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cdr-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  make_list
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 18 <br> 

<div class="metta_clause"  >  ;<div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> cons</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 9 
<div class="big_tag"  >  make_list
</div>   is similar to: 
<div class="big_tag"  >  cons
</div>   Metta file: ../canary/stdlib_mettalog.metta 136 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> cons</div>-atom<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Constructs an expression using two arguments"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Head of an expression"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Tail of an expression"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "New expression consists of two input arguments"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
54 map-atom <b> Arity: </b>3  <br> 
 eval_20(Eq,RetType,Depth,Self,['map-atom',List,V,Eval],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(map-atom aq au as ) <br> 
!(assertEqual (map-atom aq au as )  ( result_with_type ))  <br> 
!(assertEqualToResult (map-atom aq au as )  ( result_with_type ))  <br> 
eval( "!(map-atom aq au as )"). <br>  
eval( "!(assertEqual (map-atom aq au as )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (map-atom aq au as )  ( result_with_type ))" ).  <br>  
eval( "!(map-atom (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )"). <br>  
eval( "!(assertEqual (map-atom (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (map-atom (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc map-atom <br> (@desc "" )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  map-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 422 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> map-atom</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes list of atoms <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div>, variable to be used inside <div class="tag_parenthesis2">&nbsp&nbsp(</div>second variable<div class="tag_parenthesis2">) &nbsp </div> and an expression which will be evaluated for each atom in list <div class="tag_parenthesis2">&nbsp&nbsp(</div>third argument<div class="tag_parenthesis2">) &nbsp </div>. Expression should contain variable. So e.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>map-atom <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>1 2 3 4<div class="tag_parenthesis3">) &nbsp </div> $v <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>eval <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>+ $v 1<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> will give <div class="tag_parenthesis2">&nbsp&nbsp(</div>2 3 4 5<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "List of atoms"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Variable name"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Template using variable"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of evaluating template for each atom in a list"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  map-atom
</div>   Metta file: ../canary/stdlib_mettalog.metta 429 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> map-atom</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Variable Atom Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
55 maplist! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['maplist!',Pred,ArgL1],ResL):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(maplist! aq au ) <br> 
!(assertEqual (maplist! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (maplist! aq au )  ( result_with_type ))  <br> 
eval( "!(maplist! aq au )"). <br>  
eval( "!(assertEqual (maplist! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (maplist! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(maplist! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (maplist! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (maplist! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc maplist! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  maplist!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1566 <br> 
(@doc <div class="enlarged"> maplist!</div>
  (@desc "Takes a function F and one to three lists; Returns the result of applying F to each item in the list(s). 
 The provided lists are not evaluated (this matches the behavior of e.g. cons-atom).
 F must have the number of lists provided as a valid arity (i.e. unary for one list, binary for two, ternary for three).
 Use concurrent-maplist! for a multi-threaded, nondeterministic version.
 See Prolog's built-in predicate maplist.")
  (@params (
    (@param "Function to be applied")
    (@param "List")))
 <br> 2  function: 
<div class="big_tag"  >  maplist!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1576 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> maplist!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Function Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  maplist!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1577 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> maplist!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Function Expression Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4  function: 
<div class="big_tag"  >  maplist!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1578 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> maplist!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Function Expression Expression Expression Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
56 max-time <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['max-time',NE,E],R):-  !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(max-time aq au ) <br> 
!(assertEqual (max-time aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (max-time aq au )  ( result_with_type ))  <br> 
eval( "!(max-time aq au )"). <br>  
eval( "!(assertEqual (max-time aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (max-time aq au )  ( result_with_type ))" ).  <br>  
eval( "!(max-time (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (max-time (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (max-time (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc max-time <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
57 max-time! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['max-time!',N,E],R):- !, eval_20(Eq,RetType,Depth,Self,['max-time',N,E],R). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(max-time! aq au ) <br> 
!(assertEqual (max-time! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (max-time! aq au )  ( result_with_type ))  <br> 
eval( "!(max-time! aq au )"). <br>  
eval( "!(assertEqual (max-time! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (max-time! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(max-time! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (max-time! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (max-time! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc max-time! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
58 new-state <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['new-state',UpdatedValue],StateMonad):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(new-state aq ) <br> 
!(assertEqual (new-state aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (new-state aq )  ( result_with_type ))  <br> 
eval( "!(new-state aq )"). <br>  
eval( "!(assertEqual (new-state aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (new-state aq )  ( result_with_type ))" ).  <br>  
eval( "!(new-state (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (new-state (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (new-state (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc new-state <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  new-state
</div>   Metta file: ../canary/stdlib_mettalog.metta 1117 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> new-state</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Creates a new state atom wrapping its argument"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to be wrapped"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Returns <div class="tag_parenthesis2">&nbsp&nbsp(</div>State $value<div class="tag_parenthesis2">) &nbsp </div> where $value is an argument to a new-state"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  new-state
</div>   Metta file: ../canary/stdlib_mettalog.metta 1122 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> new-state</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> $tnso <div class="tag_parenthesis2">&nbsp&nbsp(</div>StateMonad $tnso<div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
59 no-rtrace! <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['no-rtrace!',Cond],Res):- !, quietly(eval_args(Eq,RetType,Depth,Self,Cond,Res)). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(no-rtrace! aq ) <br> 
!(assertEqual (no-rtrace! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (no-rtrace! aq )  ( result_with_type ))  <br> 
eval( "!(no-rtrace! aq )"). <br>  
eval( "!(assertEqual (no-rtrace! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (no-rtrace! aq )  ( result_with_type ))" ).  <br>  
eval( "!(no-rtrace! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (no-rtrace! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (no-rtrace! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc no-rtrace! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
debugging disables tracing for debugging.  trace_control
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1 
<div class="big_tag"  >  no-rtrace!
</div>   is similar to: 
<div class="big_tag"  >  trace!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1329 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> trace!</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Prints its first argument and returns second. Both arguments will be evaluated before processing"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to print"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to return"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Evaluated second input"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2 
<div class="big_tag"  >  no-rtrace!
</div>   is similar to: 
<div class="big_tag"  >  trace!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1335 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> trace!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> %Undefined% $a $a<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
60 number-of <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['number-of',X],N):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(number-of aq ) <br> 
!(assertEqual (number-of aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (number-of aq )  ( result_with_type ))  <br> 
eval( "!(number-of aq )"). <br>  
eval( "!(assertEqual (number-of aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (number-of aq )  ( result_with_type ))" ).  <br>  
eval( "!(number-of (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (number-of (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (number-of (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc number-of <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
iteration_control returns iteration count. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
61 offset <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['offset',NE,E],R):-  !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(offset aq au ) <br> 
!(assertEqual (offset aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (offset aq au )  ( result_with_type ))  <br> 
eval( "!(offset aq au )"). <br>  
eval( "!(assertEqual (offset aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (offset aq au )  ( result_with_type ))" ).  <br>  
eval( "!(offset (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (offset (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (offset (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc offset <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
62 offset! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['offset!',N,E],R):- !, eval_20(Eq,RetType,Depth,Self,['offset',N,E],R). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(offset! aq au ) <br> 
!(assertEqual (offset! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (offset! aq au )  ( result_with_type ))  <br> 
eval( "!(offset! aq au )"). <br>  
eval( "!(assertEqual (offset! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (offset! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(offset! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (offset! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (offset! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc offset! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
iteration_control adjusts the starting point of iteration. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
63 output-to-string <b> Arity: </b>1  <br> 
 eval_20( Eq, RetType, Depth, Self, [ 'output-to-string' , L ] , Sxx ):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(output-to-string aq ) <br> 
!(assertEqual (output-to-string aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (output-to-string aq )  ( result_with_type ))  <br> 
eval( "!(output-to-string aq )"). <br>  
eval( "!(assertEqual (output-to-string aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (output-to-string aq )  ( result_with_type ))" ).  <br>  
eval( "!(output-to-string (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (output-to-string (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (output-to-string (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc output-to-string <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
64 parse <b> Arity: </b>1  <br> 
 eval_20( Eq, RetType, Depth, Self, [ 'parse' , L ] , Exp ):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(parse aq ) <br> 
!(assertEqual (parse aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (parse aq )  ( result_with_type ))  <br> 
eval( "!(parse aq )"). <br>  
eval( "!(assertEqual (parse aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (parse aq )  ( result_with_type ))" ).  <br>  
eval( "!(parse (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (parse (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (parse (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc parse <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
data_structures parse a string to an expression.  parse 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  parse
</div>   Metta file: ../canary/stdlib_mettalog.metta 717 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> parse</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> String Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2 
<div class="big_tag"  >  parse
</div>   is similar to: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta 1 <br> 
!(<div class="enlarged"> collapse</div> (superpose ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))
 <br> 3 
<div class="big_tag"  >  parse
</div>   is similar to: 
<div class="big_tag"  >  superpose
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta 1 <br> 
!(collapse (<div class="enlarged"> superpose</div> ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))
 <br> 4 
<div class="big_tag"  >  parse
</div>   is similar to: 
<div class="big_tag"  >  repr
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta 9 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div><div class="enlarged"> repr</div> aswde<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  parse
</div>   is similar to: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../canary/stdlib_mettalog.metta 1253 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> collapse</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Converts a nondeterministic result into a tuple"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom which will be evaluated"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Tuple"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  parse
</div>   is similar to: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../canary/stdlib_mettalog.metta 1258 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> collapse</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  parse
</div>   is similar to: 
<div class="big_tag"  >  repr
</div>   Metta file: ../canary/stdlib_mettalog.metta 718 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> repr</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom String<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
65 pragma! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['pragma!',Other,Expr],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(pragma! aq au ) <br> 
!(assertEqual (pragma! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (pragma! aq au )  ( result_with_type ))  <br> 
eval( "!(pragma! aq au )"). <br>  
eval( "!(assertEqual (pragma! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (pragma! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(pragma! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (pragma! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (pragma! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc pragma! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
compiler_directive compiler directive for optimizations/settings.  optimization
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  pragma!
</div>   Metta file: ../canary/stdlib_mettalog.metta 29 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> pragma!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom <div class="tag_parenthesis2">&nbsp&nbsp(</div><div class="tag_arrow">-></div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  pragma!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1290 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> pragma!</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Changes global key's <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div> value to a new one <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Key's name"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "New value"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unit atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  pragma!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1296 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> pragma!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Symbol %Undefined% <div class="tag_parenthesis2">&nbsp&nbsp(</div><div class="tag_arrow">-></div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
66 pred-intersection <b> Arity: </b>3  <br> 
 eval_20(Eq,RetType,Depth,Self,['pred-intersection',P2,Eval1,Eval2],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(pred-intersection aq au as ) <br> 
!(assertEqual (pred-intersection aq au as )  ( result_with_type ))  <br> 
!(assertEqualToResult (pred-intersection aq au as )  ( result_with_type ))  <br> 
eval( "!(pred-intersection aq au as )"). <br>  
eval( "!(assertEqual (pred-intersection aq au as )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (pred-intersection aq au as )  ( result_with_type ))" ).  <br>  
eval( "!(pred-intersection (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )"). <br>  
eval( "!(assertEqual (pred-intersection (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (pred-intersection (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc pred-intersection <br> (@desc "" )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
67 pred-subtraction <b> Arity: </b>3  <br> 
 eval_20(Eq,RetType,Depth,Self,['pred-subtraction',P2,Eval1,Eval2],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(pred-subtraction aq au as ) <br> 
!(assertEqual (pred-subtraction aq au as )  ( result_with_type ))  <br> 
!(assertEqualToResult (pred-subtraction aq au as )  ( result_with_type ))  <br> 
eval( "!(pred-subtraction aq au as )"). <br>  
eval( "!(assertEqual (pred-subtraction aq au as )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (pred-subtraction aq au as )  ( result_with_type ))" ).  <br>  
eval( "!(pred-subtraction (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )"). <br>  
eval( "!(assertEqual (pred-subtraction (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (pred-subtraction (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc pred-subtraction <br> (@desc "" )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
68 pred-union <b> Arity: </b>3  <br> 
 eval_20(Eq,RetType,Depth,Self,['pred-union',P2,Eval1,Eval2],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(pred-union aq au as ) <br> 
!(assertEqual (pred-union aq au as )  ( result_with_type ))  <br> 
!(assertEqualToResult (pred-union aq au as )  ( result_with_type ))  <br> 
eval( "!(pred-union aq au as )"). <br>  
eval( "!(assertEqual (pred-union aq au as )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (pred-union aq au as )  ( result_with_type ))" ).  <br>  
eval( "!(pred-union (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )"). <br>  
eval( "!(assertEqual (pred-union (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (pred-union (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc pred-union <br> (@desc "" )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
69 pred-unique <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['pred-unique',P2,Eval],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(pred-unique aq au ) <br> 
!(assertEqual (pred-unique aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (pred-unique aq au )  ( result_with_type ))  <br> 
eval( "!(pred-unique aq au )"). <br>  
eval( "!(assertEqual (pred-unique aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (pred-unique aq au )  ( result_with_type ))" ).  <br>  
eval( "!(pred-unique (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (pred-unique (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (pred-unique (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc pred-unique <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
70 predicate-arity <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Dpth,_Slf,['predicate-arity',F],A):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(predicate-arity aq ) <br> 
!(assertEqual (predicate-arity aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (predicate-arity aq )  ( result_with_type ))  <br> 
eval( "!(predicate-arity aq )"). <br>  
eval( "!(assertEqual (predicate-arity aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (predicate-arity aq )  ( result_with_type ))" ).  <br>  
eval( "!(predicate-arity (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (predicate-arity (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (predicate-arity (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc predicate-arity <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
function_definition defines the arity of predicates/functions.  arity
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  predicate-arity
</div>   Metta file: ../canary/stdlib_mettalog.metta 28 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> predicate-arity</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Symbol Number<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2 
<div class="big_tag"  >  predicate-arity
</div>   is similar to: 
<div class="big_tag"  >  function
</div>   Metta file: ../canary/stdlib_mettalog.metta 85 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> function</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Evaluates the argument until it becomes <div class="tag_parenthesis2">&nbsp&nbsp(</div>return <result><div class="tag_parenthesis2">) &nbsp </div>. Then <div class="tag_parenthesis2">&nbsp&nbsp(</div>function <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>return <result><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> is reduced to the <result>."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to be evaluated"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of atom's evaluation"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  predicate-arity
</div>   is similar to: 
<div class="big_tag"  >  function
</div>   Metta file: ../canary/stdlib_mettalog.metta 90 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> function</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  predicate-arity
</div>   is similar to: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 21 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> return</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom ReturnType<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  predicate-arity
</div>   is similar to: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 76 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> return</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Returns value from the <div class="tag_parenthesis2">&nbsp&nbsp(</div>function ...<div class="tag_parenthesis2">) &nbsp </div> expression"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Value to be returned"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Passed argument"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  predicate-arity
</div>   is similar to: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 81 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> return</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> $t $t<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  predicate-arity
</div>   is similar to: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 251 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> return</div>-on-error<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Returns first argument if it is Empty or an error. Returns second argument otherwise."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Previous evaluation result"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom for further evaluation"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Return previous result if it is an error or Empty or continue evaluation"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
71 print <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['print',Cond],Res):- !, eval_args(Eq,RetType,Depth,Self,Cond,Res),format('~N'),print(Res),format('~N'). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(print aq ) <br> 
!(assertEqual (print aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (print aq )  ( result_with_type ))  <br> 
eval( "!(print aq )"). <br>  
eval( "!(assertEqual (print aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (print aq )  ( result_with_type ))" ).  <br>  
eval( "!(print (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (print (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (print (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc print <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
output prints text to output.  text_printing
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  print
</div>   Metta file: ../canary/stdlib_mettalog.metta 1225 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> print</div>-mods!<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Prints all modules with their correspondent spaces"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unit atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  print
</div>   Metta file: ../canary/stdlib_mettalog.metta 1339 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> print</div>ln!<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Prints a line of text to the console"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression/atom to be printed out"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unit atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  print
</div>   is similar to: 
<div class="big_tag"  >  println!
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta 20 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div><div class="enlarged"> println!</div> <div class="tag_parenthesis1">&nbsp(</div>fib 12<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
72 profile! <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['profile!',Cond],Res):- !, time_eval(profile(Cond),profile(eval_args(Eq,RetType,Depth,Self,Cond,Res))). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(profile! aq ) <br> 
!(assertEqual (profile! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (profile! aq )  ( result_with_type ))  <br> 
eval( "!(profile! aq )"). <br>  
eval( "!(assertEqual (profile! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (profile! aq )  ( result_with_type ))" ).  <br>  
eval( "!(profile! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (profile! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (profile! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc profile! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
73 py-dict <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['py-dict',Arg],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(py-dict aq ) <br> 
!(assertEqual (py-dict aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (py-dict aq )  ( result_with_type ))  <br> 
eval( "!(py-dict aq )"). <br>  
eval( "!(assertEqual (py-dict aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (py-dict aq )  ( result_with_type ))" ).  <br>  
eval( "!(py-dict (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (py-dict (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (py-dict (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc py-dict <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
74 py-list <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['py-list',Arg],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(py-list aq ) <br> 
!(assertEqual (py-list aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (py-list aq )  ( result_with_type ))  <br> 
eval( "!(py-list aq )"). <br>  
eval( "!(assertEqual (py-list aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (py-list aq )  ( result_with_type ))" ).  <br>  
eval( "!(py-list (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (py-list (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (py-list (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc py-list <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  py-list
</div>   Metta file: ../canary/stdlib_mettalog.metta 1373 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> py-list</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Converts a MeTTa Expression into a Python list and returns it as a PyObject."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>@type Expression<div class="tag_parenthesis4">) &nbsp </div> <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>@desc "A MeTTa List that will be converted into a Python list"<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><br>  <div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return <div class="tag_parenthesis2">&nbsp&nbsp(</div>@type PyObject<div class="tag_parenthesis2">) &nbsp </div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>@desc "A Python list object that represents the given MeTTa Expression as a PyObject"<div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  py-list
</div>   Metta file: ../canary/stdlib_mettalog.metta 1380 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> py-list</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression PyObject<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
75 py-tuple <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['py-tuple',Arg],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(py-tuple aq ) <br> 
!(assertEqual (py-tuple aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (py-tuple aq )  ( result_with_type ))  <br> 
eval( "!(py-tuple aq )"). <br>  
eval( "!(assertEqual (py-tuple aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (py-tuple aq )  ( result_with_type ))" ).  <br>  
eval( "!(py-tuple (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (py-tuple (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (py-tuple (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc py-tuple <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
76 register-module! <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['register-module!',Dir],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(register-module! aq ) <br> 
!(assertEqual (register-module! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (register-module! aq )  ( result_with_type ))  <br> 
eval( "!(register-module! aq )"). <br>  
eval( "!(assertEqual (register-module! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (register-module! aq )  ( result_with_type ))" ).  <br>  
eval( "!(register-module! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (register-module! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (register-module! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc register-module! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  register-module!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1201 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> register-module!</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Takes a file system path <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div> and loads the module into the runner"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "File system path"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unit atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  register-module!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1206 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> register-module!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom <div class="tag_parenthesis2">&nbsp&nbsp(</div><div class="tag_arrow">-></div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
77 repr <b> Arity: </b>1  <br> 
 eval_20( _Eq, _RetType, _Depth, _Self, [ 'repr' , L ] , Sxx ):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(repr aq ) <br> 
!(assertEqual (repr aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (repr aq )  ( result_with_type ))  <br> 
eval( "!(repr aq )"). <br>  
eval( "!(assertEqual (repr aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (repr aq )  ( result_with_type ))" ).  <br>  
eval( "!(repr (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (repr (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (repr (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc repr <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
data_structures represent an expression as string.  repr 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  repr
</div>   Metta file: ../canary/stdlib_mettalog.metta 718 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> repr</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom String<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2 
<div class="big_tag"  >  repr
</div>   is similar to: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta 1 <br> 
!(<div class="enlarged"> collapse</div> (superpose ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))
 <br> 3 
<div class="big_tag"  >  repr
</div>   is similar to: 
<div class="big_tag"  >  superpose
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta 1 <br> 
!(collapse (<div class="enlarged"> superpose</div> ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))
 <br> 4 
<div class="big_tag"  >  repr
</div>   is similar to: 
<div class="big_tag"  >  parse
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta 14 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div><div class="enlarged"> parse</div> "kjh"<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  repr
</div>   is similar to: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../canary/stdlib_mettalog.metta 1253 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> collapse</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Converts a nondeterministic result into a tuple"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom which will be evaluated"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Tuple"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  repr
</div>   is similar to: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../canary/stdlib_mettalog.metta 1258 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> collapse</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  repr
</div>   is similar to: 
<div class="big_tag"  >  parse
</div>   Metta file: ../canary/stdlib_mettalog.metta 717 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> parse</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> String Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
78 return <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['return',X],_):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(return aq ) <br> 
!(assertEqual (return aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (return aq )  ( result_with_type ))  <br> 
eval( "!(return aq )"). <br>  
eval( "!(assertEqual (return aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (return aq )  ( result_with_type ))" ).  <br>  
eval( "!(return (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (return (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (return (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc return <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
function_definition return value of a function block.  return_value
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 21 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> return</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom ReturnType<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 76 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> return</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Returns value from the <div class="tag_parenthesis2">&nbsp&nbsp(</div>function ...<div class="tag_parenthesis2">) &nbsp </div> expression"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Value to be returned"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Passed argument"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 81 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> return</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> $t $t<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4  function: 
<div class="big_tag"  >  return
</div>   Metta file: ../canary/stdlib_mettalog.metta 251 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> return</div>-on-error<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Returns first argument if it is Empty or an error. Returns second argument otherwise."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Previous evaluation result"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom for further evaluation"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Return previous result if it is an error or Empty or continue evaluation"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  return
</div>   is similar to: 
<div class="big_tag"  >  function
</div>   Metta file: ../canary/stdlib_mettalog.metta 85 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> function</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Evaluates the argument until it becomes <div class="tag_parenthesis2">&nbsp&nbsp(</div>return <result><div class="tag_parenthesis2">) &nbsp </div>. Then <div class="tag_parenthesis2">&nbsp&nbsp(</div>function <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>return <result><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> is reduced to the <result>."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to be evaluated"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of atom's evaluation"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  return
</div>   is similar to: 
<div class="big_tag"  >  function
</div>   Metta file: ../canary/stdlib_mettalog.metta 90 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> function</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  return
</div>   is similar to: 
<div class="big_tag"  >  predicate-arity
</div>   Metta file: ../canary/stdlib_mettalog.metta 28 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> predicate-arity</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Symbol Number<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
79 rtrace! <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['rtrace!',Cond],Res):- !, rtrace(eval_args(Eq,RetType,Depth,Self,Cond,Res)). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(rtrace! aq ) <br> 
!(assertEqual (rtrace! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (rtrace! aq )  ( result_with_type ))  <br> 
eval( "!(rtrace! aq )"). <br>  
eval( "!(assertEqual (rtrace! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (rtrace! aq )  ( result_with_type ))" ).  <br>  
eval( "!(rtrace! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (rtrace! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (rtrace! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc rtrace! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
debugging enables tracing for debugging.  trace_control
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1 
<div class="big_tag"  >  rtrace!
</div>   is similar to: 
<div class="big_tag"  >  trace!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1329 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> trace!</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Prints its first argument and returns second. Both arguments will be evaluated before processing"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to print"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to return"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Evaluated second input"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2 
<div class="big_tag"  >  rtrace!
</div>   is similar to: 
<div class="big_tag"  >  trace!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1335 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> trace!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> %Undefined% $a $a<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
80 rust <b> Arity: </b>2  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['rust',Bang,PredDecl],Res):- Bang == '!', !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(rust aq au ) <br> 
!(assertEqual (rust aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (rust aq au )  ( result_with_type ))  <br> 
eval( "!(rust aq au )"). <br>  
eval( "!(assertEqual (rust aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (rust aq au )  ( result_with_type ))" ).  <br>  
eval( "!(rust (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (rust (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (rust (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc rust <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
81 rust! <b> Arity: </b>1  <br> 
 eval_20(_Eq,_RetType,_Depth,_Self,['rust!',PredDecl],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(rust! aq ) <br> 
!(assertEqual (rust! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (rust! aq )  ( result_with_type ))  <br> 
eval( "!(rust! aq )"). <br>  
eval( "!(assertEqual (rust! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (rust! aq )  ( result_with_type ))" ).  <br>  
eval( "!(rust! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (rust! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (rust! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc rust! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
82 save-space! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['save-space!',Other,File],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(save-space! aq au ) <br> 
!(assertEqual (save-space! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (save-space! aq au )  ( result_with_type ))  <br> 
eval( "!(save-space! aq au )"). <br>  
eval( "!(assertEqual (save-space! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (save-space! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(save-space! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (save-space! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (save-space! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc save-space! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
83 sealed <b> Arity: </b>2  <br> 
 eval_20(_Eq, _RetType, _Depth, _Self, ['sealed', InputVarList, Expr], Result) :- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(sealed aq au ) <br> 
!(assertEqual (sealed aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (sealed aq au )  ( result_with_type ))  <br> 
eval( "!(sealed aq au )"). <br>  
eval( "!(assertEqual (sealed aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (sealed aq au )  ( result_with_type ))" ).  <br>  
eval( "!(sealed (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (sealed (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (sealed (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc sealed <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
variable_scoping variable scoping. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  sealed
</div>   Metta file: ../canary/stdlib_mettalog.metta 1358 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> sealed</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Replaces all occurrences of any var from var list <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div> inside atom <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div> by unique variable. Can be used to create a locally scoped variables"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>	<div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Variable list e.g. <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>$x $y<div class="tag_parenthesis4">) &nbsp </div>"<div class="tag_parenthesis3">) &nbsp </div><br>	<div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom which uses those variables"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Second argument but with variables being replaced with unique variables"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  sealed
</div>   Metta file: ../canary/stdlib_mettalog.metta 1364 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> sealed</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
84 sequential <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['sequential',List],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(sequential aq ) <br> 
!(assertEqual (sequential aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (sequential aq )  ( result_with_type ))  <br> 
eval( "!(sequential aq )"). <br>  
eval( "!(assertEqual (sequential aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (sequential aq )  ( result_with_type ))" ).  <br>  
eval( "!(sequential (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (sequential (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (sequential (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc sequential <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
data_structures sequentially applies operations.  sequential_operations
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1 
<div class="big_tag"  >  sequential
</div>   is similar to: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta 1 <br> 
!(<div class="enlarged"> collapse</div> (superpose ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))
 <br> 2 
<div class="big_tag"  >  sequential
</div>   is similar to: 
<div class="big_tag"  >  superpose
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/structure-tests.metta 1 <br> 
!(collapse (<div class="enlarged"> superpose</div> ((superpose (1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3))
 <br> 3 
<div class="big_tag"  >  sequential
</div>   is similar to: 
<div class="big_tag"  >  repr
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta 9 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div><div class="enlarged"> repr</div> aswde<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  sequential
</div>   is similar to: 
<div class="big_tag"  >  parse
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta 14 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div><div class="enlarged"> parse</div> "kjh"<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  sequential
</div>   is similar to: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../canary/stdlib_mettalog.metta 1253 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> collapse</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Converts a nondeterministic result into a tuple"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom which will be evaluated"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Tuple"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  sequential
</div>   is similar to: 
<div class="big_tag"  >  collapse
</div>   Metta file: ../canary/stdlib_mettalog.metta 1258 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> collapse</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  sequential
</div>   is similar to: 
<div class="big_tag"  >  repr
</div>   Metta file: ../canary/stdlib_mettalog.metta 718 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> repr</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom String<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  sequential
</div>   is similar to: 
<div class="big_tag"  >  parse
</div>   Metta file: ../canary/stdlib_mettalog.metta 717 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> parse</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> String Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
85 setup-call-cleanup! <b> Arity: </b>3  <br> 
 eval_20(Eq,RetType,Depth,Self,['setup-call-cleanup!',S,NE,E],R):-  !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(setup-call-cleanup! aq au as ) <br> 
!(assertEqual (setup-call-cleanup! aq au as )  ( result_with_type ))  <br> 
!(assertEqualToResult (setup-call-cleanup! aq au as )  ( result_with_type ))  <br> 
eval( "!(setup-call-cleanup! aq au as )"). <br>  
eval( "!(assertEqual (setup-call-cleanup! aq au as )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (setup-call-cleanup! aq au as )  ( result_with_type ))" ).  <br>  
eval( "!(setup-call-cleanup! (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )"). <br>  
eval( "!(assertEqual (setup-call-cleanup! (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (setup-call-cleanup! (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc setup-call-cleanup! <br> (@desc "" )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
86 stringtochars <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['stringToChars',String],Chars):- !, eval_args(Eq,RetType,Depth,Self,String,SS), string_chars(SS,Chars0), maplist(as_metta_char,Chars0,Chars). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(stringtochars aq ) <br> 
!(assertEqual (stringtochars aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (stringtochars aq )  ( result_with_type ))  <br> 
eval( "!(stringtochars aq )"). <br>  
eval( "!(assertEqual (stringtochars aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (stringtochars aq )  ( result_with_type ))" ).  <br>  
eval( "!(stringtochars (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (stringtochars (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (stringtochars (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc stringtochars <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
string_operations convert a string to a list of chars.  string_to_chars
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  stringtochars
</div>   Metta file: ../canary/stdlib_mettalog.metta 715 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> stringToChars <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> String Expression<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2 
<div class="big_tag"  >  stringtochars
</div>   is similar to: 
<div class="big_tag"  >  charstostring
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta 5 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqual <div class="tag_parenthesis1">&nbsp(</div>charsToString <div class="tag_parenthesis2">&nbsp&nbsp(</div>'x' 'y' 'z' 'z' 'y'<div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div> "xyzzy"<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  stringtochars
</div>   is similar to: 
<div class="big_tag"  >  format-args
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/string-tests.metta 29 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqual <div class="tag_parenthesis1">&nbsp(</div><div class="enlarged"> format-args</div> "" <div class="tag_parenthesis2">&nbsp&nbsp(</div>1 2 3<div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div> ""<div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  stringtochars
</div>   is similar to: 
<div class="big_tag"  >  charstostring
</div>   Metta file: ../canary/stdlib_mettalog.metta 716 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> charsToString <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression String<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  stringtochars
</div>   is similar to: 
<div class="big_tag"  >  format-args
</div>   Metta file: ../canary/stdlib_mettalog.metta 1348 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> format-args</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Fills {} symbols in the input expression with atoms from the second expression. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>format-args <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>Probability of {} is {}%<div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>head 50<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> gives [<div class="tag_parenthesis2">&nbsp&nbsp(</div>Probability of head is 50%<div class="tag_parenthesis2">) &nbsp </div>]. Atoms in the second input value could be variables"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression with {} symbols to be replaced"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atoms to be placed inside expression instead of {}"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Expression with replaced {} with atoms"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  stringtochars
</div>   is similar to: 
<div class="big_tag"  >  format-args
</div>   Metta file: ../canary/stdlib_mettalog.metta 1354 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> format-args</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> String Atom String<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
87 subtraction <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['subtraction',Eval1,Eval2],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(subtraction aq au ) <br> 
!(assertEqual (subtraction aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (subtraction aq au )  ( result_with_type ))  <br> 
eval( "!(subtraction aq au )"). <br>  
eval( "!(assertEqual (subtraction aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (subtraction aq au )  ( result_with_type ))" ).  <br>  
eval( "!(subtraction (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (subtraction (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (subtraction (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc subtraction <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
nondet_sets it subtracts elements generated by call2 from those generated by call1.  lazy_subtraction
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  subtraction
</div>   Metta file: ../canary/stdlib_mettalog.metta 1534 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> subtraction</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their subtraction. E.g. !<div class="tag_parenthesis2">&nbsp&nbsp(</div>subtraction <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b b c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Subtraction of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  subtraction
</div>   Metta file: ../canary/stdlib_mettalog.metta 1540 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> subtraction</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  subtraction
</div>   is similar to: 
<div class="big_tag"  >  unique
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 154 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>limit 6 <div class="tag_parenthesis1">&nbsp(</div><div class="enlarged"> unique</div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>synthesize <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>: $term $type<div class="tag_parenthesis3">) &nbsp </div> kb rb <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>S <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>S Z<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  subtraction
</div>   is similar to: 
<div class="big_tag"  >  intersection
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta 4 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqualToResult <div class="tag_parenthesis1">&nbsp(</div><div class="enlarged"> intersection</div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>superpose <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>a b <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>+ 2 3 <div class="tag_parenthesis4">) &nbsp </div> c<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>superpose <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>b c <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>+ 2 3<div class="tag_parenthesis4">) &nbsp </div> c c d<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div> <div class="tag_parenthesis1">&nbsp(</div>b 5 c<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  subtraction
</div>   is similar to: 
<div class="big_tag"  >  union
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta 11 <br> 

<div class="metta_clause"  >  ; !<div class="tag_parenthesis0">(</div><div class="enlarged"> union</div> <div class="tag_parenthesis1">&nbsp(</div>superpose <div class="tag_parenthesis2">&nbsp&nbsp(</div>a b c d <div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div> <div class="tag_parenthesis1">&nbsp(</div>superpose <div class="tag_parenthesis2">&nbsp&nbsp(</div> c d e f <div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  subtraction
</div>   is similar to: 
<div class="big_tag"  >  unique
</div>   Metta file: ../canary/stdlib_mettalog.metta 1505 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> unique</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes non-deterministic input <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div> and returns only unique entities. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>unique <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b c d d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b, c, d]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unique non-deterministic values from input set"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  subtraction
</div>   is similar to: 
<div class="big_tag"  >  unique
</div>   Metta file: ../canary/stdlib_mettalog.metta 1510 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> unique</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  subtraction
</div>   is similar to: 
<div class="big_tag"  >  intersection
</div>   Metta file: ../canary/stdlib_mettalog.metta 1524 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> intersection</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their intersection. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>intersection <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b c c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [b, c, c]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Intersection of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 9 
<div class="big_tag"  >  subtraction
</div>   is similar to: 
<div class="big_tag"  >  intersection
</div>   Metta file: ../canary/stdlib_mettalog.metta 1530 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> intersection</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
88 superpose-bind <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['superpose-bind',List],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(superpose-bind aq ) <br> 
!(assertEqual (superpose-bind aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (superpose-bind aq )  ( result_with_type ))  <br> 
eval( "!(superpose-bind aq )"). <br>  
eval( "!(assertEqual (superpose-bind aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (superpose-bind aq )  ( result_with_type ))" ).  <br>  
eval( "!(superpose-bind (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (superpose-bind (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (superpose-bind (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc superpose-bind <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  superpose-bind
</div>   Metta file: ../canary/stdlib_mettalog.metta 168 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> superpose-bind</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Complement to the collapse-bind. It takes result of collapse-bind <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div> and returns only result atoms without bindings"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression in form <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>Atom Binding<div class="tag_parenthesis4">) &nbsp </div>"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic list of Atoms"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  superpose-bind
</div>   Metta file: ../canary/stdlib_mettalog.metta 174 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> superpose-bind</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Expression Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  superpose-bind
</div>   Metta file: ../canary/stdlib_mettalog.metta 175 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> superpose-bind</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div> ; We specialize them but leaving the old defs in case
</div>  
  </div>
<br>
89 switch <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['switch',A,CL|T],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(switch aq au ) <br> 
!(assertEqual (switch aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (switch aq au )  ( result_with_type ))  <br> 
eval( "!(switch aq au )"). <br>  
eval( "!(assertEqual (switch aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (switch aq au )  ( result_with_type ))" ).  <br>  
eval( "!(switch (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (switch (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (switch (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc switch <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  switch
</div>   Metta file: ../canary/stdlib_mettalog.metta 22 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> switch</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> %Undefined% Expression Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  switch
</div>   Metta file: ../canary/stdlib_mettalog.metta 274 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> switch</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Subsequently tests multiple pattern-matching conditions <div class="tag_parenthesis2">&nbsp&nbsp(</div>second argument<div class="tag_parenthesis2">) &nbsp </div> for the given value <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to be matched with patterns"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Tuple of pairs mapping condition patterns to results"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result which corresponds to the pattern which is matched with the passed atom first"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  switch
</div>   Metta file: ../canary/stdlib_mettalog.metta 282 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> switch</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4  function: 
<div class="big_tag"  >  switch
</div>   Metta file: ../canary/stdlib_mettalog.metta 290 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> switch</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> %Undefined% Expression Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5  function: 
<div class="big_tag"  >  switch
</div>   Metta file: ../canary/stdlib_mettalog.metta 297 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> switch</div>-internal<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "This function is being called inside switch function to test one of the cases and it calls switch once again if current condition is not met"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>it will be evaluated<div class="tag_parenthesis4">) &nbsp </div>"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Deconsed tuple of pairs mapping condition patterns to results"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of evaluating of Atom bound to met condition"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
90 throw <b> Arity: </b>1  <br> 
 eval_20(Eq,_TRetType,Depth,Self,['throw',X],_):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(throw aq ) <br> 
!(assertEqual (throw aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (throw aq )  ( result_with_type ))  <br> 
eval( "!(throw aq )"). <br>  
eval( "!(assertEqual (throw aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (throw aq )  ( result_with_type ))" ).  <br>  
eval( "!(throw (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (throw (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (throw (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc throw <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
error_handling throws exceptions.  exception_handling
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  throw
</div>   Metta file: ../canary/stdlib_mettalog.metta 1597 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> throw</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Raises an exception. See also `catch`; the system will look for the innermost catch such that Exception unifies with Catcher."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Exception"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Does not return - raises an exception"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  throw
</div>   Metta file: ../canary/stdlib_mettalog.metta 1602 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> throw</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom ErrorType<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  throw
</div>   is similar to: 
<div class="big_tag"  >  catch
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/functional_programming_tests.metta 58 <br> 
!(assertEqualToResult (<div class="enlarged"> catch</div> (max-time! 1 (concurrent-maplist! is-even (1 2 3))) 
 <br> 4 
<div class="big_tag"  >  throw
</div>   is similar to: 
<div class="big_tag"  >  catch
</div>   Metta file: ../canary/stdlib_mettalog.metta 1605 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> catch</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Executes Form. If an exception is raised with `throw` during execution of Form while this is the innermost catch such that Catcher unifies with Exception, the exception is caught. Recover is then executed with bindings from Catcher."<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Form"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Catcher"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Recover"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Result of Form if no exception is raised. Result of Recover <div class="tag_parenthesis2">&nbsp&nbsp(</div>with bindings from Catcher<div class="tag_parenthesis2">) &nbsp </div> if an exception is caught."<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  throw
</div>   is similar to: 
<div class="big_tag"  >  catch
</div>   Metta file: ../canary/stdlib_mettalog.metta 1612 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> catch</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
91 time! <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['time!',Cond],Res):- !, time_eval(eval_args(Cond),eval_args(Eq,RetType,Depth,Self,Cond,Res)). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(time! aq ) <br> 
!(assertEqual (time! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (time! aq )  ( result_with_type ))  <br> 
eval( "!(time! aq )"). <br>  
eval( "!(assertEqual (time! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (time! aq )  ( result_with_type ))" ).  <br>  
eval( "!(time! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (time! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (time! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc time! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
execution_timing execution timing. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
92 trace <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['trace',Cond],Res):- !, with_debug(eval_args,eval_args(Eq,RetType,Depth,Self,Cond,Res)). <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(trace aq ) <br> 
!(assertEqual (trace aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (trace aq )  ( result_with_type ))  <br> 
eval( "!(trace aq )"). <br>  
eval( "!(assertEqual (trace aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (trace aq )  ( result_with_type ))" ).  <br>  
eval( "!(trace (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (trace (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (trace (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc trace <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
93 trace! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['trace!',A,B],C):- !, % writeln(trace(A)), <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(trace! aq au ) <br> 
!(assertEqual (trace! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (trace! aq au )  ( result_with_type ))  <br> 
eval( "!(trace! aq au )"). <br>  
eval( "!(assertEqual (trace! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (trace! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(trace! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (trace! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (trace! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc trace! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
debugging prints some debug information.  information_printing
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  trace!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1329 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> trace!</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Prints its first argument and returns second. Both arguments will be evaluated before processing"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to print"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to return"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Evaluated second input"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  trace!
</div>   Metta file: ../canary/stdlib_mettalog.metta 1335 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> trace!</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> %Undefined% $a $a<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
94 transfer! <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,_Dpth,Self,['transfer!',File],RetVal):- !, must_det_ll((include_metta(Self,File), <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(transfer! aq ) <br> 
!(assertEqual (transfer! aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (transfer! aq )  ( result_with_type ))  <br> 
eval( "!(transfer! aq )"). <br>  
eval( "!(assertEqual (transfer! aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (transfer! aq )  ( result_with_type ))" ).  <br>  
eval( "!(transfer! (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (transfer! (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (transfer! (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc transfer! <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
memory_management transfers space content to another space. 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
  </div>
<br>
95 type-cast <b> Arity: </b>3  <br> 
 eval_20(Eq,RetCasted,Depth,Self,['type-cast',Val,Into,Self],Casted):-current_self(Self),!, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(type-cast aq au as ) <br> 
!(assertEqual (type-cast aq au as )  ( result_with_type ))  <br> 
!(assertEqualToResult (type-cast aq au as )  ( result_with_type ))  <br> 
eval( "!(type-cast aq au as )"). <br>  
eval( "!(assertEqual (type-cast aq au as )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (type-cast aq au as )  ( result_with_type ))" ).  <br>  
eval( "!(type-cast (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )"). <br>  
eval( "!(assertEqual (type-cast (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (type-cast (superpose (a b c)) (superpose (c d e)) (superpose (e f g)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc type-cast <br> (@desc "" )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  type-cast
</div>   Metta file: ../canary/stdlib_mettalog.metta 336 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> type-cast</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Casts atom passed as a first argument to the type passed as a second argument using space as a context"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Atom to be casted"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Type to cast atom to"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Context atomspace"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Atom if casting is successful, <div class="tag_parenthesis2">&nbsp&nbsp(</div>Error ... BadType<div class="tag_parenthesis2">) &nbsp </div> otherwise"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  type-cast
</div>   Metta file: ../canary/stdlib_mettalog.metta 343 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> type-cast</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
96 unify <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['unify',Space|Args],Res):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(unify aq ) <br> 
!(assertEqual (unify aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (unify aq )  ( result_with_type ))  <br> 
eval( "!(unify aq )"). <br>  
eval( "!(assertEqual (unify aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (unify aq )  ( result_with_type ))" ).  <br>  
eval( "!(unify (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (unify (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (unify (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc unify <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
  
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  unify
</div>   Metta file: ../canary/stdlib_mettalog.metta 23 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> unify</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom Atom %Undefined%<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  unify
</div>   Metta file: ../canary/stdlib_mettalog.metta 1176 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> unify</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Like Match but allows any sort of container for the first argument. <div class="tag_parenthesis2">&nbsp&nbsp(</div>Match only allows MeTTa spaces.<div class="tag_parenthesis2">) &nbsp </div>"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>	<div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "The collection or space to match"<div class="tag_parenthesis3">) &nbsp </div><br>	<div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Second atom to unify with"<div class="tag_parenthesis3">) &nbsp </div><br>	<div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Result if two atoms unified successfully"<div class="tag_parenthesis3">) &nbsp </div><br>	<div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Result otherwise"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Third argument when found or forth one otherwise"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3  function: 
<div class="big_tag"  >  unify
</div>   Metta file: ../canary/stdlib_mettalog.metta 1184 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> unify</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
97 union <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['union',Eval1,Eval2],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(union aq au ) <br> 
!(assertEqual (union aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (union aq au )  ( result_with_type ))  <br> 
eval( "!(union aq au )"). <br>  
eval( "!(assertEqual (union aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (union aq au )  ( result_with_type ))" ).  <br>  
eval( "!(union (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (union (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (union (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc union <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
nondet_sets it gives the union of 2 list .  lazy_union 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  union
</div>   Metta file: ../canary/stdlib_mettalog.metta 1514 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> union</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their union. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>union <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b b c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b, b, c, b, c, c, d]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Union of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  union
</div>   Metta file: ../canary/stdlib_mettalog.metta 1520 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> union</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  union
</div>   is similar to: 
<div class="big_tag"  >  unique
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/first_answer_long.metta 154 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>limit 6 <div class="tag_parenthesis1">&nbsp(</div><div class="enlarged"> unique</div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>synthesize <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>: $term $type<div class="tag_parenthesis3">) &nbsp </div> kb rb <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>S <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>S Z<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  union
</div>   is similar to: 
<div class="big_tag"  >  intersection
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta 4 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqualToResult <div class="tag_parenthesis1">&nbsp(</div><div class="enlarged"> intersection</div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>superpose <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>a b <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>+ 2 3 <div class="tag_parenthesis4">) &nbsp </div> c<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>superpose <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>b c <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>+ 2 3<div class="tag_parenthesis4">) &nbsp </div> c c d<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div> <div class="tag_parenthesis1">&nbsp(</div>b 5 c<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  union
</div>   is similar to: 
<div class="big_tag"  >  unique
</div>   Metta file: ../canary/stdlib_mettalog.metta 1505 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> unique</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes non-deterministic input <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div> and returns only unique entities. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>unique <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b c d d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b, c, d]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unique non-deterministic values from input set"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  union
</div>   is similar to: 
<div class="big_tag"  >  unique
</div>   Metta file: ../canary/stdlib_mettalog.metta 1510 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> unique</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  union
</div>   is similar to: 
<div class="big_tag"  >  subtraction
</div>   Metta file: ../canary/stdlib_mettalog.metta 1534 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> subtraction</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their subtraction. E.g. !<div class="tag_parenthesis2">&nbsp&nbsp(</div>subtraction <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b b c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Subtraction of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  union
</div>   is similar to: 
<div class="big_tag"  >  subtraction
</div>   Metta file: ../canary/stdlib_mettalog.metta 1540 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> subtraction</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 9 
<div class="big_tag"  >  union
</div>   is similar to: 
<div class="big_tag"  >  intersection
</div>   Metta file: ../canary/stdlib_mettalog.metta 1524 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> intersection</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their intersection. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>intersection <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b c c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [b, c, c]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Intersection of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
98 unique <b> Arity: </b>1  <br> 
 eval_20(Eq,RetType,Depth,Self,['unique',Eval],RetVal):- !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(unique aq ) <br> 
!(assertEqual (unique aq )  ( result_with_type ))  <br> 
!(assertEqualToResult (unique aq )  ( result_with_type ))  <br> 
eval( "!(unique aq )"). <br>  
eval( "!(assertEqual (unique aq )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (unique aq )  ( result_with_type ))" ).  <br>  
eval( "!(unique (superpose (a b c)) )"). <br>  
eval( "!(assertEqual (unique (superpose (a b c)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (unique (superpose (a b c)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc unique <br> (@desc "" )<br> (@params (   (@param "") ) )<br> (@return "") ) 
  </div>
nondet_sets makes nondet results unique.  no_repeats_var
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1  function: 
<div class="big_tag"  >  unique
</div>   Metta file: ../canary/stdlib_mettalog.metta 1505 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> unique</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes non-deterministic input <div class="tag_parenthesis2">&nbsp&nbsp(</div>first argument<div class="tag_parenthesis2">) &nbsp </div> and returns only unique entities. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>unique <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b c d d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b, c, d]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unique non-deterministic values from input set"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2  function: 
<div class="big_tag"  >  unique
</div>   Metta file: ../canary/stdlib_mettalog.metta 1510 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> unique</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  unique
</div>   is similar to: 
<div class="big_tag"  >  intersection
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/base_test_repr_parse_intersection.metta 4 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div>assertEqualToResult <div class="tag_parenthesis1">&nbsp(</div><div class="enlarged"> intersection</div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>superpose <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>a b <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>+ 2 3 <div class="tag_parenthesis4">) &nbsp </div> c<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_parenthesis2">&nbsp&nbsp(</div>superpose <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>b c <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>+ 2 3<div class="tag_parenthesis4">) &nbsp </div> c c d<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div> <div class="tag_parenthesis1">&nbsp(</div>b 5 c<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 4 
<div class="big_tag"  >  unique
</div>   is similar to: 
<div class="big_tag"  >  union
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/represent_and_parse_tests.metta 11 <br> 

<div class="metta_clause"  >  ; !<div class="tag_parenthesis0">(</div><div class="enlarged"> union</div> <div class="tag_parenthesis1">&nbsp(</div>superpose <div class="tag_parenthesis2">&nbsp&nbsp(</div>a b c d <div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div> <div class="tag_parenthesis1">&nbsp(</div>superpose <div class="tag_parenthesis2">&nbsp&nbsp(</div> c d e f <div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 5 
<div class="big_tag"  >  unique
</div>   is similar to: 
<div class="big_tag"  >  subtraction
</div>   Metta file: ../canary/stdlib_mettalog.metta 1534 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> subtraction</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their subtraction. E.g. !<div class="tag_parenthesis2">&nbsp&nbsp(</div>subtraction <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b b c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Subtraction of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 6 
<div class="big_tag"  >  unique
</div>   is similar to: 
<div class="big_tag"  >  subtraction
</div>   Metta file: ../canary/stdlib_mettalog.metta 1540 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> subtraction</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 7 
<div class="big_tag"  >  unique
</div>   is similar to: 
<div class="big_tag"  >  intersection
</div>   Metta file: ../canary/stdlib_mettalog.metta 1524 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> intersection</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their intersection. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>intersection <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b c c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [b, c, c]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Intersection of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 8 
<div class="big_tag"  >  unique
</div>   is similar to: 
<div class="big_tag"  >  intersection
</div>   Metta file: ../canary/stdlib_mettalog.metta 1530 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div><div class="tag_operator">:</div> <div class="enlarged"> intersection</div> <div class="tag_parenthesis1">&nbsp(</div><div class="tag_arrow">-></div> Atom Atom Atom<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 9 
<div class="big_tag"  >  unique
</div>   is similar to: 
<div class="big_tag"  >  union
</div>   Metta file: ../canary/stdlib_mettalog.metta 1514 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> union</div><br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Function takes two non-deterministic inputs <div class="tag_parenthesis2">&nbsp&nbsp(</div>first and second argument<div class="tag_parenthesis2">) &nbsp </div> and returns their union. E.g. <div class="tag_parenthesis2">&nbsp&nbsp(</div>union <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>a b b c<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div> <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>superpose <div class="tag_parenthesis4">&nbsp&nbsp&nbsp&nbsp(</div>b c c d<div class="tag_parenthesis4">) &nbsp </div><div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div> <div class="tag_arrow">-></div> [a, b, b, c, b, c, c, d]"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Another non-deterministic set of values"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Non-deterministic Union of sets"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<br>
99 with-output-to! <b> Arity: </b>2  <br> 
 eval_20(Eq,RetType,Depth,Self,['with-output-to!',S,NE],R):-  !, <br> 
 
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #FFFFD9; color: #3A3A3A " >  !(with-output-to! aq au ) <br> 
!(assertEqual (with-output-to! aq au )  ( result_with_type ))  <br> 
!(assertEqualToResult (with-output-to! aq au )  ( result_with_type ))  <br> 
eval( "!(with-output-to! aq au )"). <br>  
eval( "!(assertEqual (with-output-to! aq au )  ( result_with_type ))" ). <br> 
eval( "!(assertEqualToResult (with-output-to! aq au )  ( result_with_type ))" ).  <br>  
eval( "!(with-output-to! (superpose (a b c)) (superpose (c d e)) )"). <br>  
eval( "!(assertEqual (with-output-to! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ). <br> 
eval( "!(assertEqualToResult (with-output-to! (superpose (a b c)) (superpose (c d e)) )  ( superpose (e f g) ))" ).  <br>  

 <hr> 
 (@doc with-output-to! <br> (@desc "" )<br> (@params (   (@param "")  (@param "")))<br> (@return "") ) 
  </div>
output redirects output to a specified target.  redirection
<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >  
 <br> 1 
<div class="big_tag"  >  with-output-to!
</div>   is similar to: 
<div class="big_tag"  >  println!
</div>   Metta file: ../../tests/baseline_compat/hyperon-mettalog_sanity/fibo_hang.metta 20 <br> 

<div class="metta_clause"  >  !<div class="tag_parenthesis0">(</div><div class="enlarged"> println!</div> <div class="tag_parenthesis1">&nbsp(</div>fib 12<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 2 
<div class="big_tag"  >  with-output-to!
</div>   is similar to: 
<div class="big_tag"  >  print
</div>   Metta file: ../canary/stdlib_mettalog.metta 1225 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> print</div>-mods!<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Prints all modules with their correspondent spaces"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unit atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
 <br> 3 
<div class="big_tag"  >  with-output-to!
</div>   is similar to: 
<div class="big_tag"  >  print
</div>   Metta file: ../canary/stdlib_mettalog.metta 1339 <br> 

<div class="metta_clause"  >  <div class="tag_parenthesis0">(</div>@doc <div class="enlarged"> print</div>ln!<br>  <div class="tag_parenthesis1">&nbsp(</div>@desc "Prints a line of text to the console"<div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@params <div class="tag_parenthesis2">&nbsp&nbsp(</div><br>    <div class="tag_parenthesis3">&nbsp&nbsp&nbsp(</div>@param "Expression/atom to be printed out"<div class="tag_parenthesis3">) &nbsp </div><div class="tag_parenthesis2">) &nbsp </div><div class="tag_parenthesis1">) &nbsp </div><br>  <div class="tag_parenthesis1">&nbsp(</div>@return "Unit atom"<div class="tag_parenthesis1">) &nbsp </div><div class="tag_parenthesis0">) &nbsp </div>
</div>  
  </div>
<h2> Secondary Tags identified </h2> <br>

<div id="" style="border: 1px solid black; border-radius : 9px; padding: 5px; margin-left: 40px; max-width: 90% ; background-color: #676767; color: #E7E7E7 " >   - register_module_op-   <br> 
 - git_module_op-   <br> 
 - match_op-   <br> 
 - bind_op-   <br> 
 - new_space_op-   <br> 
 - add_atom_op-   <br> 
 - remove_atom_op-   <br> 
 - get_atoms_op-   <br> 
 - car_atom_op-   <br> 
 - cdr_atom_op-   <br> 
 - cons_atom_op-   <br> 
 - println_op-   <br> 
 - format_args_op-   <br> 
 - trace_op-   <br> 
 - nop_op-   <br> 
 - let_op-   <br> 
 - let_var_op-   <br> 
 - new_state_op-   <br> 
 - change_state_op-   <br> 
 - get_state_op-   <br> 
 - get_meta_type_op-   <br> 
 - mod_space_op-   <br> 
 - print_mods_op-   <br> 
 - sealed_op-   <br> 
 - capture_op-   <br> 
 - case_op-   <br> 
 - assert_equal_op-   <br> 
 - assert_equal_to_result_op-   <br> 
 - collapse_op-   <br> 
 - superpose_op-   <br> 
 - unique_op-   <br> 
 - union_op-   <br> 
 - intersection_op-   <br> 
 - subtraction_op-   <br> 
 - get_type_op-   <br> 
 - get_type_space_op-   <br> 
 - import_op-   <br> 
 - include_op-   <br> 
 - pragma_op-   <br> 
 - self_atom-   <br> 
 - sum_op-   <br> 
 - sub_op-   <br> 
 - mul_op-   <br> 
 - div_op-   <br> 
 - mod_op-   <br> 
 - lt_op-   <br> 
 - gt_op-   <br> 
 - le_op-   <br> 
 - ge_op-   <br> 
 - eq_op-   <br> 
 - and_op-   <br> 
 - or_op-   <br> 
 - not_op-   <br> 
 - xor_op-   <br> 
 - flip_op-   <br> 

  </div>
@METTA-example TAGS <br>

 <br> rust

 <br> rust match

 <br> rust get-type

 <br> rust get-metatype

 <br> rust add-atom

 <br> rust get-atoms

 <br> rust get-state

 <br> rust assertEqual

 <br> rust superpose

 <br> rust union

 <br> rust subtraction

 <br> rust pragma!

 <br> rust include

 <br> rust println!

 <br> rust sealed

 <br> rust &self

 <br> rust +

 <br> rust *

 <br> rust <

 <br> rust <=

 <br> rust register-module!

 <br> rust new-space

 <br> rust cdr-atom

 <br> rust format-args

 <br> rust nop

 <br> rust new-state

 <br> rust print-mods!

 <br> rust capture

 <br> rust import!

 <br> rust and

 <br> rust not

 <br> rust flip

 <br> rust mod-space!

 <br> rust remove-atom

 <br> rust car-atom

 <br> rust cons-atom

 <br> rust bind!

 <br> rust case

 <br> rust assertEqualToResult

 <br> rust collapse

 <br> rust unique

 <br> rust intersection

 <br> rust trace!

 <br> rust let

 <br> rust let*

 <br> python

 <br> python parse

 <br> python stringtochars

 <br> python py-list

 <br> python py-tuple

 <br> python py-dict

 <br> python get-type

 <br> metta_ontol_pl

 <br> metta_ontol_pl case

 <br> metta_ontol_pl let

 <br> metta_ontol_pl let*

 <br> metta_ontol_pl sealed

 <br> metta_ontol_pl function

 <br> metta_ontol_pl return

 <br> metta_ontol_pl catch

 <br> metta_ontol_pl throw

 <br> metta_ontol_pl collapse

 <br> metta_ontol_pl sequential

 <br> metta_ontol_pl superpose

 <br> metta_ontol_pl repr

 <br> metta_ontol_pl parse

 <br> metta_ontol_pl limit!

 <br> metta_ontol_pl offset!

 <br> metta_ontol_pl number-of

 <br> metta_ontol_pl nop

 <br> metta_ontol_pl pragma!

 <br> metta_ontol_pl include!

 <br> metta_ontol_pl load-ascii

 <br> metta_ontol_pl extend-py!

 <br> metta_ontol_pl import!

 <br> metta_ontol_pl eval-for

 <br> metta_ontol_pl call!

 <br> metta_ontol_pl predicate-arity

 <br> metta_ontol_pl call-fn!

 <br> metta_ontol_pl call-string!

 <br> metta_ontol_pl match

 <br> metta_ontol_pl get-atoms

 <br> metta_ontol_pl new-space

 <br> metta_ontol_pl remove-atom

 <br> metta_ontol_pl add-atom

 <br> metta_ontol_pl transfer!

 <br> metta_ontol_pl fromnumber

 <br> metta_ontol_pl coerce

 <br> metta_ontol_pl +

 <br> metta_ontol_pl -

 <br> metta_ontol_pl *

 <br> metta_ontol_pl <

 <br> metta_ontol_pl >=

 <br> metta_ontol_pl <=

 <br> metta_ontol_pl >

 <br> metta_ontol_pl =

 <br> metta_ontol_pl ==

 <br> metta_ontol_pl or

 <br> metta_ontol_pl xor

 <br> metta_ontol_pl and

 <br> metta_ontol_pl not

 <br> metta_ontol_pl time!

 <br> metta_ontol_pl trace!

 <br> metta_ontol_pl no-rtrace!

 <br> metta_ontol_pl rtrace!

 <br> metta_ontol_pl println!

 <br> metta_ontol_pl with-output-to!

 <br> metta_ontol_pl print

 <br> metta_ontol_pl assertequal

 <br> metta_ontol_pl assertequaltoresult

 <br> metta_ontol_pl change-state!

 <br> metta_ontol_pl get-state

 <br> metta_ontol_pl car-atom

 <br> metta_ontol_pl cdr-atom

 <br> metta_ontol_pl make_list

 <br> metta_ontol_pl cons

 <br> metta_ontol_pl length

 <br> metta_ontol_pl countelement

 <br> metta_ontol_pl unique

 <br> metta_ontol_pl subtraction

 <br> metta_ontol_pl intersection

 <br> metta_ontol_pl union

 <br> metta_ontol_pl stringtochars

 <br> metta_ontol_pl charstostring

 <br> metta_ontol_pl format-args

 <br> metta_ontol_pl flip

 <br> metta_example

 <br> metta_example assertequal

 <br> metta_example a

 <br> metta_example b

 <br> metta

 <br> metta let

 <br> metta superpose

 <br> metta nop

 <br> metta and

 <br> metta or

 <br> metta xor

 <br> metta not

 <br> 
